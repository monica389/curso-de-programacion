[
    {
        "label": "random",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "random",
        "description": "random",
        "detail": "random",
        "documentation": {}
    },
    {
        "label": "speech_recognition",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "speech_recognition",
        "description": "speech_recognition",
        "detail": "speech_recognition",
        "documentation": {}
    },
    {
        "label": "requests",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "requests",
        "description": "requests",
        "detail": "requests",
        "documentation": {}
    },
    {
        "label": "pyttsx3",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pyttsx3",
        "description": "pyttsx3",
        "detail": "pyttsx3",
        "documentation": {}
    },
    {
        "label": "speech.recognition",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "speech.recognition",
        "description": "speech.recognition",
        "detail": "speech.recognition",
        "documentation": {}
    },
    {
        "label": "Groq",
        "importPath": "groq",
        "description": "groq",
        "isExtraImport": true,
        "detail": "groq",
        "documentation": {}
    },
    {
        "label": "Groq",
        "importPath": "groq",
        "description": "groq",
        "isExtraImport": true,
        "detail": "groq",
        "documentation": {}
    },
    {
        "label": "Groq",
        "importPath": "groq",
        "description": "groq",
        "isExtraImport": true,
        "detail": "groq",
        "documentation": {}
    },
    {
        "label": "Groq",
        "importPath": "groq",
        "description": "groq",
        "isExtraImport": true,
        "detail": "groq",
        "documentation": {}
    },
    {
        "label": "Groq",
        "importPath": "groq",
        "description": "groq",
        "isExtraImport": true,
        "detail": "groq",
        "documentation": {}
    },
    {
        "label": "time",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "time",
        "description": "time",
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "datetime",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "datetime",
        "description": "datetime",
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "randon",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "randon",
        "description": "randon",
        "detail": "randon",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "funciones",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "funciones",
        "description": "funciones",
        "detail": "funciones",
        "documentation": {}
    },
    {
        "label": "math",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "math",
        "description": "math",
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "pprint",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pprint",
        "description": "pprint",
        "detail": "pprint",
        "documentation": {}
    },
    {
        "label": "palabra_ahorcado",
        "kind": 2,
        "importPath": ".mypy_cache.ahorcadomejorado",
        "description": ".mypy_cache.ahorcadomejorado",
        "peekOfCode": "def palabra_ahorcado():\n    palabras = [\"manzana\", \"banana\", \"pera\", \"uva\", \"naranja\"]\n    palabra_secreta = random.choice(palabras)\n    letras_adivinadas = []\n    intentos = 6\n    while intentos > 0:\n        palabra_actual = \"\"\n        for letra in palabra_secreta:\n            if letra in letras_adivinadas:\n                palabra_actual += letra",
        "detail": ".mypy_cache.ahorcadomejorado",
        "documentation": {}
    },
    {
        "label": "jugador",
        "kind": 5,
        "importPath": ".mypy_cache.ahorcadomejorado",
        "description": ".mypy_cache.ahorcadomejorado",
        "peekOfCode": "jugador = input (\"ingrese su nombre: \")\nincognita=palabra_ahorcado()\nintentos = 0\nif intentos != 0:\n    puntaje = 0\nelse:\n    puntaje = 10\nprint (f\"el puntaje de {jugador} es {puntaje}\")",
        "detail": ".mypy_cache.ahorcadomejorado",
        "documentation": {}
    },
    {
        "label": "intentos",
        "kind": 5,
        "importPath": ".mypy_cache.ahorcadomejorado",
        "description": ".mypy_cache.ahorcadomejorado",
        "peekOfCode": "intentos = 0\nif intentos != 0:\n    puntaje = 0\nelse:\n    puntaje = 10\nprint (f\"el puntaje de {jugador} es {puntaje}\")",
        "detail": ".mypy_cache.ahorcadomejorado",
        "documentation": {}
    },
    {
        "label": "Rectangulo",
        "kind": 6,
        "importPath": ".mypy_cache.ejercicio1_poo",
        "description": ".mypy_cache.ejercicio1_poo",
        "peekOfCode": "class Rectangulo: \n    def __init__ (self, alto, ancho):\n        self.alto = alto\n        self.ancho = ancho  \n    def mostrar_caracteristicas(self):\n        print(f\"el rectangulo tiene un ancho {self.ancho}  y un alto {self.alto}\")\n        return\n    def area(self):\n        area = self.alto * self.ancho\n        print(f\" el area es {area}\")",
        "detail": ".mypy_cache.ejercicio1_poo",
        "documentation": {}
    },
    {
        "label": "mi_Rectangulo",
        "kind": 5,
        "importPath": ".mypy_cache.ejercicio1_poo",
        "description": ".mypy_cache.ejercicio1_poo",
        "peekOfCode": "mi_Rectangulo = Rectangulo(10,25)\nmi_Rectangulo.mostrar_caracteristicas()",
        "detail": ".mypy_cache.ejercicio1_poo",
        "documentation": {}
    },
    {
        "label": "Rectangulo",
        "kind": 6,
        "importPath": ".mypy_cache.ejercicio_rectangulo",
        "description": ".mypy_cache.ejercicio_rectangulo",
        "peekOfCode": "class Rectangulo:\n    def __init__(self, ancho, alto):\n        self.ancho = ancho\n        self.alto = alto\nmi_Rectangulo = Rectangulo(10,25)",
        "detail": ".mypy_cache.ejercicio_rectangulo",
        "documentation": {}
    },
    {
        "label": "mi_Rectangulo",
        "kind": 5,
        "importPath": ".mypy_cache.ejercicio_rectangulo",
        "description": ".mypy_cache.ejercicio_rectangulo",
        "peekOfCode": "mi_Rectangulo = Rectangulo(10,25)",
        "detail": ".mypy_cache.ejercicio_rectangulo",
        "documentation": {}
    },
    {
        "label": "vehiculos",
        "kind": 6,
        "importPath": ".mypy_cache.programacion_objetos",
        "description": ".mypy_cache.programacion_objetos",
        "peekOfCode": "class vehiculos:\n    def __init__(self):\n        self.color = color\n        self.puertas = puertas\n        self.modelo = modelo \n        self.marca = marca\n    def mostrar_caracteristicas(self):\n        print (f\"el auto es de color {self.color}, tiene{self.puertas} puertas y el modelo es {self.modelo} \")\n    def mostrar_color(self):\n        return",
        "detail": ".mypy_cache.programacion_objetos",
        "documentation": {}
    },
    {
        "label": "lista_1",
        "kind": 5,
        "importPath": ".mypy_cache.trivia",
        "description": ".mypy_cache.trivia",
        "peekOfCode": "lista_1 = [1,2,3] \nlista_2 = lista_1\nlista_1.append(4) \nprint(len(lista_2))",
        "detail": ".mypy_cache.trivia",
        "documentation": {}
    },
    {
        "label": "lista_2",
        "kind": 5,
        "importPath": ".mypy_cache.trivia",
        "description": ".mypy_cache.trivia",
        "peekOfCode": "lista_2 = lista_1\nlista_1.append(4) \nprint(len(lista_2))",
        "detail": ".mypy_cache.trivia",
        "documentation": {}
    },
    {
        "label": "reconocer_voz",
        "kind": 2,
        "importPath": "laboratorio programación.APIgroq4_8",
        "description": "laboratorio programación.APIgroq4_8",
        "peekOfCode": "def reconocer_voz():\n    recognizer = sr.Recognizer()\n    with sr.Microphone() as source:\n        print(\"Di algo...\")\n        audio = recognizer.listen(source)\n        try:\n            texto = recognizer.recognize_google(audio, language=\"es-ES\")\n            print(f\"Dijiste: {texto}\")\n            return texto\n        except sr.UnknownValueError:",
        "detail": "laboratorio programación.APIgroq4_8",
        "documentation": {}
    },
    {
        "label": "consultar_api",
        "kind": 2,
        "importPath": "laboratorio programación.APIgroq4_8",
        "description": "laboratorio programación.APIgroq4_8",
        "peekOfCode": "def consultar_api(texto):\n    url = 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\n    headers = {\n        \"Authorization\": \"Bearer TU_API_KEY\",\n        \"Content-Type\": \"application/json\"\n    }\n    payload = {\n        \"query\": texto\n    }\n    response = requests.post(url, json=payload, headers=headers)",
        "detail": "laboratorio programación.APIgroq4_8",
        "documentation": {}
    },
    {
        "label": "texto_a_audio",
        "kind": 2,
        "importPath": "laboratorio programación.APIgroq4_8",
        "description": "laboratorio programación.APIgroq4_8",
        "peekOfCode": "def texto_a_audio(texto):\n    engine = pyttsx3.init()\n    engine.say(texto)\n    engine.runAndWait()\ndef main():\n    texto = reconocer_voz()\n    if texto:\n        respuesta = consultar_api(texto)\n        print(f\"Respuesta de la API: {respuesta}\")\n        texto_a_audio(respuesta)",
        "detail": "laboratorio programación.APIgroq4_8",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "laboratorio programación.APIgroq4_8",
        "description": "laboratorio programación.APIgroq4_8",
        "peekOfCode": "def main():\n    texto = reconocer_voz()\n    if texto:\n        respuesta = consultar_api(texto)\n        print(f\"Respuesta de la API: {respuesta}\")\n        texto_a_audio(respuesta)",
        "detail": "laboratorio programación.APIgroq4_8",
        "documentation": {}
    },
    {
        "label": "r",
        "kind": 5,
        "importPath": "laboratorio programación.ejercicio_en_clase",
        "description": "laboratorio programación.ejercicio_en_clase",
        "peekOfCode": "r = sr.Recognizer()\nwith sr.Microphone() as source:\n    print (\"Hable: \")\n    audio = r.listen(source)\n    try:\n        text = r.recognize_google(audio, language = 'es-ES')\n        print (f\"dijiste:{text}\")\n        engine.say(text)\n        engine.runAndWait()\n    except sr.UnknownValueError:",
        "detail": "laboratorio programación.ejercicio_en_clase",
        "documentation": {}
    },
    {
        "label": "r",
        "kind": 5,
        "importPath": "laboratorio programación.explorador",
        "description": "laboratorio programación.explorador",
        "peekOfCode": "r = sr.Recognizer()\nwith sr.Microphone() as source:\n    print(\"Hable:\")\n    audio = r.listen(source)\n    try:\n        text = r.recognize_google(audio, language = 'es-ES')\n        print (f\"dijiste:{text}\")\n        engine.say(text)\n        engine.runAndWait()\n    except sr.UnknownValueError:",
        "detail": "laboratorio programación.explorador",
        "documentation": {}
    },
    {
        "label": "client",
        "kind": 5,
        "importPath": "laboratorio programación.groq25_6",
        "description": "laboratorio programación.groq25_6",
        "peekOfCode": "client = Groq(\n    api_key = \"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\",\n)\npregunta= input(\"Que te gustaria preguntar\")\ninteraccion_chat = client.chat.completions.create(\n    messages=[\n        {\n            \"role\": \"user\",\n            \"content\": pregunta,\n        }",
        "detail": "laboratorio programación.groq25_6",
        "documentation": {}
    },
    {
        "label": "interaccion_chat",
        "kind": 5,
        "importPath": "laboratorio programación.groq25_6",
        "description": "laboratorio programación.groq25_6",
        "peekOfCode": "interaccion_chat = client.chat.completions.create(\n    messages=[\n        {\n            \"role\": \"user\",\n            \"content\": pregunta,\n        }\n    ],\n    model=\"llama3-8b-8192\",\n)\nprint(interaccion_chat.choices[0].message.content)",
        "detail": "laboratorio programación.groq25_6",
        "documentation": {}
    },
    {
        "label": "engine",
        "kind": 5,
        "importPath": "laboratorio programación.groq25_6",
        "description": "laboratorio programación.groq25_6",
        "peekOfCode": "engine = pyttsx3.init()\nengine.say(\"Hola En que puedo ayudarte hoy?\")\nengine.runAndWait() \nhabla =input(\"Desea escuchar la respuesta? S/N\").upper \nescrito =input(\"Desea escribir la pregunta? S/N\").upper\n#segundo usamos el peechRecognition para dar nuestro prompt\n#inicializar el recognizer\nr = sr.Recognizer()\n# configura el microfono\nwhit sr.Microphone() as source:",
        "detail": "laboratorio programación.groq25_6",
        "documentation": {}
    },
    {
        "label": "r",
        "kind": 5,
        "importPath": "laboratorio programación.groq25_6",
        "description": "laboratorio programación.groq25_6",
        "peekOfCode": "r = sr.Recognizer()\n# configura el microfono\nwhit sr.Microphone() as source:\nprint(\"Hable 10 segundos):\")\n#cuarto obtenemos un resultado por medio de pyttsx3\n#print(interaccion_chat.choice[0].message).content\nif habla ==\"s\"\n   engine.say(interaccion_chat.choice[0].message).content\n   engine.runAndwait()",
        "detail": "laboratorio programación.groq25_6",
        "documentation": {}
    },
    {
        "label": "engine",
        "kind": 5,
        "importPath": "laboratorio programación.hablar",
        "description": "laboratorio programación.hablar",
        "peekOfCode": "engine = pyttsx3.init()\nengine.say(\"Hola, Mundo!\")\nengine.runAndWait()\n\"\"\"\"\"\"\nengine= pyttsx3.init()\nhablar = input(\"escribe lo que quieras que diga\")\nengine.say(hablar)\nrate =engine.getProperty('rate')\nprint(f\"la velocidad actual es: {rate}\")\nengine.setProperty('rate')",
        "detail": "laboratorio programación.hablar",
        "documentation": {}
    },
    {
        "label": "hablar",
        "kind": 5,
        "importPath": "laboratorio programación.hablar",
        "description": "laboratorio programación.hablar",
        "peekOfCode": "hablar = input(\"escribe lo que quieras que diga\")\nengine.say(hablar)\nrate =engine.getProperty('rate')\nprint(f\"la velocidad actual es: {rate}\")\nengine.setProperty('rate')\nvoice= engine.getProperty('voices')\nfor i,voice in enumerate(voice):\n    print(f\"{i}. {voice.name} ({voice.languages})\") \nengine.setProperty('rate', 300)\nengine.setProperty(\"voice,voices[1].id\")",
        "detail": "laboratorio programación.hablar",
        "documentation": {}
    },
    {
        "label": "engine",
        "kind": 5,
        "importPath": "laboratorio programación.hora_levantarse",
        "description": "laboratorio programación.hora_levantarse",
        "peekOfCode": "engine = pyttsx3.init()\nhora_alarma = input(\"Ingrese la hora de la alarme (HH:MM): \")\nhora_alarma = datetime.strptime(hora_alarma, '%H:%M')\nwhile True:\n    hora_actual = datetime.now()\n    hora_alarma_str = hora_alarma.strftime('%H:%M:%S')\n    hora_actual_str = hora_actual.strftime('%H:%M:%S')\n    if hora_actual_str == hora_alarma_str:\n        print(\"¡Hora de levantarse!\")\n        engine.say(\"A levantarse dijo la rana mientras espiaba por la ventana\")",
        "detail": "laboratorio programación.hora_levantarse",
        "documentation": {}
    },
    {
        "label": "hora_alarma",
        "kind": 5,
        "importPath": "laboratorio programación.hora_levantarse",
        "description": "laboratorio programación.hora_levantarse",
        "peekOfCode": "hora_alarma = input(\"Ingrese la hora de la alarme (HH:MM): \")\nhora_alarma = datetime.strptime(hora_alarma, '%H:%M')\nwhile True:\n    hora_actual = datetime.now()\n    hora_alarma_str = hora_alarma.strftime('%H:%M:%S')\n    hora_actual_str = hora_actual.strftime('%H:%M:%S')\n    if hora_actual_str == hora_alarma_str:\n        print(\"¡Hora de levantarse!\")\n        engine.say(\"A levantarse dijo la rana mientras espiaba por la ventana\")\n        engine.runAndWait()",
        "detail": "laboratorio programación.hora_levantarse",
        "documentation": {}
    },
    {
        "label": "hora_alarma",
        "kind": 5,
        "importPath": "laboratorio programación.hora_levantarse",
        "description": "laboratorio programación.hora_levantarse",
        "peekOfCode": "hora_alarma = datetime.strptime(hora_alarma, '%H:%M')\nwhile True:\n    hora_actual = datetime.now()\n    hora_alarma_str = hora_alarma.strftime('%H:%M:%S')\n    hora_actual_str = hora_actual.strftime('%H:%M:%S')\n    if hora_actual_str == hora_alarma_str:\n        print(\"¡Hora de levantarse!\")\n        engine.say(\"A levantarse dijo la rana mientras espiaba por la ventana\")\n        engine.runAndWait()\n        break",
        "detail": "laboratorio programación.hora_levantarse",
        "documentation": {}
    },
    {
        "label": "cliente",
        "kind": 5,
        "importPath": "laboratorio programación.import os",
        "description": "laboratorio programación.import os",
        "peekOfCode": "cliente = Groq(...\napi_key = \"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\",\n)\ninteraccion_chat= cliente.chat.completions.create(\n    messages=[\n        {\n            \"role\": \"usar\",\n            \"content\": contenido,\n        }\n    ],",
        "detail": "laboratorio programación.import os",
        "documentation": {}
    },
    {
        "label": "api_key",
        "kind": 5,
        "importPath": "laboratorio programación.import os",
        "description": "laboratorio programación.import os",
        "peekOfCode": "api_key = \"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\",\n)\ninteraccion_chat= cliente.chat.completions.create(\n    messages=[\n        {\n            \"role\": \"usar\",\n            \"content\": contenido,\n        }\n    ],\n    model=\"llama3-8b-8192\",",
        "detail": "laboratorio programación.import os",
        "documentation": {}
    },
    {
        "label": "engine",
        "kind": 5,
        "importPath": "laboratorio programación.import time",
        "description": "laboratorio programación.import time",
        "peekOfCode": "engine = pyttsx3.init()\nvoices = engine.getProperty('voices')\nvoices = engine.getProperty('voices')\nhora_alarma = input(\"Ingrese la hora de la alarma (HH:MM): \")\nwhile True:\n    hora_actual = datetime.now() \n    hora_alarma_str = hora_alarma.strftime('%H:%M:%S')\n    hora_actual_str = hora_actual.strftime('H:%M:%S')\n    if hora_actual_str ==hora_alarma_str:\n        print(\"¡Hora de levantarse!\")",
        "detail": "laboratorio programación.import time",
        "documentation": {}
    },
    {
        "label": "voices",
        "kind": 5,
        "importPath": "laboratorio programación.import time",
        "description": "laboratorio programación.import time",
        "peekOfCode": "voices = engine.getProperty('voices')\nvoices = engine.getProperty('voices')\nhora_alarma = input(\"Ingrese la hora de la alarma (HH:MM): \")\nwhile True:\n    hora_actual = datetime.now() \n    hora_alarma_str = hora_alarma.strftime('%H:%M:%S')\n    hora_actual_str = hora_actual.strftime('H:%M:%S')\n    if hora_actual_str ==hora_alarma_str:\n        print(\"¡Hora de levantarse!\")\n        engine.say(\"A levantarse dijo la rana mientras espiaba por la ventana\")",
        "detail": "laboratorio programación.import time",
        "documentation": {}
    },
    {
        "label": "voices",
        "kind": 5,
        "importPath": "laboratorio programación.import time",
        "description": "laboratorio programación.import time",
        "peekOfCode": "voices = engine.getProperty('voices')\nhora_alarma = input(\"Ingrese la hora de la alarma (HH:MM): \")\nwhile True:\n    hora_actual = datetime.now() \n    hora_alarma_str = hora_alarma.strftime('%H:%M:%S')\n    hora_actual_str = hora_actual.strftime('H:%M:%S')\n    if hora_actual_str ==hora_alarma_str:\n        print(\"¡Hora de levantarse!\")\n        engine.say(\"A levantarse dijo la rana mientras espiaba por la ventana\")\n        engine.runAndWait()",
        "detail": "laboratorio programación.import time",
        "documentation": {}
    },
    {
        "label": "hora_alarma",
        "kind": 5,
        "importPath": "laboratorio programación.import time",
        "description": "laboratorio programación.import time",
        "peekOfCode": "hora_alarma = input(\"Ingrese la hora de la alarma (HH:MM): \")\nwhile True:\n    hora_actual = datetime.now() \n    hora_alarma_str = hora_alarma.strftime('%H:%M:%S')\n    hora_actual_str = hora_actual.strftime('H:%M:%S')\n    if hora_actual_str ==hora_alarma_str:\n        print(\"¡Hora de levantarse!\")\n        engine.say(\"A levantarse dijo la rana mientras espiaba por la ventana\")\n        engine.runAndWait()\n        break",
        "detail": "laboratorio programación.import time",
        "documentation": {}
    },
    {
        "label": "devolver_palabra_actual",
        "kind": 2,
        "importPath": "1",
        "description": "1",
        "peekOfCode": "def devolver_palabra_actual():\n    palabra_actual = \"\"\n    for letra in palabra_secreta:\n        if letra in letras_adivinadas:\n            palabra_actual += letra\n        else:\n            palabra_actual += \"_\"\n    return palabra_actual\ndef juego():\n    palabras = [\"manzana\", \"banana\", \"pera\", \"uva\", \"naranja\"]",
        "detail": "1",
        "documentation": {}
    },
    {
        "label": "juego",
        "kind": 2,
        "importPath": "1",
        "description": "1",
        "peekOfCode": "def juego():\n    palabras = [\"manzana\", \"banana\", \"pera\", \"uva\", \"naranja\"]\n    palabra_secreta = random.choice(palabras)\n    letras_adivinadas = []\n    intentos = 6\n    print(\"¡Bienvenido al juego del ahorcado!\")\n    while intentos > 0:\n        palabra_actual = devolver_palabra_actual()\n        print(palabra_actual)\n        if \"_\" not in palabra_actual:",
        "detail": "1",
        "documentation": {}
    },
    {
        "label": "edad",
        "kind": 5,
        "importPath": "11_10",
        "description": "11_10",
        "peekOfCode": "edad = int(input(\"ingrese su edad: \"))\nif 20 <= edad <=30:\n    print( \"tu edad esta entre 20 y 30 años \")\nelif 40 <= edad <=50:\n    print( \"tu edad  esta entre 40 y 50 años \")",
        "detail": "11_10",
        "documentation": {}
    },
    {
        "label": "numero_aleatorio",
        "kind": 5,
        "importPath": "11_25",
        "description": "11_25",
        "peekOfCode": "numero_aleatorio = 3\neligio = 3\nsalio = 3\nnumero_aleatorio = random.randit (1,3)\nif numero_aleatorio ==1: \n    salio = \"PIEDRA\"\nif numero_aleatorio ==2:\n    salio = \"PAPEL\"\nif numero_aleatorio ==3\n   salio = \"TIJERA\"",
        "detail": "11_25",
        "documentation": {}
    },
    {
        "label": "eligio",
        "kind": 5,
        "importPath": "11_25",
        "description": "11_25",
        "peekOfCode": "eligio = 3\nsalio = 3\nnumero_aleatorio = random.randit (1,3)\nif numero_aleatorio ==1: \n    salio = \"PIEDRA\"\nif numero_aleatorio ==2:\n    salio = \"PAPEL\"\nif numero_aleatorio ==3\n   salio = \"TIJERA\"\n   print(\"\")",
        "detail": "11_25",
        "documentation": {}
    },
    {
        "label": "salio",
        "kind": 5,
        "importPath": "11_25",
        "description": "11_25",
        "peekOfCode": "salio = 3\nnumero_aleatorio = random.randit (1,3)\nif numero_aleatorio ==1: \n    salio = \"PIEDRA\"\nif numero_aleatorio ==2:\n    salio = \"PAPEL\"\nif numero_aleatorio ==3\n   salio = \"TIJERA\"\n   print(\"\")\nprint(\"#\"*40)",
        "detail": "11_25",
        "documentation": {}
    },
    {
        "label": "numero_aleatorio",
        "kind": 5,
        "importPath": "11_25",
        "description": "11_25",
        "peekOfCode": "numero_aleatorio = random.randit (1,3)\nif numero_aleatorio ==1: \n    salio = \"PIEDRA\"\nif numero_aleatorio ==2:\n    salio = \"PAPEL\"\nif numero_aleatorio ==3\n   salio = \"TIJERA\"\n   print(\"\")\nprint(\"#\"*40)\nprint(\"######                                                                    ######\")",
        "detail": "11_25",
        "documentation": {}
    },
    {
        "label": "numero_ingresado",
        "kind": 5,
        "importPath": "11_25",
        "description": "11_25",
        "peekOfCode": "numero_ingresado = input (\"Ingrese un numero entre el 1 y el 3: \")\nif numero_ingresado.isdigit():\n   numero_ingresado = int(numero_ingresado)\nelse:   \n    print(\"#\"*50)\n    print(\"######                                                ######\")\n    print(\"######       NO INGRESO UN DATO CORRECTO  😛🚀        ###### \")\n    print(\"######            FIN DEL JUEGO                       ######\")\n    print(\"######                                                ######\")\n    print(\"#\"*50)",
        "detail": "11_25",
        "documentation": {}
    },
    {
        "label": "numero_secreto",
        "kind": 5,
        "importPath": "2_4",
        "description": "2_4",
        "peekOfCode": "numero_secreto = 10\nnumero_seleccionado = 5\nif numero_secreto == numero_seleccionado:\n    print(\" felicidades, adivinaste el numero secreto\")\nelse:\n    print(\"lo siento, no adivinaste el numero secreto\")",
        "detail": "2_4",
        "documentation": {}
    },
    {
        "label": "numero_seleccionado",
        "kind": 5,
        "importPath": "2_4",
        "description": "2_4",
        "peekOfCode": "numero_seleccionado = 5\nif numero_secreto == numero_seleccionado:\n    print(\" felicidades, adivinaste el numero secreto\")\nelse:\n    print(\"lo siento, no adivinaste el numero secreto\")",
        "detail": "2_4",
        "documentation": {}
    },
    {
        "label": "libro",
        "kind": 5,
        "importPath": "2_5",
        "description": "2_5",
        "peekOfCode": "libro = input(\"Ingresa el título del libro: \")\nautor = input(\"Ingresa el nombre del autor: \")\nprecio_base = float(input(\"Ingresa el precio base del libro: \"))\nenvio_gratis = input('¿El envío es gratis? / (\"true\") o (\"false\"):\").lower()== \"true\")\n    envio_gratis = \"38\"\nprint (f''' \n    libro :{libro}\n    autor :{autor}\n    precio: {precio_base}\n    envio_gratis : {envio_gratis}",
        "detail": "2_5",
        "documentation": {}
    },
    {
        "label": "autor",
        "kind": 5,
        "importPath": "2_5",
        "description": "2_5",
        "peekOfCode": "autor = input(\"Ingresa el nombre del autor: \")\nprecio_base = float(input(\"Ingresa el precio base del libro: \"))\nenvio_gratis = input('¿El envío es gratis? / (\"true\") o (\"false\"):\").lower()== \"true\")\n    envio_gratis = \"38\"\nprint (f''' \n    libro :{libro}\n    autor :{autor}\n    precio: {precio_base}\n    envio_gratis : {envio_gratis}\n    ''')",
        "detail": "2_5",
        "documentation": {}
    },
    {
        "label": "precio_base",
        "kind": 5,
        "importPath": "2_5",
        "description": "2_5",
        "peekOfCode": "precio_base = float(input(\"Ingresa el precio base del libro: \"))\nenvio_gratis = input('¿El envío es gratis? / (\"true\") o (\"false\"):\").lower()== \"true\")\n    envio_gratis = \"38\"\nprint (f''' \n    libro :{libro}\n    autor :{autor}\n    precio: {precio_base}\n    envio_gratis : {envio_gratis}\n    ''')\nelse envio_gratis false",
        "detail": "2_5",
        "documentation": {}
    },
    {
        "label": "envio_gratis",
        "kind": 5,
        "importPath": "2_5",
        "description": "2_5",
        "peekOfCode": "envio_gratis = input('¿El envío es gratis? / (\"true\") o (\"false\"):\").lower()== \"true\")\n    envio_gratis = \"38\"\nprint (f''' \n    libro :{libro}\n    autor :{autor}\n    precio: {precio_base}\n    envio_gratis : {envio_gratis}\n    ''')\nelse envio_gratis false",
        "detail": "2_5",
        "documentation": {}
    },
    {
        "label": "contador",
        "kind": 5,
        "importPath": "30_5",
        "description": "30_5",
        "peekOfCode": "contador = 0\nseguir = True\nwhile seguir == True: \n    valor_usuario = input(\"Ingrese un valor o ingrese A para finalizar:\")\n    contador += 1\n    if valor_usuario == \"A\":\n        seguir = False\nprint(f\" Se ejecuta correctamente {contador} veces!\")",
        "detail": "30_5",
        "documentation": {}
    },
    {
        "label": "seguir",
        "kind": 5,
        "importPath": "30_5",
        "description": "30_5",
        "peekOfCode": "seguir = True\nwhile seguir == True: \n    valor_usuario = input(\"Ingrese un valor o ingrese A para finalizar:\")\n    contador += 1\n    if valor_usuario == \"A\":\n        seguir = False\nprint(f\" Se ejecuta correctamente {contador} veces!\")",
        "detail": "30_5",
        "documentation": {}
    },
    {
        "label": "contador",
        "kind": 5,
        "importPath": "31_5",
        "description": "31_5",
        "peekOfCode": "contador = 10\nwhile contador >= 0:\n  print (contador)\n  contador -= 1\nprint(\"¡Despegue!\")",
        "detail": "31_5",
        "documentation": {}
    },
    {
        "label": "fecha_formateada",
        "kind": 5,
        "importPath": "33_5",
        "description": "33_5",
        "peekOfCode": "fecha_formateada = fecha_actual.str+time(\"*%d_%m\")\nprint(f\" la fecha actual es: [fecha_formateada]",
        "detail": "33_5",
        "documentation": {}
    },
    {
        "label": "edad",
        "kind": 5,
        "importPath": "3_100",
        "description": "3_100",
        "peekOfCode": "edad = int(input(\"ingrese su edad:\"))\nif edad <=20 and edad <=30 :\n    print (\"tu edad se encuentra entre 20 y 30 años\")\nelif edad <= 40 and edad <=50 :\n    print (\"tu edad se encuentra entre 40 y 50 años\")\nelse :\n    print(\"tu edad no esta en los rangos especificados\")\n    print(\" por favor ingrese un numero valido\")",
        "detail": "3_100",
        "documentation": {}
    },
    {
        "label": "numero_aleatorio",
        "kind": 5,
        "importPath": "3_22",
        "description": "3_22",
        "peekOfCode": "numero_aleatorio = randon.randint(1, 10)\nprint(f\"numero aleatorio: {numero_aleatorio}\")",
        "detail": "3_22",
        "documentation": {}
    },
    {
        "label": "numero_secreto",
        "kind": 5,
        "importPath": "adivina3_5",
        "description": "adivina3_5",
        "peekOfCode": "numero_secreto = random.randint(1,10)\nintentos = 0\nwhile intentos < 3:\n    intentos =int(input(\"Adivina el numero entre 1 y 10:\"))\n    intentos +=1\n    if intentos == numero_secreto:\n        print(f\"¡Correcto! Adivinaste el numero en {intentos} intentos.\") \n    elif intentos< numero_secreto:      \n        print(\" El numero secreto es mayor. Intenta de nuevo.\")\n    else:",
        "detail": "adivina3_5",
        "documentation": {}
    },
    {
        "label": "intentos",
        "kind": 5,
        "importPath": "adivina3_5",
        "description": "adivina3_5",
        "peekOfCode": "intentos = 0\nwhile intentos < 3:\n    intentos =int(input(\"Adivina el numero entre 1 y 10:\"))\n    intentos +=1\n    if intentos == numero_secreto:\n        print(f\"¡Correcto! Adivinaste el numero en {intentos} intentos.\") \n    elif intentos< numero_secreto:      \n        print(\" El numero secreto es mayor. Intenta de nuevo.\")\n    else:\n        print(\"El numero secreto es menor. Intenta de nuevo.\")",
        "detail": "adivina3_5",
        "documentation": {}
    },
    {
        "label": "numero_secreto",
        "kind": 5,
        "importPath": "adivinanza_clase1",
        "description": "adivinanza_clase1",
        "peekOfCode": "numero_secreto =  random.randint(1,10)\nprint (saludo_seleccionado)\nnombre_usuario = input(\"¿Como te llamas?: \")\nnumero_seleccionado_x_usuario = input(\"Ingrese el numero a adivinar del 1 al 10: \")\nmensaje_error_1 = f\" {nombre_usuario}!!! te dije que ingreses un numero del 1 al 10, volvé a empezar 🤦‍♂   ️\"\n# Primer intento\n#Validacion de que se un numero y no letras\nif numero_seleccionado_x_usuario.isdigit():\n    numero_seleccionado_x_usuario = int(numero_seleccionado_x_usuario )\nelse:",
        "detail": "adivinanza_clase1",
        "documentation": {}
    },
    {
        "label": "nombre_usuario",
        "kind": 5,
        "importPath": "adivinanza_clase1",
        "description": "adivinanza_clase1",
        "peekOfCode": "nombre_usuario = input(\"¿Como te llamas?: \")\nnumero_seleccionado_x_usuario = input(\"Ingrese el numero a adivinar del 1 al 10: \")\nmensaje_error_1 = f\" {nombre_usuario}!!! te dije que ingreses un numero del 1 al 10, volvé a empezar 🤦‍♂   ️\"\n# Primer intento\n#Validacion de que se un numero y no letras\nif numero_seleccionado_x_usuario.isdigit():\n    numero_seleccionado_x_usuario = int(numero_seleccionado_x_usuario )\nelse:\n    print(mensaje_error_1)\n    exit()",
        "detail": "adivinanza_clase1",
        "documentation": {}
    },
    {
        "label": "numero_seleccionado_x_usuario",
        "kind": 5,
        "importPath": "adivinanza_clase1",
        "description": "adivinanza_clase1",
        "peekOfCode": "numero_seleccionado_x_usuario = input(\"Ingrese el numero a adivinar del 1 al 10: \")\nmensaje_error_1 = f\" {nombre_usuario}!!! te dije que ingreses un numero del 1 al 10, volvé a empezar 🤦‍♂   ️\"\n# Primer intento\n#Validacion de que se un numero y no letras\nif numero_seleccionado_x_usuario.isdigit():\n    numero_seleccionado_x_usuario = int(numero_seleccionado_x_usuario )\nelse:\n    print(mensaje_error_1)\n    exit()\n# validacion de que este entre el rango permitido",
        "detail": "adivinanza_clase1",
        "documentation": {}
    },
    {
        "label": "mensaje_error_1",
        "kind": 5,
        "importPath": "adivinanza_clase1",
        "description": "adivinanza_clase1",
        "peekOfCode": "mensaje_error_1 = f\" {nombre_usuario}!!! te dije que ingreses un numero del 1 al 10, volvé a empezar 🤦‍♂   ️\"\n# Primer intento\n#Validacion de que se un numero y no letras\nif numero_seleccionado_x_usuario.isdigit():\n    numero_seleccionado_x_usuario = int(numero_seleccionado_x_usuario )\nelse:\n    print(mensaje_error_1)\n    exit()\n# validacion de que este entre el rango permitido\nif numero_seleccionado_x_usuario <1 or  numero_seleccionado_x_usuario >10:",
        "detail": "adivinanza_clase1",
        "documentation": {}
    },
    {
        "label": "numero_seleccionado_x_usuario",
        "kind": 5,
        "importPath": "adivinanza_clase1",
        "description": "adivinanza_clase1",
        "peekOfCode": "numero_seleccionado_x_usuario = input(\"Ingrese por segunda vez el numero a adivinar: \")\n#Validacion de que se un numero y no letras\nif numero_seleccionado_x_usuario.isdigit():\n    numero_seleccionado_x_usuario = int(numero_seleccionado_x_usuario )\nelse:\n    print(f\"{nombre_usuario} te dije que ingreses un numero del 1 al 10, volvé a empezar 🤦‍♂   ️\")\n    exit()\n# validacion de que este entre el rango permitido\nif numero_seleccionado_x_usuario <1 or  numero_seleccionado_x_usuario >10:\n    print(f\"{nombre_usuario} te dije que ingreses un numero del 1 al 10, volvé a empezar 🤦‍♂   ️\")",
        "detail": "adivinanza_clase1",
        "documentation": {}
    },
    {
        "label": "numero_seleccionado_x_usuario",
        "kind": 5,
        "importPath": "adivinanza_clase1",
        "description": "adivinanza_clase1",
        "peekOfCode": "numero_seleccionado_x_usuario = input(\"Ingrese por tercera vez el numero a adivinar: \")\n#Validacion de que se un numero y no letras\nif numero_seleccionado_x_usuario.isdigit():\n    numero_seleccionado_x_usuario = int(numero_seleccionado_x_usuario )\nelse:\n    print(\"Te dije que ingreses un numero del 1 al 10, volvé a empezar 🤦‍♂  ️\")\n    exit()\n# validacion de que este entre el rango permitido\nif numero_seleccionado_x_usuario <1 or  numero_seleccionado_x_usuario >10:\n    print(\"Te dije que ingreses un numero del 1 al 10, volvé a empezar 🤦‍♂   ️\")",
        "detail": "adivinanza_clase1",
        "documentation": {}
    },
    {
        "label": "valor_seleccionado_por_la_maquina",
        "kind": 5,
        "importPath": "adivinanza_clase2",
        "description": "adivinanza_clase2",
        "peekOfCode": "valor_seleccionado_por_la_maquina = random.randint(1,10)\nnombre_jugador =input(\"Ingrese el nombre del jugador: \")\nsaludo_1 = f\"Hola {nombre_jugador} bienvenido al juego de adivinanza, tenes 3 oportunidades para adivinar el número que seleccione, el número es del 1 al 10\"\nsaludo_2 =f\"Vamos GENI@ DE LA VIDA se que te llamas {nombre_jugador} pq lo pusiste recien , tenes 3 oportunidades para adivinar el número que seleccione, el número es del 1 al 10\"\nsaludo_3 = f\"ooooooh gran {nombre_jugador}, tenes 3 oportunidades para adivinar el número que seleccione, el número es del 1 al 10\"\nsaludo_4 = f\"dale loco!!!! {nombre_jugador} adiviname y te llevas un beso.\"\nelegi_un_saludo = random.randint(1,4)\nif (elegi_un_saludo == 1):\n    saludo = saludo_1\nif (elegi_un_saludo == 2):",
        "detail": "adivinanza_clase2",
        "documentation": {}
    },
    {
        "label": "saludo_1",
        "kind": 5,
        "importPath": "adivinanza_clase2",
        "description": "adivinanza_clase2",
        "peekOfCode": "saludo_1 = f\"Hola {nombre_jugador} bienvenido al juego de adivinanza, tenes 3 oportunidades para adivinar el número que seleccione, el número es del 1 al 10\"\nsaludo_2 =f\"Vamos GENI@ DE LA VIDA se que te llamas {nombre_jugador} pq lo pusiste recien , tenes 3 oportunidades para adivinar el número que seleccione, el número es del 1 al 10\"\nsaludo_3 = f\"ooooooh gran {nombre_jugador}, tenes 3 oportunidades para adivinar el número que seleccione, el número es del 1 al 10\"\nsaludo_4 = f\"dale loco!!!! {nombre_jugador} adiviname y te llevas un beso.\"\nelegi_un_saludo = random.randint(1,4)\nif (elegi_un_saludo == 1):\n    saludo = saludo_1\nif (elegi_un_saludo == 2):\n    saludo = saludo_2\nif (elegi_un_saludo == 3):",
        "detail": "adivinanza_clase2",
        "documentation": {}
    },
    {
        "label": "saludo_3",
        "kind": 5,
        "importPath": "adivinanza_clase2",
        "description": "adivinanza_clase2",
        "peekOfCode": "saludo_3 = f\"ooooooh gran {nombre_jugador}, tenes 3 oportunidades para adivinar el número que seleccione, el número es del 1 al 10\"\nsaludo_4 = f\"dale loco!!!! {nombre_jugador} adiviname y te llevas un beso.\"\nelegi_un_saludo = random.randint(1,4)\nif (elegi_un_saludo == 1):\n    saludo = saludo_1\nif (elegi_un_saludo == 2):\n    saludo = saludo_2\nif (elegi_un_saludo == 3):\n    saludo = saludo_3\nif (elegi_un_saludo == 4):",
        "detail": "adivinanza_clase2",
        "documentation": {}
    },
    {
        "label": "saludo_4",
        "kind": 5,
        "importPath": "adivinanza_clase2",
        "description": "adivinanza_clase2",
        "peekOfCode": "saludo_4 = f\"dale loco!!!! {nombre_jugador} adiviname y te llevas un beso.\"\nelegi_un_saludo = random.randint(1,4)\nif (elegi_un_saludo == 1):\n    saludo = saludo_1\nif (elegi_un_saludo == 2):\n    saludo = saludo_2\nif (elegi_un_saludo == 3):\n    saludo = saludo_3\nif (elegi_un_saludo == 4):\n    saludo = saludo_4",
        "detail": "adivinanza_clase2",
        "documentation": {}
    },
    {
        "label": "elegi_un_saludo",
        "kind": 5,
        "importPath": "adivinanza_clase2",
        "description": "adivinanza_clase2",
        "peekOfCode": "elegi_un_saludo = random.randint(1,4)\nif (elegi_un_saludo == 1):\n    saludo = saludo_1\nif (elegi_un_saludo == 2):\n    saludo = saludo_2\nif (elegi_un_saludo == 3):\n    saludo = saludo_3\nif (elegi_un_saludo == 4):\n    saludo = saludo_4\nprint (saludo)",
        "detail": "adivinanza_clase2",
        "documentation": {}
    },
    {
        "label": "varlor_seleccionado_usuario",
        "kind": 5,
        "importPath": "adivinanza_clase2",
        "description": "adivinanza_clase2",
        "peekOfCode": "varlor_seleccionado_usuario = input(\"ingresa el numero que crees que seleccione (el juego es del 1 al 10): \")\n#Valido que haya ingresado un numero y no una letra\nerror_numero_uno_diez =\"Te dije que pongas un numero del 1 al 10, Volve a empezar\"\nadivino_1 = f\"{nombre_jugador} Adivinaste el número ALA PRIMERA VEZ ... sos un genuio de la vida!!!!🚀🚀🚀🚀🚀🧙‍♂️🧙‍♂️🧙‍♂️🧙‍♂️🧙‍♂️🧙‍♂️\"\nadivino_2 = f\"{nombre_jugador} Adivinaste el número en la segunda oportunidad ... CAPO TOTAL ! 🚀🚀🚀🚀🚀🧙‍♂️🧙‍♂️🧙‍♂️🧙‍♂️🧙‍♂️🧙‍♂️\"\nadivino_3 = f\"{nombre_jugador} Adivinaste el número en la ultima  oportunidad ... TE FELICITO!! 🚀🚀🚀🚀🚀🧙‍♂️🧙‍♂️🧙‍♂️🧙‍♂️🧙‍♂️🧙‍♂️\"\nno_adivino_1 = f\"{nombre_jugador} No adivinaste el número lo lamento mucho, volve a probar , te quedan 2 oportunidades🧙‍♂️\"\nno_adivino_2 = f\"{nombre_jugador} No adivinaste, pensa un poco mas,  volve a probar ya que te queda la ultima oportunidad🧙‍♂️\"\nno_adivino_3 = f\"{nombre_jugador} aaaay {nombre_jugador}, {nombre_jugador}   lo lamento mucho,dejale la oportunidad a otro jugador y paga laprata 🧙‍♂️\"\n# aca voy declarar las variables para el texte de las diferencias",
        "detail": "adivinanza_clase2",
        "documentation": {}
    },
    {
        "label": "adivino_1",
        "kind": 5,
        "importPath": "adivinanza_clase2",
        "description": "adivinanza_clase2",
        "peekOfCode": "adivino_1 = f\"{nombre_jugador} Adivinaste el número ALA PRIMERA VEZ ... sos un genuio de la vida!!!!🚀🚀🚀🚀🚀🧙‍♂️🧙‍♂️🧙‍♂️🧙‍♂️🧙‍♂️🧙‍♂️\"\nadivino_2 = f\"{nombre_jugador} Adivinaste el número en la segunda oportunidad ... CAPO TOTAL ! 🚀🚀🚀🚀🚀🧙‍♂️🧙‍♂️🧙‍♂️🧙‍♂️🧙‍♂️🧙‍♂️\"\nadivino_3 = f\"{nombre_jugador} Adivinaste el número en la ultima  oportunidad ... TE FELICITO!! 🚀🚀🚀🚀🚀🧙‍♂️🧙‍♂️🧙‍♂️🧙‍♂️🧙‍♂️🧙‍♂️\"\nno_adivino_1 = f\"{nombre_jugador} No adivinaste el número lo lamento mucho, volve a probar , te quedan 2 oportunidades🧙‍♂️\"\nno_adivino_2 = f\"{nombre_jugador} No adivinaste, pensa un poco mas,  volve a probar ya que te queda la ultima oportunidad🧙‍♂️\"\nno_adivino_3 = f\"{nombre_jugador} aaaay {nombre_jugador}, {nombre_jugador}   lo lamento mucho,dejale la oportunidad a otro jugador y paga laprata 🧙‍♂️\"\n# aca voy declarar las variables para el texte de las diferencias\ndiferencia_dos = \"Estas muy hot 🌋\"\ndiferencia_tres = \"Esta tibio 😗\"\ndiferencia_cuatro = \"Estas re frio negro 🥶\"",
        "detail": "adivinanza_clase2",
        "documentation": {}
    },
    {
        "label": "adivino_2",
        "kind": 5,
        "importPath": "adivinanza_clase2",
        "description": "adivinanza_clase2",
        "peekOfCode": "adivino_2 = f\"{nombre_jugador} Adivinaste el número en la segunda oportunidad ... CAPO TOTAL ! 🚀🚀🚀🚀🚀🧙‍♂️🧙‍♂️🧙‍♂️🧙‍♂️🧙‍♂️🧙‍♂️\"\nadivino_3 = f\"{nombre_jugador} Adivinaste el número en la ultima  oportunidad ... TE FELICITO!! 🚀🚀🚀🚀🚀🧙‍♂️🧙‍♂️🧙‍♂️🧙‍♂️🧙‍♂️🧙‍♂️\"\nno_adivino_1 = f\"{nombre_jugador} No adivinaste el número lo lamento mucho, volve a probar , te quedan 2 oportunidades🧙‍♂️\"\nno_adivino_2 = f\"{nombre_jugador} No adivinaste, pensa un poco mas,  volve a probar ya que te queda la ultima oportunidad🧙‍♂️\"\nno_adivino_3 = f\"{nombre_jugador} aaaay {nombre_jugador}, {nombre_jugador}   lo lamento mucho,dejale la oportunidad a otro jugador y paga laprata 🧙‍♂️\"\n# aca voy declarar las variables para el texte de las diferencias\ndiferencia_dos = \"Estas muy hot 🌋\"\ndiferencia_tres = \"Esta tibio 😗\"\ndiferencia_cuatro = \"Estas re frio negro 🥶\"\nif not  varlor_seleccionado_usuario.isdigit() :",
        "detail": "adivinanza_clase2",
        "documentation": {}
    },
    {
        "label": "adivino_3",
        "kind": 5,
        "importPath": "adivinanza_clase2",
        "description": "adivinanza_clase2",
        "peekOfCode": "adivino_3 = f\"{nombre_jugador} Adivinaste el número en la ultima  oportunidad ... TE FELICITO!! 🚀🚀🚀🚀🚀🧙‍♂️🧙‍♂️🧙‍♂️🧙‍♂️🧙‍♂️🧙‍♂️\"\nno_adivino_1 = f\"{nombre_jugador} No adivinaste el número lo lamento mucho, volve a probar , te quedan 2 oportunidades🧙‍♂️\"\nno_adivino_2 = f\"{nombre_jugador} No adivinaste, pensa un poco mas,  volve a probar ya que te queda la ultima oportunidad🧙‍♂️\"\nno_adivino_3 = f\"{nombre_jugador} aaaay {nombre_jugador}, {nombre_jugador}   lo lamento mucho,dejale la oportunidad a otro jugador y paga laprata 🧙‍♂️\"\n# aca voy declarar las variables para el texte de las diferencias\ndiferencia_dos = \"Estas muy hot 🌋\"\ndiferencia_tres = \"Esta tibio 😗\"\ndiferencia_cuatro = \"Estas re frio negro 🥶\"\nif not  varlor_seleccionado_usuario.isdigit() :\n    print(error_numero_uno_diez)",
        "detail": "adivinanza_clase2",
        "documentation": {}
    },
    {
        "label": "no_adivino_1",
        "kind": 5,
        "importPath": "adivinanza_clase2",
        "description": "adivinanza_clase2",
        "peekOfCode": "no_adivino_1 = f\"{nombre_jugador} No adivinaste el número lo lamento mucho, volve a probar , te quedan 2 oportunidades🧙‍♂️\"\nno_adivino_2 = f\"{nombre_jugador} No adivinaste, pensa un poco mas,  volve a probar ya que te queda la ultima oportunidad🧙‍♂️\"\nno_adivino_3 = f\"{nombre_jugador} aaaay {nombre_jugador}, {nombre_jugador}   lo lamento mucho,dejale la oportunidad a otro jugador y paga laprata 🧙‍♂️\"\n# aca voy declarar las variables para el texte de las diferencias\ndiferencia_dos = \"Estas muy hot 🌋\"\ndiferencia_tres = \"Esta tibio 😗\"\ndiferencia_cuatro = \"Estas re frio negro 🥶\"\nif not  varlor_seleccionado_usuario.isdigit() :\n    print(error_numero_uno_diez)\n    exit()",
        "detail": "adivinanza_clase2",
        "documentation": {}
    },
    {
        "label": "no_adivino_2",
        "kind": 5,
        "importPath": "adivinanza_clase2",
        "description": "adivinanza_clase2",
        "peekOfCode": "no_adivino_2 = f\"{nombre_jugador} No adivinaste, pensa un poco mas,  volve a probar ya que te queda la ultima oportunidad🧙‍♂️\"\nno_adivino_3 = f\"{nombre_jugador} aaaay {nombre_jugador}, {nombre_jugador}   lo lamento mucho,dejale la oportunidad a otro jugador y paga laprata 🧙‍♂️\"\n# aca voy declarar las variables para el texte de las diferencias\ndiferencia_dos = \"Estas muy hot 🌋\"\ndiferencia_tres = \"Esta tibio 😗\"\ndiferencia_cuatro = \"Estas re frio negro 🥶\"\nif not  varlor_seleccionado_usuario.isdigit() :\n    print(error_numero_uno_diez)\n    exit()\n#lo convierto a int",
        "detail": "adivinanza_clase2",
        "documentation": {}
    },
    {
        "label": "no_adivino_3",
        "kind": 5,
        "importPath": "adivinanza_clase2",
        "description": "adivinanza_clase2",
        "peekOfCode": "no_adivino_3 = f\"{nombre_jugador} aaaay {nombre_jugador}, {nombre_jugador}   lo lamento mucho,dejale la oportunidad a otro jugador y paga laprata 🧙‍♂️\"\n# aca voy declarar las variables para el texte de las diferencias\ndiferencia_dos = \"Estas muy hot 🌋\"\ndiferencia_tres = \"Esta tibio 😗\"\ndiferencia_cuatro = \"Estas re frio negro 🥶\"\nif not  varlor_seleccionado_usuario.isdigit() :\n    print(error_numero_uno_diez)\n    exit()\n#lo convierto a int\nvarlor_seleccionado_usuario = int(varlor_seleccionado_usuario)",
        "detail": "adivinanza_clase2",
        "documentation": {}
    },
    {
        "label": "diferencia_dos",
        "kind": 5,
        "importPath": "adivinanza_clase2",
        "description": "adivinanza_clase2",
        "peekOfCode": "diferencia_dos = \"Estas muy hot 🌋\"\ndiferencia_tres = \"Esta tibio 😗\"\ndiferencia_cuatro = \"Estas re frio negro 🥶\"\nif not  varlor_seleccionado_usuario.isdigit() :\n    print(error_numero_uno_diez)\n    exit()\n#lo convierto a int\nvarlor_seleccionado_usuario = int(varlor_seleccionado_usuario)\n#valido que este dentro del rango de numeros\nif  varlor_seleccionado_usuario <1 or varlor_seleccionado_usuario >10:",
        "detail": "adivinanza_clase2",
        "documentation": {}
    },
    {
        "label": "diferencia_tres",
        "kind": 5,
        "importPath": "adivinanza_clase2",
        "description": "adivinanza_clase2",
        "peekOfCode": "diferencia_tres = \"Esta tibio 😗\"\ndiferencia_cuatro = \"Estas re frio negro 🥶\"\nif not  varlor_seleccionado_usuario.isdigit() :\n    print(error_numero_uno_diez)\n    exit()\n#lo convierto a int\nvarlor_seleccionado_usuario = int(varlor_seleccionado_usuario)\n#valido que este dentro del rango de numeros\nif  varlor_seleccionado_usuario <1 or varlor_seleccionado_usuario >10:\n    print(error_numero_uno_diez)",
        "detail": "adivinanza_clase2",
        "documentation": {}
    },
    {
        "label": "diferencia_cuatro",
        "kind": 5,
        "importPath": "adivinanza_clase2",
        "description": "adivinanza_clase2",
        "peekOfCode": "diferencia_cuatro = \"Estas re frio negro 🥶\"\nif not  varlor_seleccionado_usuario.isdigit() :\n    print(error_numero_uno_diez)\n    exit()\n#lo convierto a int\nvarlor_seleccionado_usuario = int(varlor_seleccionado_usuario)\n#valido que este dentro del rango de numeros\nif  varlor_seleccionado_usuario <1 or varlor_seleccionado_usuario >10:\n    print(error_numero_uno_diez)\n    exit()",
        "detail": "adivinanza_clase2",
        "documentation": {}
    },
    {
        "label": "varlor_seleccionado_usuario",
        "kind": 5,
        "importPath": "adivinanza_clase2",
        "description": "adivinanza_clase2",
        "peekOfCode": "varlor_seleccionado_usuario = int(varlor_seleccionado_usuario)\n#valido que este dentro del rango de numeros\nif  varlor_seleccionado_usuario <1 or varlor_seleccionado_usuario >10:\n    print(error_numero_uno_diez)\n    exit()\n#aca muestro el resultado si adivino o no\nif valor_seleccionado_por_la_maquina == varlor_seleccionado_usuario:\n    print(adivino_1)\n    exit()\nelse:",
        "detail": "adivinanza_clase2",
        "documentation": {}
    },
    {
        "label": "varlor_seleccionado_usuario",
        "kind": 5,
        "importPath": "adivinanza_clase2",
        "description": "adivinanza_clase2",
        "peekOfCode": "varlor_seleccionado_usuario = input(\"ingresa el numero que crees que seleccione por segunda vez 🧙‍♂️🪄 (el juego es del 1 al 10): \")\n#Valido que haya ingresado un numero y no una letra\nif not  varlor_seleccionado_usuario.isdigit() :\n    print(error_numero_uno_diez)\n    exit()\n#lo convierto a int\nvarlor_seleccionado_usuario = int(varlor_seleccionado_usuario)\n#valido que este dentro del rango de numeros\nif  varlor_seleccionado_usuario <1 or varlor_seleccionado_usuario >10:\n    print(error_numero_uno_diez)",
        "detail": "adivinanza_clase2",
        "documentation": {}
    },
    {
        "label": "varlor_seleccionado_usuario",
        "kind": 5,
        "importPath": "adivinanza_clase2",
        "description": "adivinanza_clase2",
        "peekOfCode": "varlor_seleccionado_usuario = int(varlor_seleccionado_usuario)\n#valido que este dentro del rango de numeros\nif  varlor_seleccionado_usuario <1 or varlor_seleccionado_usuario >10:\n    print(error_numero_uno_diez)\n    exit()\n#aca muestro el resultado si adivino o no\nif valor_seleccionado_por_la_maquina == varlor_seleccionado_usuario:\n    print(adivino_2)\n    exit()\nelse:",
        "detail": "adivinanza_clase2",
        "documentation": {}
    },
    {
        "label": "varlor_seleccionado_usuario",
        "kind": 5,
        "importPath": "adivinanza_clase2",
        "description": "adivinanza_clase2",
        "peekOfCode": "varlor_seleccionado_usuario = input(\"ingresa el numero que crees que seleccione por ultima vez 🧙‍♂️🪄 (el juego es del 1 al 10): \")\n#Valido que haya ingresado un numero y no una letra\nif not  varlor_seleccionado_usuario.isdigit() :\n    print(error_numero_uno_diez)\n    exit()\n#lo convierto a int\nvarlor_seleccionado_usuario = int(varlor_seleccionado_usuario)\n#valido que este dentro del rango de numeros\nif  varlor_seleccionado_usuario <1 or varlor_seleccionado_usuario >10:\n    print(error_numero_uno_diez)",
        "detail": "adivinanza_clase2",
        "documentation": {}
    },
    {
        "label": "varlor_seleccionado_usuario",
        "kind": 5,
        "importPath": "adivinanza_clase2",
        "description": "adivinanza_clase2",
        "peekOfCode": "varlor_seleccionado_usuario = int(varlor_seleccionado_usuario)\n#valido que este dentro del rango de numeros\nif  varlor_seleccionado_usuario <1 or varlor_seleccionado_usuario >10:\n    print(error_numero_uno_diez)\n    exit()\n#aca muestro el resultado si adivino o no\nif valor_seleccionado_por_la_maquina == varlor_seleccionado_usuario:\n    print(adivino_3)\n    exit()\nelse:",
        "detail": "adivinanza_clase2",
        "documentation": {}
    },
    {
        "label": "palabras",
        "kind": 5,
        "importPath": "ahorcado",
        "description": "ahorcado",
        "peekOfCode": "palabras = [\"manzana\", \"banana\", \"pera\", \"uva\", \"naranja\"]\npalabra_secreta = random.choice(palabras)\nletras_adivinadas = []\nintentos = 6\nprint(\"¡Bienvenido al juego del ahorcado!\")\nwhile intentos > 0:\n    palabra_actual = \"\"\n    for letra in palabra_secreta:\n        if letra in letras_adivinadas:\n            palabra_actual += letra",
        "detail": "ahorcado",
        "documentation": {}
    },
    {
        "label": "palabra_secreta",
        "kind": 5,
        "importPath": "ahorcado",
        "description": "ahorcado",
        "peekOfCode": "palabra_secreta = random.choice(palabras)\nletras_adivinadas = []\nintentos = 6\nprint(\"¡Bienvenido al juego del ahorcado!\")\nwhile intentos > 0:\n    palabra_actual = \"\"\n    for letra in palabra_secreta:\n        if letra in letras_adivinadas:\n            palabra_actual += letra\n        else:",
        "detail": "ahorcado",
        "documentation": {}
    },
    {
        "label": "letras_adivinadas",
        "kind": 5,
        "importPath": "ahorcado",
        "description": "ahorcado",
        "peekOfCode": "letras_adivinadas = []\nintentos = 6\nprint(\"¡Bienvenido al juego del ahorcado!\")\nwhile intentos > 0:\n    palabra_actual = \"\"\n    for letra in palabra_secreta:\n        if letra in letras_adivinadas:\n            palabra_actual += letra\n        else:\n            palabra_actual += \"_\"",
        "detail": "ahorcado",
        "documentation": {}
    },
    {
        "label": "intentos",
        "kind": 5,
        "importPath": "ahorcado",
        "description": "ahorcado",
        "peekOfCode": "intentos = 6\nprint(\"¡Bienvenido al juego del ahorcado!\")\nwhile intentos > 0:\n    palabra_actual = \"\"\n    for letra in palabra_secreta:\n        if letra in letras_adivinadas:\n            palabra_actual += letra\n        else:\n            palabra_actual += \"_\"\n    print(\"Palabra:\", palabra_actual)",
        "detail": "ahorcado",
        "documentation": {}
    },
    {
        "label": "elegir_palabra",
        "kind": 2,
        "importPath": "ahorcado_mio",
        "description": "ahorcado_mio",
        "peekOfCode": "def elegir_palabra():\n    palabras = ['python', 'ahorcado', 'programacion', 'desarrollador', 'inteligencia', 'artificial']\n    return random.choice(palabras)\ndef mostrar_estado(actual, intentos):\n    print(\"\\nPalabra:\", \" \".join(actual))\n    print(f\"Intentos restantes: {intentos}\")\ndef juego_ahorcado():\n    palabra_secreta = elegir_palabra()\n    letras_adivinadas = ['_'] * len(palabra_secreta)\n    intentos = 8",
        "detail": "ahorcado_mio",
        "documentation": {}
    },
    {
        "label": "mostrar_estado",
        "kind": 2,
        "importPath": "ahorcado_mio",
        "description": "ahorcado_mio",
        "peekOfCode": "def mostrar_estado(actual, intentos):\n    print(\"\\nPalabra:\", \" \".join(actual))\n    print(f\"Intentos restantes: {intentos}\")\ndef juego_ahorcado():\n    palabra_secreta = elegir_palabra()\n    letras_adivinadas = ['_'] * len(palabra_secreta)\n    intentos = 8\n    letras_usadas = set()\n    print(\"¡Bienvenido al juego del ahorcado!\")\n    while intentos > 0 and '_' in letras_adivinadas:",
        "detail": "ahorcado_mio",
        "documentation": {}
    },
    {
        "label": "juego_ahorcado",
        "kind": 2,
        "importPath": "ahorcado_mio",
        "description": "ahorcado_mio",
        "peekOfCode": "def juego_ahorcado():\n    palabra_secreta = elegir_palabra()\n    letras_adivinadas = ['_'] * len(palabra_secreta)\n    intentos = 8\n    letras_usadas = set()\n    print(\"¡Bienvenido al juego del ahorcado!\")\n    while intentos > 0 and '_' in letras_adivinadas:\n        mostrar_estado(letras_adivinadas, intentos)\n        letra = input(\"Adivina una letra: \").lower()\n        if letra in letras_usadas:",
        "detail": "ahorcado_mio",
        "documentation": {}
    },
    {
        "label": "area_cuadrado",
        "kind": 2,
        "importPath": "area_cuadrado",
        "description": "area_cuadrado",
        "peekOfCode": "def area_cuadrado(lado):\narea= lado * lado\n      return area\nprint(f\"el area del cuadraro es igual: {cuadrado}\")",
        "detail": "area_cuadrado",
        "documentation": {}
    },
    {
        "label": "numero_1",
        "kind": 5,
        "importPath": "calculadora",
        "description": "calculadora",
        "peekOfCode": "numero_1 = input(\"Ingrese el primer numero:\")\nnumero_2 = input(\"Ingrese el segundo numero:\")\noperacion = input(\"Ingrese la operacion a realizar (S/R/M/D):\")\nif numero_1.isdigit() and numero_2.isdigit():\n    numero_1 = int(numero_1)\n    numero_2 = int(numero_2)\nelse:\n    print(\"No ingresaste un numero\")\n    exit()\noperacion = operacion.upper()",
        "detail": "calculadora",
        "documentation": {}
    },
    {
        "label": "numero_2",
        "kind": 5,
        "importPath": "calculadora",
        "description": "calculadora",
        "peekOfCode": "numero_2 = input(\"Ingrese el segundo numero:\")\noperacion = input(\"Ingrese la operacion a realizar (S/R/M/D):\")\nif numero_1.isdigit() and numero_2.isdigit():\n    numero_1 = int(numero_1)\n    numero_2 = int(numero_2)\nelse:\n    print(\"No ingresaste un numero\")\n    exit()\noperacion = operacion.upper()\nif operacion == \"S\" or operacion == \"R\" or operacion == \"M\" or operacion == \"D\": #Valida que la operacion este bien!",
        "detail": "calculadora",
        "documentation": {}
    },
    {
        "label": "operacion",
        "kind": 5,
        "importPath": "calculadora",
        "description": "calculadora",
        "peekOfCode": "operacion = input(\"Ingrese la operacion a realizar (S/R/M/D):\")\nif numero_1.isdigit() and numero_2.isdigit():\n    numero_1 = int(numero_1)\n    numero_2 = int(numero_2)\nelse:\n    print(\"No ingresaste un numero\")\n    exit()\noperacion = operacion.upper()\nif operacion == \"S\" or operacion == \"R\" or operacion == \"M\" or operacion == \"D\": #Valida que la operacion este bien!\n    if operacion == \"S\":",
        "detail": "calculadora",
        "documentation": {}
    },
    {
        "label": "operacion",
        "kind": 5,
        "importPath": "calculadora",
        "description": "calculadora",
        "peekOfCode": "operacion = operacion.upper()\nif operacion == \"S\" or operacion == \"R\" or operacion == \"M\" or operacion == \"D\": #Valida que la operacion este bien!\n    if operacion == \"S\":\n        resultado = numero_1 + numero_2\n        print(f\"OPERACION REALIZADA CON EXITO, EL RESULTADO DE LA SUMA ES: {resultado}\")\n    elif operacion == \"R\":\n        resultado = numero_1 - numero_2\n        print(f\"OPERACION REALIZADA CON EXITO, EL RESULTADO DE LA RESTA ES: {resultado}\")\n    elif operacion == \"M\":\n        resultado = numero_1 * numero_2",
        "detail": "calculadora",
        "documentation": {}
    },
    {
        "label": "valor_1",
        "kind": 5,
        "importPath": "calculadora_2",
        "description": "calculadora_2",
        "peekOfCode": "valor_1 = input(\"ingrese el primer valor: \")\nvalor_2 = input(\"ingrese el segundo valor: \")\noperacion = input(\"ingrese la operacion a realizar (S/R/M/D): \")\nnombre_operacion = \"Pusiste mal el nombre de la operacion\"\nresultado = 0\nif valor_1.isdigit() and valor_2.isdigit():\n    valor_1 = int(valor_1)\n    valor_2 = int(valor_2)\nelse:\n    print(\"pusiste cualquier cosa\")",
        "detail": "calculadora_2",
        "documentation": {}
    },
    {
        "label": "valor_2",
        "kind": 5,
        "importPath": "calculadora_2",
        "description": "calculadora_2",
        "peekOfCode": "valor_2 = input(\"ingrese el segundo valor: \")\noperacion = input(\"ingrese la operacion a realizar (S/R/M/D): \")\nnombre_operacion = \"Pusiste mal el nombre de la operacion\"\nresultado = 0\nif valor_1.isdigit() and valor_2.isdigit():\n    valor_1 = int(valor_1)\n    valor_2 = int(valor_2)\nelse:\n    print(\"pusiste cualquier cosa\")\n    exit()",
        "detail": "calculadora_2",
        "documentation": {}
    },
    {
        "label": "operacion",
        "kind": 5,
        "importPath": "calculadora_2",
        "description": "calculadora_2",
        "peekOfCode": "operacion = input(\"ingrese la operacion a realizar (S/R/M/D): \")\nnombre_operacion = \"Pusiste mal el nombre de la operacion\"\nresultado = 0\nif valor_1.isdigit() and valor_2.isdigit():\n    valor_1 = int(valor_1)\n    valor_2 = int(valor_2)\nelse:\n    print(\"pusiste cualquier cosa\")\n    exit()\noperacion = operacion.upper()",
        "detail": "calculadora_2",
        "documentation": {}
    },
    {
        "label": "nombre_operacion",
        "kind": 5,
        "importPath": "calculadora_2",
        "description": "calculadora_2",
        "peekOfCode": "nombre_operacion = \"Pusiste mal el nombre de la operacion\"\nresultado = 0\nif valor_1.isdigit() and valor_2.isdigit():\n    valor_1 = int(valor_1)\n    valor_2 = int(valor_2)\nelse:\n    print(\"pusiste cualquier cosa\")\n    exit()\noperacion = operacion.upper()\nif operacion == \"S\":",
        "detail": "calculadora_2",
        "documentation": {}
    },
    {
        "label": "resultado",
        "kind": 5,
        "importPath": "calculadora_2",
        "description": "calculadora_2",
        "peekOfCode": "resultado = 0\nif valor_1.isdigit() and valor_2.isdigit():\n    valor_1 = int(valor_1)\n    valor_2 = int(valor_2)\nelse:\n    print(\"pusiste cualquier cosa\")\n    exit()\noperacion = operacion.upper()\nif operacion == \"S\":\n        resultado = valor_1 + valor_2",
        "detail": "calculadora_2",
        "documentation": {}
    },
    {
        "label": "operacion",
        "kind": 5,
        "importPath": "calculadora_2",
        "description": "calculadora_2",
        "peekOfCode": "operacion = operacion.upper()\nif operacion == \"S\":\n        resultado = valor_1 + valor_2\n        nombre_operacion = \"Suma\"\nelif operacion == \"R\":\n        resultado = valor_1 - valor_2\n        nombre_operacion = \"Resta\"\nelif operacion == \"M\":\n        resultado = valor_1 * valor_2\n        nombre_operacion = \"Multiplicacion\"",
        "detail": "calculadora_2",
        "documentation": {}
    },
    {
        "label": "lanzar_moneda",
        "kind": 2,
        "importPath": "cara o cruz6_7",
        "description": "cara o cruz6_7",
        "peekOfCode": "def lanzar_moneda():\n    return random.choice([\"Cara\", \"Cruz\"])\ndef jugar_contra_computadora():\n    eleccion_usuario = input(\"Elige 'Cara' o 'Cruz': \").capitalize()\n    resultado = lanzar_moneda()\n    print(f\"La moneda cayó en {resultado}.\")\n    if eleccion_usuario == resultado:\n        print(\"¡Felicidades, ganaste!\")\n    else:\n        print(\"Lo siento, perdiste.\")",
        "detail": "cara o cruz6_7",
        "documentation": {}
    },
    {
        "label": "jugar_contra_computadora",
        "kind": 2,
        "importPath": "cara o cruz6_7",
        "description": "cara o cruz6_7",
        "peekOfCode": "def jugar_contra_computadora():\n    eleccion_usuario = input(\"Elige 'Cara' o 'Cruz': \").capitalize()\n    resultado = lanzar_moneda()\n    print(f\"La moneda cayó en {resultado}.\")\n    if eleccion_usuario == resultado:\n        print(\"¡Felicidades, ganaste!\")\n    else:\n        print(\"Lo siento, perdiste.\")\ndef jugar_contra_amigo():\n    # Pide el nombre de los jugadores",
        "detail": "cara o cruz6_7",
        "documentation": {}
    },
    {
        "label": "jugar_contra_amigo",
        "kind": 2,
        "importPath": "cara o cruz6_7",
        "description": "cara o cruz6_7",
        "peekOfCode": "def jugar_contra_amigo():\n    # Pide el nombre de los jugadores\n    nombre_jugador1 = input(\"Introduce el nombre del primer jugador: \")\n    nombre_jugador2 = input(\"Introduce el nombre del segundo jugador: \")\n    eleccion_jugador1 = input(f\"{nombre_jugador1}, elige 'Cara' o 'Cruz': \").capitalize()\n    eleccion_jugador2 = \"Cruz\" if eleccion_jugador1 == \"Cara\" else \"Cara\"\n    print(f\"{nombre_jugador2}, te queda '{eleccion_jugador2}'.\")\n    resultado = lanzar_moneda()\n    print(f\"La moneda cayó en {resultado}.\")\n    if eleccion_jugador1 == resultado:",
        "detail": "cara o cruz6_7",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "cara o cruz6_7",
        "description": "cara o cruz6_7",
        "peekOfCode": "def main():\n    print(\"Bienvenido al juego de Cara o Cruz.\")\n    print(\"Elige una opción:\")\n    print(\"1. Jugar contra la computadora\")\n    print(\"2. Jugar contra un amigo\")\n    opcion = input(\"Introduce el número de tu elección: \")\n    if opcion == \"1\":\n        jugar_contra_computadora()\n    elif opcion == \"2\":\n        jugar_contra_amigo()",
        "detail": "cara o cruz6_7",
        "documentation": {}
    },
    {
        "label": "eleccion",
        "kind": 2,
        "importPath": "cara_cruz_mejora_CLASEA",
        "description": "cara_cruz_mejora_CLASEA",
        "peekOfCode": "def eleccion(eleccion_pc: bool |None = True)-> str:\n    \"\"\"\n    Esta funcion me va a permitir elegir entre cara o cruz\n    y la reutilizo tanto para la eleccion de la computadora\n    como la del usuario. Si no le paso ningun parametro, la variable se va a cargar con datos Random.\n    \"\"\"\n    if eleccion_pc:\n        numero_aleatorio = random.randint(1,3) #Generamos un numero random entre dos posibilidades ya que las monedas solo tienen dos formas de caer\n    else:\n        numero_aleatorio = int(input(\"Selecciona CARA(1) o CRUZ(2): \"))",
        "detail": "cara_cruz_mejora_CLASEA",
        "documentation": {}
    },
    {
        "label": "respuesta",
        "kind": 2,
        "importPath": "cara_cruz_mejora_CLASEA",
        "description": "cara_cruz_mejora_CLASEA",
        "peekOfCode": "def respuesta(eleccion_usuario :str|None = \"CARA\",eleccion_PC:str |None =\"CARA\" )-> str:\n    \"\"\" Esta función devolvera la respuesta de si el usuario gano o perdio\n    eleccion_usuario esta variable es la que eligio el usuario y esta variable es la que eligio la pc eleccion_PC\n    \"\"\"\n    res = \"Perdiste!!!! \"\n    if eleccion_usuario ==  eleccion_PC :\n        res = f\"Ganaste!!!! Elejiste {eleccion_usuario} y la PC {eleccion_PC}\"\n    return res\nwhile True:\n    eleccion_usuario = eleccion(False)",
        "detail": "cara_cruz_mejora_CLASEA",
        "documentation": {}
    },
    {
        "label": "nombre",
        "kind": 5,
        "importPath": "carga personas5_2",
        "description": "carga personas5_2",
        "peekOfCode": "nombre = input(\"ingrese el nombre de la persona: \")\nedad = input(\"ingrese la edad de la persona: \")\ndireccion = input(\"ingrese direccion de la persona: \")\npromedio = 0 #aca voy a calcular el promedio de las edades\nposicion_mayor = 0 #aca voy a guardar la posicion de la persona mayor\nedad_mayor =  0 #aca voy a guardar la edad mayor\nnombre_mayor = \"\" #aca voy a guardar el nombre de la persona mayor\ndireccion_mayor = \"\" #aca voy a guardar la direccion de la persona mayor\n#ahora voy a calcular el menor\nposicion_menor = 0 #aca voy a guardar la posicion de la persona menor",
        "detail": "carga personas5_2",
        "documentation": {}
    },
    {
        "label": "edad",
        "kind": 5,
        "importPath": "carga personas5_2",
        "description": "carga personas5_2",
        "peekOfCode": "edad = input(\"ingrese la edad de la persona: \")\ndireccion = input(\"ingrese direccion de la persona: \")\npromedio = 0 #aca voy a calcular el promedio de las edades\nposicion_mayor = 0 #aca voy a guardar la posicion de la persona mayor\nedad_mayor =  0 #aca voy a guardar la edad mayor\nnombre_mayor = \"\" #aca voy a guardar el nombre de la persona mayor\ndireccion_mayor = \"\" #aca voy a guardar la direccion de la persona mayor\n#ahora voy a calcular el menor\nposicion_menor = 0 #aca voy a guardar la posicion de la persona menor\nedad_menor =  0 #aca voy a guardar la edad menor",
        "detail": "carga personas5_2",
        "documentation": {}
    },
    {
        "label": "direccion",
        "kind": 5,
        "importPath": "carga personas5_2",
        "description": "carga personas5_2",
        "peekOfCode": "direccion = input(\"ingrese direccion de la persona: \")\npromedio = 0 #aca voy a calcular el promedio de las edades\nposicion_mayor = 0 #aca voy a guardar la posicion de la persona mayor\nedad_mayor =  0 #aca voy a guardar la edad mayor\nnombre_mayor = \"\" #aca voy a guardar el nombre de la persona mayor\ndireccion_mayor = \"\" #aca voy a guardar la direccion de la persona mayor\n#ahora voy a calcular el menor\nposicion_menor = 0 #aca voy a guardar la posicion de la persona menor\nedad_menor =  0 #aca voy a guardar la edad menor\nnombre_menor = \"\" #aca voy a guardar el nombre de la persona menor",
        "detail": "carga personas5_2",
        "documentation": {}
    },
    {
        "label": "promedio",
        "kind": 5,
        "importPath": "carga personas5_2",
        "description": "carga personas5_2",
        "peekOfCode": "promedio = 0 #aca voy a calcular el promedio de las edades\nposicion_mayor = 0 #aca voy a guardar la posicion de la persona mayor\nedad_mayor =  0 #aca voy a guardar la edad mayor\nnombre_mayor = \"\" #aca voy a guardar el nombre de la persona mayor\ndireccion_mayor = \"\" #aca voy a guardar la direccion de la persona mayor\n#ahora voy a calcular el menor\nposicion_menor = 0 #aca voy a guardar la posicion de la persona menor\nedad_menor =  0 #aca voy a guardar la edad menor\nnombre_menor = \"\" #aca voy a guardar el nombre de la persona menor\ndireccion_menor = \"\" #aca voy a guardar la direccion de la persona menor",
        "detail": "carga personas5_2",
        "documentation": {}
    },
    {
        "label": "posicion_mayor",
        "kind": 5,
        "importPath": "carga personas5_2",
        "description": "carga personas5_2",
        "peekOfCode": "posicion_mayor = 0 #aca voy a guardar la posicion de la persona mayor\nedad_mayor =  0 #aca voy a guardar la edad mayor\nnombre_mayor = \"\" #aca voy a guardar el nombre de la persona mayor\ndireccion_mayor = \"\" #aca voy a guardar la direccion de la persona mayor\n#ahora voy a calcular el menor\nposicion_menor = 0 #aca voy a guardar la posicion de la persona menor\nedad_menor =  0 #aca voy a guardar la edad menor\nnombre_menor = \"\" #aca voy a guardar el nombre de la persona menor\ndireccion_menor = \"\" #aca voy a guardar la direccion de la persona menor\nsuma_de_edades = 0 #aca voy a guardar la suma de las edades",
        "detail": "carga personas5_2",
        "documentation": {}
    },
    {
        "label": "edad_mayor",
        "kind": 5,
        "importPath": "carga personas5_2",
        "description": "carga personas5_2",
        "peekOfCode": "edad_mayor =  0 #aca voy a guardar la edad mayor\nnombre_mayor = \"\" #aca voy a guardar el nombre de la persona mayor\ndireccion_mayor = \"\" #aca voy a guardar la direccion de la persona mayor\n#ahora voy a calcular el menor\nposicion_menor = 0 #aca voy a guardar la posicion de la persona menor\nedad_menor =  0 #aca voy a guardar la edad menor\nnombre_menor = \"\" #aca voy a guardar el nombre de la persona menor\ndireccion_menor = \"\" #aca voy a guardar la direccion de la persona menor\nsuma_de_edades = 0 #aca voy a guardar la suma de las edades\n#promedio = edad1 + edad2 + edad3 + edad4 / 4",
        "detail": "carga personas5_2",
        "documentation": {}
    },
    {
        "label": "nombre_mayor",
        "kind": 5,
        "importPath": "carga personas5_2",
        "description": "carga personas5_2",
        "peekOfCode": "nombre_mayor = \"\" #aca voy a guardar el nombre de la persona mayor\ndireccion_mayor = \"\" #aca voy a guardar la direccion de la persona mayor\n#ahora voy a calcular el menor\nposicion_menor = 0 #aca voy a guardar la posicion de la persona menor\nedad_menor =  0 #aca voy a guardar la edad menor\nnombre_menor = \"\" #aca voy a guardar el nombre de la persona menor\ndireccion_menor = \"\" #aca voy a guardar la direccion de la persona menor\nsuma_de_edades = 0 #aca voy a guardar la suma de las edades\n#promedio = edad1 + edad2 + edad3 + edad4 / 4\n# if edad_1.isdigit(): #si esto es un numero entero lo cambia",
        "detail": "carga personas5_2",
        "documentation": {}
    },
    {
        "label": "direccion_mayor",
        "kind": 5,
        "importPath": "carga personas5_2",
        "description": "carga personas5_2",
        "peekOfCode": "direccion_mayor = \"\" #aca voy a guardar la direccion de la persona mayor\n#ahora voy a calcular el menor\nposicion_menor = 0 #aca voy a guardar la posicion de la persona menor\nedad_menor =  0 #aca voy a guardar la edad menor\nnombre_menor = \"\" #aca voy a guardar el nombre de la persona menor\ndireccion_menor = \"\" #aca voy a guardar la direccion de la persona menor\nsuma_de_edades = 0 #aca voy a guardar la suma de las edades\n#promedio = edad1 + edad2 + edad3 + edad4 / 4\n# if edad_1.isdigit(): #si esto es un numero entero lo cambia\n#     edad_1 = int(edad_1) # cambia el numero que estaba en string a integer (numero )",
        "detail": "carga personas5_2",
        "documentation": {}
    },
    {
        "label": "posicion_menor",
        "kind": 5,
        "importPath": "carga personas5_2",
        "description": "carga personas5_2",
        "peekOfCode": "posicion_menor = 0 #aca voy a guardar la posicion de la persona menor\nedad_menor =  0 #aca voy a guardar la edad menor\nnombre_menor = \"\" #aca voy a guardar el nombre de la persona menor\ndireccion_menor = \"\" #aca voy a guardar la direccion de la persona menor\nsuma_de_edades = 0 #aca voy a guardar la suma de las edades\n#promedio = edad1 + edad2 + edad3 + edad4 / 4\n# if edad_1.isdigit(): #si esto es un numero entero lo cambia\n#     edad_1 = int(edad_1) # cambia el numero que estaba en string a integer (numero )\n# else:\n#     print(\"pusiste cualquier cosa\")",
        "detail": "carga personas5_2",
        "documentation": {}
    },
    {
        "label": "edad_menor",
        "kind": 5,
        "importPath": "carga personas5_2",
        "description": "carga personas5_2",
        "peekOfCode": "edad_menor =  0 #aca voy a guardar la edad menor\nnombre_menor = \"\" #aca voy a guardar el nombre de la persona menor\ndireccion_menor = \"\" #aca voy a guardar la direccion de la persona menor\nsuma_de_edades = 0 #aca voy a guardar la suma de las edades\n#promedio = edad1 + edad2 + edad3 + edad4 / 4\n# if edad_1.isdigit(): #si esto es un numero entero lo cambia\n#     edad_1 = int(edad_1) # cambia el numero que estaba en string a integer (numero )\n# else:\n#     print(\"pusiste cualquier cosa\")\n#     exit()#temina el programa",
        "detail": "carga personas5_2",
        "documentation": {}
    },
    {
        "label": "nombre_menor",
        "kind": 5,
        "importPath": "carga personas5_2",
        "description": "carga personas5_2",
        "peekOfCode": "nombre_menor = \"\" #aca voy a guardar el nombre de la persona menor\ndireccion_menor = \"\" #aca voy a guardar la direccion de la persona menor\nsuma_de_edades = 0 #aca voy a guardar la suma de las edades\n#promedio = edad1 + edad2 + edad3 + edad4 / 4\n# if edad_1.isdigit(): #si esto es un numero entero lo cambia\n#     edad_1 = int(edad_1) # cambia el numero que estaba en string a integer (numero )\n# else:\n#     print(\"pusiste cualquier cosa\")\n#     exit()#temina el programa\nif not edad.isdigit(): #si esto es un numero entero lo cambia",
        "detail": "carga personas5_2",
        "documentation": {}
    },
    {
        "label": "direccion_menor",
        "kind": 5,
        "importPath": "carga personas5_2",
        "description": "carga personas5_2",
        "peekOfCode": "direccion_menor = \"\" #aca voy a guardar la direccion de la persona menor\nsuma_de_edades = 0 #aca voy a guardar la suma de las edades\n#promedio = edad1 + edad2 + edad3 + edad4 / 4\n# if edad_1.isdigit(): #si esto es un numero entero lo cambia\n#     edad_1 = int(edad_1) # cambia el numero que estaba en string a integer (numero )\n# else:\n#     print(\"pusiste cualquier cosa\")\n#     exit()#temina el programa\nif not edad.isdigit(): #si esto es un numero entero lo cambia\n    print(\"pusiste cualquier cosa ahora vas a tener que empezar de 0\")",
        "detail": "carga personas5_2",
        "documentation": {}
    },
    {
        "label": "suma_de_edades",
        "kind": 5,
        "importPath": "carga personas5_2",
        "description": "carga personas5_2",
        "peekOfCode": "suma_de_edades = 0 #aca voy a guardar la suma de las edades\n#promedio = edad1 + edad2 + edad3 + edad4 / 4\n# if edad_1.isdigit(): #si esto es un numero entero lo cambia\n#     edad_1 = int(edad_1) # cambia el numero que estaba en string a integer (numero )\n# else:\n#     print(\"pusiste cualquier cosa\")\n#     exit()#temina el programa\nif not edad.isdigit(): #si esto es un numero entero lo cambia\n    print(\"pusiste cualquier cosa ahora vas a tener que empezar de 0\")\n    exit()#temina el programa",
        "detail": "carga personas5_2",
        "documentation": {}
    },
    {
        "label": "#promedio",
        "kind": 5,
        "importPath": "carga personas5_2",
        "description": "carga personas5_2",
        "peekOfCode": "#promedio = edad1 + edad2 + edad3 + edad4 / 4\n# if edad_1.isdigit(): #si esto es un numero entero lo cambia\n#     edad_1 = int(edad_1) # cambia el numero que estaba en string a integer (numero )\n# else:\n#     print(\"pusiste cualquier cosa\")\n#     exit()#temina el programa\nif not edad.isdigit(): #si esto es un numero entero lo cambia\n    print(\"pusiste cualquier cosa ahora vas a tener que empezar de 0\")\n    exit()#temina el programa\nedad = int(edad) # cambia el numero que estaba en string a integer (numero )",
        "detail": "carga personas5_2",
        "documentation": {}
    },
    {
        "label": "edad",
        "kind": 5,
        "importPath": "carga personas5_2",
        "description": "carga personas5_2",
        "peekOfCode": "edad = int(edad) # cambia el numero que estaba en string a integer (numero )\nnombre_mayor  =  nombre #guardo variable nombre_mayor con el dato que tengo guardado en nombre\nnombre_menor = nombre # se guarda el valor pq puede llegar a ser el menor\ndireccion_mayor = direccion # lo mismo aca\ndireccion_menor = direccion # lo mismo aca\nedad_mayor = edad # aca guardo la edad\nedad_menor = edad # aca guardo la edad\nposicion_menor = 1\nposicion_mayor = 1\nsuma_de_edades +=  edad #aca guardo la suma de las edades",
        "detail": "carga personas5_2",
        "documentation": {}
    },
    {
        "label": "nombre_menor",
        "kind": 5,
        "importPath": "carga personas5_2",
        "description": "carga personas5_2",
        "peekOfCode": "nombre_menor = nombre # se guarda el valor pq puede llegar a ser el menor\ndireccion_mayor = direccion # lo mismo aca\ndireccion_menor = direccion # lo mismo aca\nedad_mayor = edad # aca guardo la edad\nedad_menor = edad # aca guardo la edad\nposicion_menor = 1\nposicion_mayor = 1\nsuma_de_edades +=  edad #aca guardo la suma de las edades\n#voy a ingresar los datos de la persona 2\nnombre = input(\"ingrese el nombre de la segunda persona: \")",
        "detail": "carga personas5_2",
        "documentation": {}
    },
    {
        "label": "direccion_mayor",
        "kind": 5,
        "importPath": "carga personas5_2",
        "description": "carga personas5_2",
        "peekOfCode": "direccion_mayor = direccion # lo mismo aca\ndireccion_menor = direccion # lo mismo aca\nedad_mayor = edad # aca guardo la edad\nedad_menor = edad # aca guardo la edad\nposicion_menor = 1\nposicion_mayor = 1\nsuma_de_edades +=  edad #aca guardo la suma de las edades\n#voy a ingresar los datos de la persona 2\nnombre = input(\"ingrese el nombre de la segunda persona: \")\nedad = input(\"ingrese la edad de la segunda persona: \")",
        "detail": "carga personas5_2",
        "documentation": {}
    },
    {
        "label": "direccion_menor",
        "kind": 5,
        "importPath": "carga personas5_2",
        "description": "carga personas5_2",
        "peekOfCode": "direccion_menor = direccion # lo mismo aca\nedad_mayor = edad # aca guardo la edad\nedad_menor = edad # aca guardo la edad\nposicion_menor = 1\nposicion_mayor = 1\nsuma_de_edades +=  edad #aca guardo la suma de las edades\n#voy a ingresar los datos de la persona 2\nnombre = input(\"ingrese el nombre de la segunda persona: \")\nedad = input(\"ingrese la edad de la segunda persona: \")\ndireccion = input(\"ingrese direccion de la segunda persona: \")",
        "detail": "carga personas5_2",
        "documentation": {}
    },
    {
        "label": "edad_mayor",
        "kind": 5,
        "importPath": "carga personas5_2",
        "description": "carga personas5_2",
        "peekOfCode": "edad_mayor = edad # aca guardo la edad\nedad_menor = edad # aca guardo la edad\nposicion_menor = 1\nposicion_mayor = 1\nsuma_de_edades +=  edad #aca guardo la suma de las edades\n#voy a ingresar los datos de la persona 2\nnombre = input(\"ingrese el nombre de la segunda persona: \")\nedad = input(\"ingrese la edad de la segunda persona: \")\ndireccion = input(\"ingrese direccion de la segunda persona: \")\nif not edad.isdigit(): #si esto es un numero entero lo cambia",
        "detail": "carga personas5_2",
        "documentation": {}
    },
    {
        "label": "edad_menor",
        "kind": 5,
        "importPath": "carga personas5_2",
        "description": "carga personas5_2",
        "peekOfCode": "edad_menor = edad # aca guardo la edad\nposicion_menor = 1\nposicion_mayor = 1\nsuma_de_edades +=  edad #aca guardo la suma de las edades\n#voy a ingresar los datos de la persona 2\nnombre = input(\"ingrese el nombre de la segunda persona: \")\nedad = input(\"ingrese la edad de la segunda persona: \")\ndireccion = input(\"ingrese direccion de la segunda persona: \")\nif not edad.isdigit(): #si esto es un numero entero lo cambia\n    print(\"pusiste cualquier cosa\")",
        "detail": "carga personas5_2",
        "documentation": {}
    },
    {
        "label": "posicion_menor",
        "kind": 5,
        "importPath": "carga personas5_2",
        "description": "carga personas5_2",
        "peekOfCode": "posicion_menor = 1\nposicion_mayor = 1\nsuma_de_edades +=  edad #aca guardo la suma de las edades\n#voy a ingresar los datos de la persona 2\nnombre = input(\"ingrese el nombre de la segunda persona: \")\nedad = input(\"ingrese la edad de la segunda persona: \")\ndireccion = input(\"ingrese direccion de la segunda persona: \")\nif not edad.isdigit(): #si esto es un numero entero lo cambia\n    print(\"pusiste cualquier cosa\")\n    exit()#temina el programa",
        "detail": "carga personas5_2",
        "documentation": {}
    },
    {
        "label": "posicion_mayor",
        "kind": 5,
        "importPath": "carga personas5_2",
        "description": "carga personas5_2",
        "peekOfCode": "posicion_mayor = 1\nsuma_de_edades +=  edad #aca guardo la suma de las edades\n#voy a ingresar los datos de la persona 2\nnombre = input(\"ingrese el nombre de la segunda persona: \")\nedad = input(\"ingrese la edad de la segunda persona: \")\ndireccion = input(\"ingrese direccion de la segunda persona: \")\nif not edad.isdigit(): #si esto es un numero entero lo cambia\n    print(\"pusiste cualquier cosa\")\n    exit()#temina el programa\nedad = int(edad) # cambia el numero que estaba en string a integer (numero )",
        "detail": "carga personas5_2",
        "documentation": {}
    },
    {
        "label": "nombre",
        "kind": 5,
        "importPath": "carga personas5_2",
        "description": "carga personas5_2",
        "peekOfCode": "nombre = input(\"ingrese el nombre de la segunda persona: \")\nedad = input(\"ingrese la edad de la segunda persona: \")\ndireccion = input(\"ingrese direccion de la segunda persona: \")\nif not edad.isdigit(): #si esto es un numero entero lo cambia\n    print(\"pusiste cualquier cosa\")\n    exit()#temina el programa\nedad = int(edad) # cambia el numero que estaba en string a integer (numero )\nif edad > edad_mayor:\n    edad_mayor = edad\n    nombre_mayor = nombre",
        "detail": "carga personas5_2",
        "documentation": {}
    },
    {
        "label": "edad",
        "kind": 5,
        "importPath": "carga personas5_2",
        "description": "carga personas5_2",
        "peekOfCode": "edad = input(\"ingrese la edad de la segunda persona: \")\ndireccion = input(\"ingrese direccion de la segunda persona: \")\nif not edad.isdigit(): #si esto es un numero entero lo cambia\n    print(\"pusiste cualquier cosa\")\n    exit()#temina el programa\nedad = int(edad) # cambia el numero que estaba en string a integer (numero )\nif edad > edad_mayor:\n    edad_mayor = edad\n    nombre_mayor = nombre\n    direccion_mayor = direccion",
        "detail": "carga personas5_2",
        "documentation": {}
    },
    {
        "label": "direccion",
        "kind": 5,
        "importPath": "carga personas5_2",
        "description": "carga personas5_2",
        "peekOfCode": "direccion = input(\"ingrese direccion de la segunda persona: \")\nif not edad.isdigit(): #si esto es un numero entero lo cambia\n    print(\"pusiste cualquier cosa\")\n    exit()#temina el programa\nedad = int(edad) # cambia el numero que estaba en string a integer (numero )\nif edad > edad_mayor:\n    edad_mayor = edad\n    nombre_mayor = nombre\n    direccion_mayor = direccion\n    posicion_mayor = 2",
        "detail": "carga personas5_2",
        "documentation": {}
    },
    {
        "label": "edad",
        "kind": 5,
        "importPath": "carga personas5_2",
        "description": "carga personas5_2",
        "peekOfCode": "edad = int(edad) # cambia el numero que estaba en string a integer (numero )\nif edad > edad_mayor:\n    edad_mayor = edad\n    nombre_mayor = nombre\n    direccion_mayor = direccion\n    posicion_mayor = 2\nif edad < edad_menor:\n    edad_menor = edad\n    nombre_menor = nombre\n    direccion_menor = direccion",
        "detail": "carga personas5_2",
        "documentation": {}
    },
    {
        "label": "nombre",
        "kind": 5,
        "importPath": "carga personas5_2",
        "description": "carga personas5_2",
        "peekOfCode": "nombre = input(\"ingrese el nombre de la tercera persona: \")\nedad = input(\"ingrese la edad de la tercera persona: \")\ndireccion = input(\"ingrese direccion de la tercera persona: \")\nif not edad.isdigit(): #si esto es un numero entero lo cambia\n    print(\"pusiste cualquier cosa\")\n    exit()#temina el programa\nedad = int(edad) # cambia el numero que estaba en string a integer (numero )\nif edad > edad_mayor:\n    edad_mayor = edad\n    nombre_mayor = nombre",
        "detail": "carga personas5_2",
        "documentation": {}
    },
    {
        "label": "edad",
        "kind": 5,
        "importPath": "carga personas5_2",
        "description": "carga personas5_2",
        "peekOfCode": "edad = input(\"ingrese la edad de la tercera persona: \")\ndireccion = input(\"ingrese direccion de la tercera persona: \")\nif not edad.isdigit(): #si esto es un numero entero lo cambia\n    print(\"pusiste cualquier cosa\")\n    exit()#temina el programa\nedad = int(edad) # cambia el numero que estaba en string a integer (numero )\nif edad > edad_mayor:\n    edad_mayor = edad\n    nombre_mayor = nombre\n    direccion_mayor = direccion",
        "detail": "carga personas5_2",
        "documentation": {}
    },
    {
        "label": "direccion",
        "kind": 5,
        "importPath": "carga personas5_2",
        "description": "carga personas5_2",
        "peekOfCode": "direccion = input(\"ingrese direccion de la tercera persona: \")\nif not edad.isdigit(): #si esto es un numero entero lo cambia\n    print(\"pusiste cualquier cosa\")\n    exit()#temina el programa\nedad = int(edad) # cambia el numero que estaba en string a integer (numero )\nif edad > edad_mayor:\n    edad_mayor = edad\n    nombre_mayor = nombre\n    direccion_mayor = direccion\n    posicion_mayor = 3",
        "detail": "carga personas5_2",
        "documentation": {}
    },
    {
        "label": "edad",
        "kind": 5,
        "importPath": "carga personas5_2",
        "description": "carga personas5_2",
        "peekOfCode": "edad = int(edad) # cambia el numero que estaba en string a integer (numero )\nif edad > edad_mayor:\n    edad_mayor = edad\n    nombre_mayor = nombre\n    direccion_mayor = direccion\n    posicion_mayor = 3\nif edad < edad_menor:\n    edad_menor = edad\n    nombre_menor = nombre\n    direccion_menor = direccion",
        "detail": "carga personas5_2",
        "documentation": {}
    },
    {
        "label": "nombre",
        "kind": 5,
        "importPath": "carga personas5_2",
        "description": "carga personas5_2",
        "peekOfCode": "nombre = input(\"ingrese el nombre de la cuarta persona: \")\nedad = input(\"ingrese la edad de la cuarta persona: \")\ndireccion = input(\"ingrese direccion de la cuarta persona: \")\nif not edad.isdigit(): #si esto es un numero entero lo cambia\n    print(\"pusiste cualquier cosa\")\n    exit()#temina el programa\nedad = int(edad) # cambia el numero que estaba en string a integer (numero )\nif edad > edad_mayor:\n    edad_mayor = edad\n    nombre_mayor = nombre",
        "detail": "carga personas5_2",
        "documentation": {}
    },
    {
        "label": "edad",
        "kind": 5,
        "importPath": "carga personas5_2",
        "description": "carga personas5_2",
        "peekOfCode": "edad = input(\"ingrese la edad de la cuarta persona: \")\ndireccion = input(\"ingrese direccion de la cuarta persona: \")\nif not edad.isdigit(): #si esto es un numero entero lo cambia\n    print(\"pusiste cualquier cosa\")\n    exit()#temina el programa\nedad = int(edad) # cambia el numero que estaba en string a integer (numero )\nif edad > edad_mayor:\n    edad_mayor = edad\n    nombre_mayor = nombre\n    direccion_mayor = direccion",
        "detail": "carga personas5_2",
        "documentation": {}
    },
    {
        "label": "direccion",
        "kind": 5,
        "importPath": "carga personas5_2",
        "description": "carga personas5_2",
        "peekOfCode": "direccion = input(\"ingrese direccion de la cuarta persona: \")\nif not edad.isdigit(): #si esto es un numero entero lo cambia\n    print(\"pusiste cualquier cosa\")\n    exit()#temina el programa\nedad = int(edad) # cambia el numero que estaba en string a integer (numero )\nif edad > edad_mayor:\n    edad_mayor = edad\n    nombre_mayor = nombre\n    direccion_mayor = direccion\n    posicion_mayor = 4",
        "detail": "carga personas5_2",
        "documentation": {}
    },
    {
        "label": "edad",
        "kind": 5,
        "importPath": "carga personas5_2",
        "description": "carga personas5_2",
        "peekOfCode": "edad = int(edad) # cambia el numero que estaba en string a integer (numero )\nif edad > edad_mayor:\n    edad_mayor = edad\n    nombre_mayor = nombre\n    direccion_mayor = direccion\n    posicion_mayor = 4\nif edad < edad_menor:\n    edad_menor = edad\n    nombre_menor = nombre\n    direccion_menor = direccion",
        "detail": "carga personas5_2",
        "documentation": {}
    },
    {
        "label": "promedio",
        "kind": 5,
        "importPath": "carga personas5_2",
        "description": "carga personas5_2",
        "peekOfCode": "promedio = suma_de_edades /4\nprint(f\"el promedio de las edad ingresas es: {promedio}\")\nprint(f\"la persona de mayor edad es:{nombre_mayor} y tiene {edad_mayor} años y vive en {direccion_mayor} y la posicion es {posicion_mayor}\")\nprint(f\"la persona de menor edad es:{nombre_menor} y tiene {edad_menor} años y vive en {direccion_menor} y la posicion es {posicion_menor}\")",
        "detail": "carga personas5_2",
        "documentation": {}
    },
    {
        "label": "lista_abecedario",
        "kind": 5,
        "importPath": "cifrado",
        "description": "cifrado",
        "peekOfCode": "lista_abecedario = [\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\",\"j\",\"k\",\"l\",\"m\",\"ñ\",\"o\",\"p\",\"q\",\"r\",\"s\",\"t\",\"u\",\"v\",\"w\",\"x\",\"y\"]\nlista_palabra = list(palabra_a_encriptar)\nlista_indice = []\nindice =0\npalabra_encriptada = []\nprint (lista_palabra)\nfor palabra in lista_palabra:\n     indice = lista_abecedario.index(palabra)\n     lista_indice.append(indice+desplazamiento)\n     for numero in lista_indice:",
        "detail": "cifrado",
        "documentation": {}
    },
    {
        "label": "lista_palabra",
        "kind": 5,
        "importPath": "cifrado",
        "description": "cifrado",
        "peekOfCode": "lista_palabra = list(palabra_a_encriptar)\nlista_indice = []\nindice =0\npalabra_encriptada = []\nprint (lista_palabra)\nfor palabra in lista_palabra:\n     indice = lista_abecedario.index(palabra)\n     lista_indice.append(indice+desplazamiento)\n     for numero in lista_indice:\n         palabra_encriptada.append(lista_abecedario[numero])",
        "detail": "cifrado",
        "documentation": {}
    },
    {
        "label": "lista_indice",
        "kind": 5,
        "importPath": "cifrado",
        "description": "cifrado",
        "peekOfCode": "lista_indice = []\nindice =0\npalabra_encriptada = []\nprint (lista_palabra)\nfor palabra in lista_palabra:\n     indice = lista_abecedario.index(palabra)\n     lista_indice.append(indice+desplazamiento)\n     for numero in lista_indice:\n         palabra_encriptada.append(lista_abecedario[numero])\nsalida = \",\".join(palabra_encriptada)",
        "detail": "cifrado",
        "documentation": {}
    },
    {
        "label": "palabra_encriptada",
        "kind": 5,
        "importPath": "cifrado",
        "description": "cifrado",
        "peekOfCode": "palabra_encriptada = []\nprint (lista_palabra)\nfor palabra in lista_palabra:\n     indice = lista_abecedario.index(palabra)\n     lista_indice.append(indice+desplazamiento)\n     for numero in lista_indice:\n         palabra_encriptada.append(lista_abecedario[numero])\nsalida = \",\".join(palabra_encriptada)\nprint(salida)",
        "detail": "cifrado",
        "documentation": {}
    },
    {
        "label": "salida",
        "kind": 5,
        "importPath": "cifrado",
        "description": "cifrado",
        "peekOfCode": "salida = \",\".join(palabra_encriptada)\nprint(salida)",
        "detail": "cifrado",
        "documentation": {}
    },
    {
        "label": "lista_abecedario",
        "kind": 5,
        "importPath": "cifrado44",
        "description": "cifrado44",
        "peekOfCode": "lista_abecedario = [\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\",\"j\",\"k\",\"l\",\"m\",\"ñ\",\"o\",\"p\",\"q\",\"r\",\"s\",\"t\",\"u\",\"v\",\"w\",\"x\",\"y\"]\nlista_palabra = list(palabra_a_encriptar)\nlista_indice = []\nindice =0\npalabra_encriptada = []\nprint (lista_palabra)\nfor palabra in lista_palabra:\n     indice = lista_abecedario.index(palabra)\n     lista_indice.append(indice + desplazamiento)\n     for numero in lista_indice:",
        "detail": "cifrado44",
        "documentation": {}
    },
    {
        "label": "lista_palabra",
        "kind": 5,
        "importPath": "cifrado44",
        "description": "cifrado44",
        "peekOfCode": "lista_palabra = list(palabra_a_encriptar)\nlista_indice = []\nindice =0\npalabra_encriptada = []\nprint (lista_palabra)\nfor palabra in lista_palabra:\n     indice = lista_abecedario.index(palabra)\n     lista_indice.append(indice + desplazamiento)\n     for numero in lista_indice:\n         palabra_encriptada.append(lista_abecedario[numero])",
        "detail": "cifrado44",
        "documentation": {}
    },
    {
        "label": "lista_indice",
        "kind": 5,
        "importPath": "cifrado44",
        "description": "cifrado44",
        "peekOfCode": "lista_indice = []\nindice =0\npalabra_encriptada = []\nprint (lista_palabra)\nfor palabra in lista_palabra:\n     indice = lista_abecedario.index(palabra)\n     lista_indice.append(indice + desplazamiento)\n     for numero in lista_indice:\n         palabra_encriptada.append(lista_abecedario[numero])\nsalida = \",\".join(palabra_encriptada)",
        "detail": "cifrado44",
        "documentation": {}
    },
    {
        "label": "palabra_encriptada",
        "kind": 5,
        "importPath": "cifrado44",
        "description": "cifrado44",
        "peekOfCode": "palabra_encriptada = []\nprint (lista_palabra)\nfor palabra in lista_palabra:\n     indice = lista_abecedario.index(palabra)\n     lista_indice.append(indice + desplazamiento)\n     for numero in lista_indice:\n         palabra_encriptada.append(lista_abecedario[numero])\nsalida = \",\".join(palabra_encriptada)\nprint(salida)",
        "detail": "cifrado44",
        "documentation": {}
    },
    {
        "label": "salida",
        "kind": 5,
        "importPath": "cifrado44",
        "description": "cifrado44",
        "peekOfCode": "salida = \",\".join(palabra_encriptada)\nprint(salida)",
        "detail": "cifrado44",
        "documentation": {}
    },
    {
        "label": "desplazamiento",
        "kind": 5,
        "importPath": "cifrado_cesar (1)",
        "description": "cifrado_cesar (1)",
        "peekOfCode": "desplazamiento = 1\ndecision_usuario = input(\"Que accion desea realizar? Desencriptar o Encriptar (D/E)\").upper()\nif decision_usuario == \"E\":\n    palabra_a_encriptar = input(\"Escriba para encriptar en formato cesar:\")\nelse:\n    palabra_a_encriptar = input(\"Escriba para desencriptar en formato cesar:\")\n# Le pedimos al usuario la palabra a encriptar\n#Declaramos listas utiles para nuestro programa\nlista_abecedario = [ \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\",\"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"] #Lista completa del abecedario\nlista_palabra = list(palabra_a_encriptar) #Convierte en lista la palabra a encriptar, separando en str cada letra.",
        "detail": "cifrado_cesar (1)",
        "documentation": {}
    },
    {
        "label": "decision_usuario",
        "kind": 5,
        "importPath": "cifrado_cesar (1)",
        "description": "cifrado_cesar (1)",
        "peekOfCode": "decision_usuario = input(\"Que accion desea realizar? Desencriptar o Encriptar (D/E)\").upper()\nif decision_usuario == \"E\":\n    palabra_a_encriptar = input(\"Escriba para encriptar en formato cesar:\")\nelse:\n    palabra_a_encriptar = input(\"Escriba para desencriptar en formato cesar:\")\n# Le pedimos al usuario la palabra a encriptar\n#Declaramos listas utiles para nuestro programa\nlista_abecedario = [ \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\",\"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"] #Lista completa del abecedario\nlista_palabra = list(palabra_a_encriptar) #Convierte en lista la palabra a encriptar, separando en str cada letra.\nprint(lista_palabra) #Imprime la palabra encriptada transformada en lista",
        "detail": "cifrado_cesar (1)",
        "documentation": {}
    },
    {
        "label": "lista_abecedario",
        "kind": 5,
        "importPath": "cifrado_cesar (1)",
        "description": "cifrado_cesar (1)",
        "peekOfCode": "lista_abecedario = [ \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\",\"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"] #Lista completa del abecedario\nlista_palabra = list(palabra_a_encriptar) #Convierte en lista la palabra a encriptar, separando en str cada letra.\nprint(lista_palabra) #Imprime la palabra encriptada transformada en lista\n#Variables auxiliares\nlista_indices = [] \nindice = 0\npalabra_encriptada = []\npalabra_desencriptada = []\n#Comienzan los ciclos FOR:\nfor palabra in lista_palabra:",
        "detail": "cifrado_cesar (1)",
        "documentation": {}
    },
    {
        "label": "lista_palabra",
        "kind": 5,
        "importPath": "cifrado_cesar (1)",
        "description": "cifrado_cesar (1)",
        "peekOfCode": "lista_palabra = list(palabra_a_encriptar) #Convierte en lista la palabra a encriptar, separando en str cada letra.\nprint(lista_palabra) #Imprime la palabra encriptada transformada en lista\n#Variables auxiliares\nlista_indices = [] \nindice = 0\npalabra_encriptada = []\npalabra_desencriptada = []\n#Comienzan los ciclos FOR:\nfor palabra in lista_palabra:\n    indice =lista_abecedario.index(palabra) #obtiene el indice de cada letra",
        "detail": "cifrado_cesar (1)",
        "documentation": {}
    },
    {
        "label": "lista_indices",
        "kind": 5,
        "importPath": "cifrado_cesar (1)",
        "description": "cifrado_cesar (1)",
        "peekOfCode": "lista_indices = [] \nindice = 0\npalabra_encriptada = []\npalabra_desencriptada = []\n#Comienzan los ciclos FOR:\nfor palabra in lista_palabra:\n    indice =lista_abecedario.index(palabra) #obtiene el indice de cada letra\n    if decision_usuario == \"E\":\n        lista_indices.append(indice+desplazamiento) #Agrega a la lista_indices los indices + el desplazamiento declarado al principio del programa.\n    else: ",
        "detail": "cifrado_cesar (1)",
        "documentation": {}
    },
    {
        "label": "indice",
        "kind": 5,
        "importPath": "cifrado_cesar (1)",
        "description": "cifrado_cesar (1)",
        "peekOfCode": "indice = 0\npalabra_encriptada = []\npalabra_desencriptada = []\n#Comienzan los ciclos FOR:\nfor palabra in lista_palabra:\n    indice =lista_abecedario.index(palabra) #obtiene el indice de cada letra\n    if decision_usuario == \"E\":\n        lista_indices.append(indice+desplazamiento) #Agrega a la lista_indices los indices + el desplazamiento declarado al principio del programa.\n    else: \n        lista_indices.append(indice-desplazamiento) #Agrega a la lista_indices los indices + el desplazamiento declarado al principio del programa.",
        "detail": "cifrado_cesar (1)",
        "documentation": {}
    },
    {
        "label": "palabra_encriptada",
        "kind": 5,
        "importPath": "cifrado_cesar (1)",
        "description": "cifrado_cesar (1)",
        "peekOfCode": "palabra_encriptada = []\npalabra_desencriptada = []\n#Comienzan los ciclos FOR:\nfor palabra in lista_palabra:\n    indice =lista_abecedario.index(palabra) #obtiene el indice de cada letra\n    if decision_usuario == \"E\":\n        lista_indices.append(indice+desplazamiento) #Agrega a la lista_indices los indices + el desplazamiento declarado al principio del programa.\n    else: \n        lista_indices.append(indice-desplazamiento) #Agrega a la lista_indices los indices + el desplazamiento declarado al principio del programa.\nfor numero in lista_indices:",
        "detail": "cifrado_cesar (1)",
        "documentation": {}
    },
    {
        "label": "palabra_desencriptada",
        "kind": 5,
        "importPath": "cifrado_cesar (1)",
        "description": "cifrado_cesar (1)",
        "peekOfCode": "palabra_desencriptada = []\n#Comienzan los ciclos FOR:\nfor palabra in lista_palabra:\n    indice =lista_abecedario.index(palabra) #obtiene el indice de cada letra\n    if decision_usuario == \"E\":\n        lista_indices.append(indice+desplazamiento) #Agrega a la lista_indices los indices + el desplazamiento declarado al principio del programa.\n    else: \n        lista_indices.append(indice-desplazamiento) #Agrega a la lista_indices los indices + el desplazamiento declarado al principio del programa.\nfor numero in lista_indices:\n    palabra_encriptada.append(lista_abecedario[numero]) #Agrega las letras modificadas a la lista de palabra_encriptada con el metodo append         ",
        "detail": "cifrado_cesar (1)",
        "documentation": {}
    },
    {
        "label": "Producto",
        "kind": 6,
        "importPath": "clas Produccto",
        "description": "clas Produccto",
        "peekOfCode": "class Producto:\n    def __init__(self, nombre, precio, cantidad):\n        self.nombre = nombre\n        self.precio = precio\n        self.cantidad = cantidad\n    def actualizar_precio(self, nuevo_precio):\n        self.precio = nuevo_precio\n    def actualizar_cantidad(self, nueva_cantidad):\n        self.cantidad = nueva_cantidad\n    def calcular_valor_total(self):",
        "detail": "clas Produccto",
        "documentation": {}
    },
    {
        "label": "producto",
        "kind": 5,
        "importPath": "clas Produccto",
        "description": "clas Produccto",
        "peekOfCode": "producto = Producto(\"Manzanas\", 0.5, 100)\nprint(f\"Valor total inicial: {producto.calcular_valor_total()}\")\nproducto.actualizar_precio(0.6)\nproducto.actualizar_cantidad(150)\nprint(f\"Valor total actualizado: {producto.calcular_valor_total()}\")",
        "detail": "clas Produccto",
        "documentation": {}
    },
    {
        "label": "NOMBRES",
        "kind": 5,
        "importPath": "clase12_test_grupo1",
        "description": "clase12_test_grupo1",
        "peekOfCode": "NOMBRES = 0\nEDADES = 1\nGENERO = 2\nCIUDAD = 3\nESTUDIO = 4\nnombres_edades = [[\"Gaspar\",23], [\"Diego\", 44], [\"Fermin\", 14, \"Hombre\", \"General Levalle\", \"Estudiante\"], [\"Carlos\", 48], [\"Paula\", 45], [\"Monica\",44]]\nprint(nombres_edades[3][EDADES])\nprint(nombres_edades[3][NOMBRES])\nedades = [23, 44, 14, 48, 10]\nsuma_edades = sum(edades)",
        "detail": "clase12_test_grupo1",
        "documentation": {}
    },
    {
        "label": "EDADES",
        "kind": 5,
        "importPath": "clase12_test_grupo1",
        "description": "clase12_test_grupo1",
        "peekOfCode": "EDADES = 1\nGENERO = 2\nCIUDAD = 3\nESTUDIO = 4\nnombres_edades = [[\"Gaspar\",23], [\"Diego\", 44], [\"Fermin\", 14, \"Hombre\", \"General Levalle\", \"Estudiante\"], [\"Carlos\", 48], [\"Paula\", 45], [\"Monica\",44]]\nprint(nombres_edades[3][EDADES])\nprint(nombres_edades[3][NOMBRES])\nedades = [23, 44, 14, 48, 10]\nsuma_edades = sum(edades)\nprint(suma_edades)",
        "detail": "clase12_test_grupo1",
        "documentation": {}
    },
    {
        "label": "GENERO",
        "kind": 5,
        "importPath": "clase12_test_grupo1",
        "description": "clase12_test_grupo1",
        "peekOfCode": "GENERO = 2\nCIUDAD = 3\nESTUDIO = 4\nnombres_edades = [[\"Gaspar\",23], [\"Diego\", 44], [\"Fermin\", 14, \"Hombre\", \"General Levalle\", \"Estudiante\"], [\"Carlos\", 48], [\"Paula\", 45], [\"Monica\",44]]\nprint(nombres_edades[3][EDADES])\nprint(nombres_edades[3][NOMBRES])\nedades = [23, 44, 14, 48, 10]\nsuma_edades = sum(edades)\nprint(suma_edades)\nmaxima_edad = max(edades)",
        "detail": "clase12_test_grupo1",
        "documentation": {}
    },
    {
        "label": "CIUDAD",
        "kind": 5,
        "importPath": "clase12_test_grupo1",
        "description": "clase12_test_grupo1",
        "peekOfCode": "CIUDAD = 3\nESTUDIO = 4\nnombres_edades = [[\"Gaspar\",23], [\"Diego\", 44], [\"Fermin\", 14, \"Hombre\", \"General Levalle\", \"Estudiante\"], [\"Carlos\", 48], [\"Paula\", 45], [\"Monica\",44]]\nprint(nombres_edades[3][EDADES])\nprint(nombres_edades[3][NOMBRES])\nedades = [23, 44, 14, 48, 10]\nsuma_edades = sum(edades)\nprint(suma_edades)\nmaxima_edad = max(edades)\nprint(maxima_edad)",
        "detail": "clase12_test_grupo1",
        "documentation": {}
    },
    {
        "label": "ESTUDIO",
        "kind": 5,
        "importPath": "clase12_test_grupo1",
        "description": "clase12_test_grupo1",
        "peekOfCode": "ESTUDIO = 4\nnombres_edades = [[\"Gaspar\",23], [\"Diego\", 44], [\"Fermin\", 14, \"Hombre\", \"General Levalle\", \"Estudiante\"], [\"Carlos\", 48], [\"Paula\", 45], [\"Monica\",44]]\nprint(nombres_edades[3][EDADES])\nprint(nombres_edades[3][NOMBRES])\nedades = [23, 44, 14, 48, 10]\nsuma_edades = sum(edades)\nprint(suma_edades)\nmaxima_edad = max(edades)\nprint(maxima_edad)\nminima_edad = min(edades)",
        "detail": "clase12_test_grupo1",
        "documentation": {}
    },
    {
        "label": "nombres_edades",
        "kind": 5,
        "importPath": "clase12_test_grupo1",
        "description": "clase12_test_grupo1",
        "peekOfCode": "nombres_edades = [[\"Gaspar\",23], [\"Diego\", 44], [\"Fermin\", 14, \"Hombre\", \"General Levalle\", \"Estudiante\"], [\"Carlos\", 48], [\"Paula\", 45], [\"Monica\",44]]\nprint(nombres_edades[3][EDADES])\nprint(nombres_edades[3][NOMBRES])\nedades = [23, 44, 14, 48, 10]\nsuma_edades = sum(edades)\nprint(suma_edades)\nmaxima_edad = max(edades)\nprint(maxima_edad)\nminima_edad = min(edades)\nprint(minima_edad)",
        "detail": "clase12_test_grupo1",
        "documentation": {}
    },
    {
        "label": "edades",
        "kind": 5,
        "importPath": "clase12_test_grupo1",
        "description": "clase12_test_grupo1",
        "peekOfCode": "edades = [23, 44, 14, 48, 10]\nsuma_edades = sum(edades)\nprint(suma_edades)\nmaxima_edad = max(edades)\nprint(maxima_edad)\nminima_edad = min(edades)\nprint(minima_edad)\n\"\"\"",
        "detail": "clase12_test_grupo1",
        "documentation": {}
    },
    {
        "label": "suma_edades",
        "kind": 5,
        "importPath": "clase12_test_grupo1",
        "description": "clase12_test_grupo1",
        "peekOfCode": "suma_edades = sum(edades)\nprint(suma_edades)\nmaxima_edad = max(edades)\nprint(maxima_edad)\nminima_edad = min(edades)\nprint(minima_edad)\n\"\"\"",
        "detail": "clase12_test_grupo1",
        "documentation": {}
    },
    {
        "label": "maxima_edad",
        "kind": 5,
        "importPath": "clase12_test_grupo1",
        "description": "clase12_test_grupo1",
        "peekOfCode": "maxima_edad = max(edades)\nprint(maxima_edad)\nminima_edad = min(edades)\nprint(minima_edad)\n\"\"\"",
        "detail": "clase12_test_grupo1",
        "documentation": {}
    },
    {
        "label": "minima_edad",
        "kind": 5,
        "importPath": "clase12_test_grupo1",
        "description": "clase12_test_grupo1",
        "peekOfCode": "minima_edad = min(edades)\nprint(minima_edad)\n\"\"\"",
        "detail": "clase12_test_grupo1",
        "documentation": {}
    },
    {
        "label": "lista_compras",
        "kind": 5,
        "importPath": "clase12_test_grupo2",
        "description": "clase12_test_grupo2",
        "peekOfCode": "lista_compras = [\"Manzanas\", \"Manzanas\", \"Manzanas\", \"Manzanas\", \"Manzanas\",\"Bananas\", \"Peras\", \"Pan\", \"Huevos\"]\nprint(lista_compras)\nwhile True:\n    alimento_ingresado = input(\"Ingresa un alimento, para guardarlo en la lista:\").capitalize()\n    if alimento_ingresado == \"Q\":\n        break\n    lista_compras.append(alimento_ingresado)\n    alimento_borrar = input(\"Ingrese un alimento para eliminar de la lista:\").capitalize()\n    if alimento_borrar in lista_compras:\n        lista_compras.remove(alimento_borrar)",
        "detail": "clase12_test_grupo2",
        "documentation": {}
    },
    {
        "label": "lista_numerica",
        "kind": 5,
        "importPath": "clase12_test_grupo2",
        "description": "clase12_test_grupo2",
        "peekOfCode": "lista_numerica = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30]\nprint(f\" Esta es la lista de numeros original {lista_numerica}\")\nnumero_menor = min(lista_numerica)\nprint(numero_menor)\nnumero_mayor = max(lista_numerica)\nprint(numero_mayor)\nsuma = sum(lista_numerica)\nprint(suma)\nnumero_promedio = suma/len(lista_numerica)\nprint(numero_promedio)",
        "detail": "clase12_test_grupo2",
        "documentation": {}
    },
    {
        "label": "numero_menor",
        "kind": 5,
        "importPath": "clase12_test_grupo2",
        "description": "clase12_test_grupo2",
        "peekOfCode": "numero_menor = min(lista_numerica)\nprint(numero_menor)\nnumero_mayor = max(lista_numerica)\nprint(numero_mayor)\nsuma = sum(lista_numerica)\nprint(suma)\nnumero_promedio = suma/len(lista_numerica)\nprint(numero_promedio)\n\"\"\"\nnombres_alumnos_eugenia = [\"Diego\", \"Gaspar\", \"Eugenia\"]",
        "detail": "clase12_test_grupo2",
        "documentation": {}
    },
    {
        "label": "numero_mayor",
        "kind": 5,
        "importPath": "clase12_test_grupo2",
        "description": "clase12_test_grupo2",
        "peekOfCode": "numero_mayor = max(lista_numerica)\nprint(numero_mayor)\nsuma = sum(lista_numerica)\nprint(suma)\nnumero_promedio = suma/len(lista_numerica)\nprint(numero_promedio)\n\"\"\"\nnombres_alumnos_eugenia = [\"Diego\", \"Gaspar\", \"Eugenia\"]\nnotas_alumnos_eugenia = [10, 9, 8]\nNOMBRE = 0",
        "detail": "clase12_test_grupo2",
        "documentation": {}
    },
    {
        "label": "suma",
        "kind": 5,
        "importPath": "clase12_test_grupo2",
        "description": "clase12_test_grupo2",
        "peekOfCode": "suma = sum(lista_numerica)\nprint(suma)\nnumero_promedio = suma/len(lista_numerica)\nprint(numero_promedio)\n\"\"\"\nnombres_alumnos_eugenia = [\"Diego\", \"Gaspar\", \"Eugenia\"]\nnotas_alumnos_eugenia = [10, 9, 8]\nNOMBRE = 0\nNOTA_1 = 1\nNOTA_2 = 2",
        "detail": "clase12_test_grupo2",
        "documentation": {}
    },
    {
        "label": "numero_promedio",
        "kind": 5,
        "importPath": "clase12_test_grupo2",
        "description": "clase12_test_grupo2",
        "peekOfCode": "numero_promedio = suma/len(lista_numerica)\nprint(numero_promedio)\n\"\"\"\nnombres_alumnos_eugenia = [\"Diego\", \"Gaspar\", \"Eugenia\"]\nnotas_alumnos_eugenia = [10, 9, 8]\nNOMBRE = 0\nNOTA_1 = 1\nNOTA_2 = 2\nNOTA_3 = 3\nalumnos_eugenia = [[\"Diego\", [10, 4, 6]], [\"Gaspar\", [9, 8, 7]], [\"Eugenia\", 8, 7, 9]]",
        "detail": "clase12_test_grupo2",
        "documentation": {}
    },
    {
        "label": "nombres_alumnos_eugenia",
        "kind": 5,
        "importPath": "clase12_test_grupo2",
        "description": "clase12_test_grupo2",
        "peekOfCode": "nombres_alumnos_eugenia = [\"Diego\", \"Gaspar\", \"Eugenia\"]\nnotas_alumnos_eugenia = [10, 9, 8]\nNOMBRE = 0\nNOTA_1 = 1\nNOTA_2 = 2\nNOTA_3 = 3\nalumnos_eugenia = [[\"Diego\", [10, 4, 6]], [\"Gaspar\", [9, 8, 7]], [\"Eugenia\", 8, 7, 9]]\nnotas_alumnos = alumnos_eugenia[1][1] \nprint(f\"El promedio de {alumnos_eugenia[1][0]} es {notas_alumnos} y su nota mas alta es {max(notas_alumnos)}\")",
        "detail": "clase12_test_grupo2",
        "documentation": {}
    },
    {
        "label": "notas_alumnos_eugenia",
        "kind": 5,
        "importPath": "clase12_test_grupo2",
        "description": "clase12_test_grupo2",
        "peekOfCode": "notas_alumnos_eugenia = [10, 9, 8]\nNOMBRE = 0\nNOTA_1 = 1\nNOTA_2 = 2\nNOTA_3 = 3\nalumnos_eugenia = [[\"Diego\", [10, 4, 6]], [\"Gaspar\", [9, 8, 7]], [\"Eugenia\", 8, 7, 9]]\nnotas_alumnos = alumnos_eugenia[1][1] \nprint(f\"El promedio de {alumnos_eugenia[1][0]} es {notas_alumnos} y su nota mas alta es {max(notas_alumnos)}\")",
        "detail": "clase12_test_grupo2",
        "documentation": {}
    },
    {
        "label": "NOMBRE",
        "kind": 5,
        "importPath": "clase12_test_grupo2",
        "description": "clase12_test_grupo2",
        "peekOfCode": "NOMBRE = 0\nNOTA_1 = 1\nNOTA_2 = 2\nNOTA_3 = 3\nalumnos_eugenia = [[\"Diego\", [10, 4, 6]], [\"Gaspar\", [9, 8, 7]], [\"Eugenia\", 8, 7, 9]]\nnotas_alumnos = alumnos_eugenia[1][1] \nprint(f\"El promedio de {alumnos_eugenia[1][0]} es {notas_alumnos} y su nota mas alta es {max(notas_alumnos)}\")",
        "detail": "clase12_test_grupo2",
        "documentation": {}
    },
    {
        "label": "NOTA_1",
        "kind": 5,
        "importPath": "clase12_test_grupo2",
        "description": "clase12_test_grupo2",
        "peekOfCode": "NOTA_1 = 1\nNOTA_2 = 2\nNOTA_3 = 3\nalumnos_eugenia = [[\"Diego\", [10, 4, 6]], [\"Gaspar\", [9, 8, 7]], [\"Eugenia\", 8, 7, 9]]\nnotas_alumnos = alumnos_eugenia[1][1] \nprint(f\"El promedio de {alumnos_eugenia[1][0]} es {notas_alumnos} y su nota mas alta es {max(notas_alumnos)}\")",
        "detail": "clase12_test_grupo2",
        "documentation": {}
    },
    {
        "label": "NOTA_2",
        "kind": 5,
        "importPath": "clase12_test_grupo2",
        "description": "clase12_test_grupo2",
        "peekOfCode": "NOTA_2 = 2\nNOTA_3 = 3\nalumnos_eugenia = [[\"Diego\", [10, 4, 6]], [\"Gaspar\", [9, 8, 7]], [\"Eugenia\", 8, 7, 9]]\nnotas_alumnos = alumnos_eugenia[1][1] \nprint(f\"El promedio de {alumnos_eugenia[1][0]} es {notas_alumnos} y su nota mas alta es {max(notas_alumnos)}\")",
        "detail": "clase12_test_grupo2",
        "documentation": {}
    },
    {
        "label": "NOTA_3",
        "kind": 5,
        "importPath": "clase12_test_grupo2",
        "description": "clase12_test_grupo2",
        "peekOfCode": "NOTA_3 = 3\nalumnos_eugenia = [[\"Diego\", [10, 4, 6]], [\"Gaspar\", [9, 8, 7]], [\"Eugenia\", 8, 7, 9]]\nnotas_alumnos = alumnos_eugenia[1][1] \nprint(f\"El promedio de {alumnos_eugenia[1][0]} es {notas_alumnos} y su nota mas alta es {max(notas_alumnos)}\")",
        "detail": "clase12_test_grupo2",
        "documentation": {}
    },
    {
        "label": "alumnos_eugenia",
        "kind": 5,
        "importPath": "clase12_test_grupo2",
        "description": "clase12_test_grupo2",
        "peekOfCode": "alumnos_eugenia = [[\"Diego\", [10, 4, 6]], [\"Gaspar\", [9, 8, 7]], [\"Eugenia\", 8, 7, 9]]\nnotas_alumnos = alumnos_eugenia[1][1] \nprint(f\"El promedio de {alumnos_eugenia[1][0]} es {notas_alumnos} y su nota mas alta es {max(notas_alumnos)}\")",
        "detail": "clase12_test_grupo2",
        "documentation": {}
    },
    {
        "label": "notas_alumnos",
        "kind": 5,
        "importPath": "clase12_test_grupo2",
        "description": "clase12_test_grupo2",
        "peekOfCode": "notas_alumnos = alumnos_eugenia[1][1] \nprint(f\"El promedio de {alumnos_eugenia[1][0]} es {notas_alumnos} y su nota mas alta es {max(notas_alumnos)}\")",
        "detail": "clase12_test_grupo2",
        "documentation": {}
    },
    {
        "label": "vehiculos",
        "kind": 6,
        "importPath": "clase29_poo",
        "description": "clase29_poo",
        "peekOfCode": "class vehiculos:\n    def __init__(self, color:str, puertas:int , modelo:str , marca:str) -> None :\n        self.color = color\n        self.puertas = puertas\n        self.modelo = modelo\n        self.marca = marca\n        self.encendido = False\n    def mostrar_caracteristicas(self):\n        esta_encendido = \"el auto 😊 esta encendido\"\n        if self.encendido == False :",
        "detail": "clase29_poo",
        "documentation": {}
    },
    {
        "label": "auto_diego",
        "kind": 5,
        "importPath": "clase29_poo",
        "description": "clase29_poo",
        "peekOfCode": "auto_diego = vehiculos(\"rojo\", 2, \"Fiesta\", \"Ford\")\nauto_diego.mostrar_caracteristicas()\nauto_diego.encender()\nauto_diego.mostrar_caracteristicas()\nauto_diego.apagar()\nauto_diego.mostrar_caracteristicas()\n# auto_gaspar = vehiculos(\"azul\", 4, \"Duster\", \"Renoult\")\n# auto_leti = vehiculos(\"Negro\", 5, \"208\", \"peugeot\")\n# auto_diego.mostrar_caracteristicas()\n# print (f\"El color es {auto_gaspar.color}\")",
        "detail": "clase29_poo",
        "documentation": {}
    },
    {
        "label": "Rectangulo",
        "kind": 6,
        "importPath": "clase30_g1 (1)",
        "description": "clase30_g1 (1)",
        "peekOfCode": "class Rectangulo:\n    \"\"\"\n    Clase que crea un objeto Rectangulo, con metodos para mostrar todas sus caracteristicas, area y perimetro.\n    \\n \n    En caso de que no se agreguen los argumentos al momento de declarar el objeto se tomaran los valores por defecto que es 0.\n    \"\"\"\n    def __init__(self)->None:\n        alto = fp.ingresar_numero(\"Ingrese el Alto:\")\n        ancho = fp.ingresar_numero(\"Ingrese el Ancho:\")\n        self.ancho = ancho",
        "detail": "clase30_g1 (1)",
        "documentation": {}
    },
    {
        "label": "rectangulo_1",
        "kind": 5,
        "importPath": "clase30_g1 (1)",
        "description": "clase30_g1 (1)",
        "peekOfCode": "rectangulo_1 = Rectangulo()\nrectangulo_1.mostrar_caracteristicas()\nrectangulo_1.area()\nrectangulo_1.perimetro()",
        "detail": "clase30_g1 (1)",
        "documentation": {}
    },
    {
        "label": "CuentaBancaria",
        "kind": 6,
        "importPath": "clase31_g1",
        "description": "clase31_g1",
        "peekOfCode": "class CuentaBancaria:\n    def __init__(self,saldo:int | None = 0 , titular:str | None = \"\") -> None:\n        self.saldo = saldo\n        self.titular = titular\n        pass\n    def mostrar_saldo(self):\n        print(\"\\n\"*2)\n        print(f\"{self.titular} su saldo actual es {self.saldo}\")\n        return\n    def depositar(self):",
        "detail": "clase31_g1",
        "documentation": {}
    },
    {
        "label": "titular",
        "kind": 5,
        "importPath": "clase31_g1",
        "description": "clase31_g1",
        "peekOfCode": "titular = input(\"Ingrese el nombre del titular:\")\ncuenta_bancaria = CuentaBancaria(0,titular)\nwhile True:\n    opcion = input(\"Elije la opcion que quieres realizar:\\n-Depositar (D) \\n-Retirar(R)\\n-Mostrar Saldo (S)\\n-Si quieres finalizar sesion (F) \\n-Opcion:\").upper()\n    if opcion == \"D\" or opcion == \"R\" or opcion == \"S\" or opcion == \"F\":\n        if opcion == \"D\":\n            cuenta_bancaria.depositar()\n        if opcion == \"R\":\n            cuenta_bancaria.retirar()\n        if opcion == \"S\":",
        "detail": "clase31_g1",
        "documentation": {}
    },
    {
        "label": "cuenta_bancaria",
        "kind": 5,
        "importPath": "clase31_g1",
        "description": "clase31_g1",
        "peekOfCode": "cuenta_bancaria = CuentaBancaria(0,titular)\nwhile True:\n    opcion = input(\"Elije la opcion que quieres realizar:\\n-Depositar (D) \\n-Retirar(R)\\n-Mostrar Saldo (S)\\n-Si quieres finalizar sesion (F) \\n-Opcion:\").upper()\n    if opcion == \"D\" or opcion == \"R\" or opcion == \"S\" or opcion == \"F\":\n        if opcion == \"D\":\n            cuenta_bancaria.depositar()\n        if opcion == \"R\":\n            cuenta_bancaria.retirar()\n        if opcion == \"S\":\n            cuenta_bancaria.mostrar_saldo()",
        "detail": "clase31_g1",
        "documentation": {}
    },
    {
        "label": "Contador",
        "kind": 6,
        "importPath": "clase32_g1",
        "description": "clase32_g1",
        "peekOfCode": "class Contador:\n    \"\"\"\n    Clase Contador:\n    Metodos:\n    \\n incrementa(): Al llamarlo suma uno a la variable interna cuenta.\n    \\n decrementar(): Al llamarlo resta uno a la variable interna cuenta.\n    \\n mostrar_contador(): Al llamarlo imprime por consola el valor actual del contador.\n    \\n reiniciar(): Al llamarlo vuelve el valor de la variable interna cuenta a 0.\n    \"\"\"\n    def __init__(self) -> None:",
        "detail": "clase32_g1",
        "documentation": {}
    },
    {
        "label": "Producto",
        "kind": 6,
        "importPath": "clase32_g1",
        "description": "clase32_g1",
        "peekOfCode": "class Producto:\n    def __init__(self, nombre, precio, cantidad) -> None:\n        self.nombre = nombre\n        self.precio = precio\n        self.cantidad = cantidad\n        pass\n    def actualizar_precio(self):\n        return\n    def actualizar_cantidad(self):\n        return",
        "detail": "clase32_g1",
        "documentation": {}
    },
    {
        "label": "CuentaBancaria",
        "kind": 6,
        "importPath": "clase_31_g1 (1)",
        "description": "clase_31_g1 (1)",
        "peekOfCode": "class CuentaBancaria:\n    def __init__(self, titular:str | None = \"\", saldo_inicial: float | None = 0):\n      self.titular = titular\n      self.saldo = saldo_inicial\n      pass\n    def consultar_saldo(self):\n        print(\"\\n\"*2)\n        print(f\"{self.titular} su saldo actual: {self.saldo} pesos\") \n        print(\"\\n\"*2)\n        return           ",
        "detail": "clase_31_g1 (1)",
        "documentation": {}
    },
    {
        "label": "titular",
        "kind": 5,
        "importPath": "clase_31_g1 (1)",
        "description": "clase_31_g1 (1)",
        "peekOfCode": "titular = input (\"Ingrese el nombre del titular: \")\nprint(\"\\n\"*2)\ncaja_ahorro= CuentaBancaria(titular , 0)\nwhile True:\n    opcion = input(\"Elije la opcion que quieres realizar:\\n-Depositar (D) \\n-Retirar(R)\\n-Mostrar Saldo (S)\\n-Si quieres finalizar sesion (F) \\n-Opcion:\").upper()\n    if opcion == \"D\" or opcion == \"R\" or opcion == \"S\" or opcion == \"F\":\n        if opcion == \"D\":\n            caja_ahorro.depositar()\n        if opcion == \"R\":\n            caja_ahorro.retirar()",
        "detail": "clase_31_g1 (1)",
        "documentation": {}
    },
    {
        "label": "CuentaBancaria",
        "kind": 6,
        "importPath": "clase_31_g1",
        "description": "clase_31_g1",
        "peekOfCode": "class CuentaBancaria:\n    def __init__(self, titular:str | None = \"\", saldo_inicial: float | None = 0):\n      self.titular = titular\n      self.saldo = saldo_inicial\n      pass\n    def consultar_saldo(self):\n        print(\"\\n\"*2)\n        print(f\"{self.titular} su saldo actual: {self.saldo} pesos\") \n        print(\"\\n\"*2)\n        return           ",
        "detail": "clase_31_g1",
        "documentation": {}
    },
    {
        "label": "titular",
        "kind": 5,
        "importPath": "clase_31_g1",
        "description": "clase_31_g1",
        "peekOfCode": "titular = input (\"Ingrese el nombre del titular: \")\nprint(\"\\n\"*2)\ncaja_ahorro= CuentaBancaria(titular , 0)\nwhile True:\n    opcion = input(\"Elije la opcion que quieres realizar:\\n-Depositar (D) \\n-Retirar(R)\\n-Mostrar Saldo (S)\\n-Si quieres finalizar sesion (F) \\n-Opcion:\").upper()\n    if opcion == \"D\" or opcion == \"R\" or opcion == \"S\" or opcion == \"F\":\n        if opcion == \"D\":\n            caja_ahorro.depositar()\n        if opcion == \"R\":\n            caja_ahorro.retirar()",
        "detail": "clase_31_g1",
        "documentation": {}
    },
    {
        "label": "Cuenta_bancaria",
        "kind": 6,
        "importPath": "class CuentaBancaria",
        "description": "class CuentaBancaria",
        "peekOfCode": "class Cuenta_bancaria:\n   def __init__(self, titular, saldo inicial = 0):\n      self.titular = titular\n      self.saldo = saldo_inicial pass\n   def deposito(self, monto):\n      if monto > 0:\n         self.saldo += monto\n      print(f\" Has depositado{monto} pesos. Saldo actual: {self.saldo} pesos\") \n   def retirar(self, monto):\n      if monto > 0:",
        "detail": "class CuentaBancaria",
        "documentation": {}
    },
    {
        "label": "titular",
        "kind": 5,
        "importPath": "class CuentaBancaria",
        "description": "class CuentaBancaria",
        "peekOfCode": "titular = input(\"Ingrese el nombre del titular:\")\ncuenta_Bancaria = CuentaBancaria(titular)\nwhile True:\n    opcion = input(\"Elije la opcion que quieres realizar:\\n-Depositar (D) \\n-Retirar(R)\\n-Mostrar Saldo (S)\\n-Si quieres finalizar sesion (F) \\n-Opcion:\").upper()\n    if opcion == \"D\" or opcion == \"R\" or opcion == \"S\" or opcion == \"F\":\n        if opcion == \"D\":\n            cuenta_bancaria.depositar()\n        if opcion == \"R\":\n            cuenta_bancaria.retirar()\n        if opcion == \"S\":",
        "detail": "class CuentaBancaria",
        "documentation": {}
    },
    {
        "label": "cuenta_Bancaria",
        "kind": 5,
        "importPath": "class CuentaBancaria",
        "description": "class CuentaBancaria",
        "peekOfCode": "cuenta_Bancaria = CuentaBancaria(titular)\nwhile True:\n    opcion = input(\"Elije la opcion que quieres realizar:\\n-Depositar (D) \\n-Retirar(R)\\n-Mostrar Saldo (S)\\n-Si quieres finalizar sesion (F) \\n-Opcion:\").upper()\n    if opcion == \"D\" or opcion == \"R\" or opcion == \"S\" or opcion == \"F\":\n        if opcion == \"D\":\n            cuenta_bancaria.depositar()\n        if opcion == \"R\":\n            cuenta_bancaria.retirar()\n        if opcion == \"S\":\n            cuenta_bancaria.mostrar_saldo()",
        "detail": "class CuentaBancaria",
        "documentation": {}
    },
    {
        "label": "Persona",
        "kind": 6,
        "importPath": "class Persona",
        "description": "class Persona",
        "peekOfCode": "class Persona:\n    def __init__(self, nombre, edad, profesion):\n        self.nombre = nombre\n        self.edad = edad\n        self.profesion = profesion\n    def imprimir(self):\n        print(f\"Nombre: {self.nombre}, Edad: {self.edad}, Profesión: {self.profesion}\")\n    def es_mayor_de_edad(self):\n        if self.edad >= 18:\n            return \"Es mayor de edad\"",
        "detail": "class Persona",
        "documentation": {}
    },
    {
        "label": "persona_1",
        "kind": 5,
        "importPath": "class Persona",
        "description": "class Persona",
        "peekOfCode": "persona_1 = Persona(\"Gaspar\", 23, \"Profesor\")\npersona_2 = Persona(\"Diego\", 45, \"Desarrollador de Software\")\npersona_3 = Persona(\"Mónica\", 44, \"Estudiante\")\npersona_1.imprimir()\npersona_2.imprimir()\npersona_3.imprimir()\nprint(persona_1.es_mayor_de_edad())\nprint(persona_2.es_mayor_de_edad())\nprint(persona_3.es_mayor_de_edad())",
        "detail": "class Persona",
        "documentation": {}
    },
    {
        "label": "persona_2",
        "kind": 5,
        "importPath": "class Persona",
        "description": "class Persona",
        "peekOfCode": "persona_2 = Persona(\"Diego\", 45, \"Desarrollador de Software\")\npersona_3 = Persona(\"Mónica\", 44, \"Estudiante\")\npersona_1.imprimir()\npersona_2.imprimir()\npersona_3.imprimir()\nprint(persona_1.es_mayor_de_edad())\nprint(persona_2.es_mayor_de_edad())\nprint(persona_3.es_mayor_de_edad())",
        "detail": "class Persona",
        "documentation": {}
    },
    {
        "label": "persona_3",
        "kind": 5,
        "importPath": "class Persona",
        "description": "class Persona",
        "peekOfCode": "persona_3 = Persona(\"Mónica\", 44, \"Estudiante\")\npersona_1.imprimir()\npersona_2.imprimir()\npersona_3.imprimir()\nprint(persona_1.es_mayor_de_edad())\nprint(persona_2.es_mayor_de_edad())\nprint(persona_3.es_mayor_de_edad())",
        "detail": "class Persona",
        "documentation": {}
    },
    {
        "label": "Contador",
        "kind": 6,
        "importPath": "class_contador.mio",
        "description": "class_contador.mio",
        "peekOfCode": "class Contador:\ndef__init__(self):\n   self.cuenta = 0    \ndef incrementar(self).\n   self.cuenta += 1       \ndef decrementar(self):\n    if self.cuenta > 0:\n    self.cuenta -= 1\nelse:\n        print(f\" El contador no puede dar negativo\")",
        "detail": "class_contador.mio",
        "documentation": {}
    },
    {
        "label": "incrementar",
        "kind": 2,
        "importPath": "class_contador.mio",
        "description": "class_contador.mio",
        "peekOfCode": "def incrementar(self).\n   self.cuenta += 1       \ndef decrementar(self):\n    if self.cuenta > 0:\n    self.cuenta -= 1\nelse:\n        print(f\" El contador no puede dar negativo\")\ndef mostrar_contador(self):\n    return self.cuenta \ndef reiniciar(self):",
        "detail": "class_contador.mio",
        "documentation": {}
    },
    {
        "label": "decrementar",
        "kind": 2,
        "importPath": "class_contador.mio",
        "description": "class_contador.mio",
        "peekOfCode": "def decrementar(self):\n    if self.cuenta > 0:\n    self.cuenta -= 1\nelse:\n        print(f\" El contador no puede dar negativo\")\ndef mostrar_contador(self):\n    return self.cuenta \ndef reiniciar(self):\n    self.cuenta = 0 \nmi_contador = Contador()",
        "detail": "class_contador.mio",
        "documentation": {}
    },
    {
        "label": "mostrar_contador",
        "kind": 2,
        "importPath": "class_contador.mio",
        "description": "class_contador.mio",
        "peekOfCode": "def mostrar_contador(self):\n    return self.cuenta \ndef reiniciar(self):\n    self.cuenta = 0 \nmi_contador = Contador()\nmi_contador.incrementar()\nprint(mi_contador.mostrar_contador())  # Salida: 1 \nmi_contador.decrementar()\nprint(mi_contador.mostrar_contador())  # Salida: 0 mi_contador.decrementar()  # El contador no puede ser negativo.\nmi_contador.reiniciar()",
        "detail": "class_contador.mio",
        "documentation": {}
    },
    {
        "label": "reiniciar",
        "kind": 2,
        "importPath": "class_contador.mio",
        "description": "class_contador.mio",
        "peekOfCode": "def reiniciar(self):\n    self.cuenta = 0 \nmi_contador = Contador()\nmi_contador.incrementar()\nprint(mi_contador.mostrar_contador())  # Salida: 1 \nmi_contador.decrementar()\nprint(mi_contador.mostrar_contador())  # Salida: 0 mi_contador.decrementar()  # El contador no puede ser negativo.\nmi_contador.reiniciar()\n        print(mi_contador.mostrar_contador())  # Salida: 0",
        "detail": "class_contador.mio",
        "documentation": {}
    },
    {
        "label": "mi_contador",
        "kind": 5,
        "importPath": "class_contador.mio",
        "description": "class_contador.mio",
        "peekOfCode": "mi_contador = Contador()\nmi_contador.incrementar()\nprint(mi_contador.mostrar_contador())  # Salida: 1 \nmi_contador.decrementar()\nprint(mi_contador.mostrar_contador())  # Salida: 0 mi_contador.decrementar()  # El contador no puede ser negativo.\nmi_contador.reiniciar()\n        print(mi_contador.mostrar_contador())  # Salida: 0",
        "detail": "class_contador.mio",
        "documentation": {}
    },
    {
        "label": "lista_compras",
        "kind": 5,
        "importPath": "compras",
        "description": "compras",
        "peekOfCode": "lista_compras = []\nwhile True:\n    item = input(\"Ingrese un artículo para agregar a la lista (o 'salir' para terminar): \")\n    if item == 'salir':\n        break\n    lista_compras.append(item)\nprint(\"Lista de compras:\")\nfor item in lista_compras:\n    print(\"- \" + lista_compras[i])",
        "detail": "compras",
        "documentation": {}
    },
    {
        "label": "Contador",
        "kind": 6,
        "importPath": "contador_poo",
        "description": "contador_poo",
        "peekOfCode": "class Contador:\n    def __init__(self) -> None:\n        self.cuenta = 0\n        return\n    def incrementar(self):\n        self.cuenta = self.cuenta +1\n        return\n    def decrementar(self):\n        if verificar < 0:\n            print( \"No se puede restar\")",
        "detail": "contador_poo",
        "documentation": {}
    },
    {
        "label": "mi_lista",
        "kind": 5,
        "importPath": "Crear una lista vacía",
        "description": "Crear una lista vacía",
        "peekOfCode": "mi_lista = []\n# Agregar 5 elementos usando append\nmi_lista.append(10)\nmi_lista.append(20)\nmi_lista.append(30)\nmi_lista.append(40)\nmi_lista.append(50)\n# Imprimir la longitud de la lista\nprint(\"Longitud de la lista:\", len(mi_lista))\n# Eliminar el último elemento usando pop",
        "detail": "Crear una lista vacía",
        "documentation": {}
    },
    {
        "label": "validar_cuit",
        "kind": 2,
        "importPath": "cuit",
        "description": "cuit",
        "peekOfCode": "def validar_cuit(cuit):\n    # validaciones minimas\n    if len(cuit) != 13 or cuit[2] != \"-\" or cuit[11] != \"-\":\n        return False\n    base = [5, 4, 3, 2, 7, 6, 5, 4, 3, 2]\n    cuit = cuit.replace(\"-\", \"\") # remuevo las barras\n    # calculo el digito verificador:\n    aux = 0\n    for i in xrange(10):\n        aux += int(cuit[i]) * base[i]",
        "detail": "cuit",
        "documentation": {}
    },
    {
        "label": "cuit",
        "kind": 5,
        "importPath": "cuit_mio",
        "description": "cuit_mio",
        "peekOfCode": "cuit = input(\"Ingrese su CUIT para saber si es valido:\")\n# Validaciones mínimas\nif len(cuit) != 13 or cuit[2] != \"-\" or cuit[11] != \"-\":\n    print(\"CUIT inválido\")\nelse:\n    base = [5, 4, 3, 2, 7, 6, 5, 4, 3, 2]\n    cuit_sin_guiones = cuit.replace(\"-\", \"\")  # Remuevo los guiones\n    # Calculo el dígito verificador\n    aux = 0\n    for i in range(10):",
        "detail": "cuit_mio",
        "documentation": {}
    },
    {
        "label": "Capitulo",
        "kind": 5,
        "importPath": "curso",
        "description": "curso",
        "peekOfCode": "Capitulo = 1\nwhile True:\n       print(f\"Estás en el capítulo {capitulo}\")\n       print(\"¿Qué deseas hacer?\")\n       print(\"1. Ir al siguiente capítulo\")\n       print(\"2. Abandonar el curso\")\n       opcion = input(\"Elige una opción (1 o 2): \")\n        if opcion == \"1\":\n      capitulo += 1\n            print(f\"Avanzando al capítulo {capitulo}...\\n\")",
        "detail": "curso",
        "documentation": {}
    },
    {
        "label": "capitulo",
        "kind": 5,
        "importPath": "curso2_15",
        "description": "curso2_15",
        "peekOfCode": "capitulo = 1\nwhile True:\n        print(f\"Estás en el capítulo {capitulo}\")\n        print(\"¿Qué deseas hacer?\")\n        print(\"1. Ir al siguiente capítulo\")\n        print(\"2. Abandonar el curso\")\n        opcion = input(\"Elige una opción (1 o 2): \")\n        if opcion == \"1\":\n            capitulo += 1\n            print(f\"Avanzando al capítulo {capitulo}...\\n\")",
        "detail": "curso2_15",
        "documentation": {}
    },
    {
        "label": "curso",
        "kind": 2,
        "importPath": "curso7_15",
        "description": "curso7_15",
        "peekOfCode": "def curso():\n    capitulo = 1\n    while True:\n        print(f\"Estás en el capítulo {capitulo}\")\n        print(\"¿Qué deseas hacer?\")\n        print(\"1. Ir al siguiente capítulo\")\n        print(\"2. Abandonar el curso\")\n        opcion = input(\"Elige una opción (1 o 2): \")\n        if opcion == \"1\":\n            capitulo += 1",
        "detail": "curso7_15",
        "documentation": {}
    },
    {
        "label": "cadena",
        "kind": 5,
        "importPath": "eamen7",
        "description": "eamen7",
        "peekOfCode": "cadena = \"Hola Mundo\"\nvocales = \"aeiou\"\ncontador = 0\nfor letra in cadena:  # Falta dos puntos al final de la línea\n    if letra.lower() in vocales:  # Se debe usar paréntesis para llamar a lower()\n        contador += 1  # Se debe usar += para incrementar el contador\nprint(\"Numero de vocales en la cadena:\", contador)",
        "detail": "eamen7",
        "documentation": {}
    },
    {
        "label": "vocales",
        "kind": 5,
        "importPath": "eamen7",
        "description": "eamen7",
        "peekOfCode": "vocales = \"aeiou\"\ncontador = 0\nfor letra in cadena:  # Falta dos puntos al final de la línea\n    if letra.lower() in vocales:  # Se debe usar paréntesis para llamar a lower()\n        contador += 1  # Se debe usar += para incrementar el contador\nprint(\"Numero de vocales en la cadena:\", contador)",
        "detail": "eamen7",
        "documentation": {}
    },
    {
        "label": "contador",
        "kind": 5,
        "importPath": "eamen7",
        "description": "eamen7",
        "peekOfCode": "contador = 0\nfor letra in cadena:  # Falta dos puntos al final de la línea\n    if letra.lower() in vocales:  # Se debe usar paréntesis para llamar a lower()\n        contador += 1  # Se debe usar += para incrementar el contador\nprint(\"Numero de vocales en la cadena:\", contador)",
        "detail": "eamen7",
        "documentation": {}
    },
    {
        "label": "repetir_cadena",
        "kind": 2,
        "importPath": "eamen8",
        "description": "eamen8",
        "peekOfCode": "def repetir_cadena(cadena, veces):\n    resultado = cadena * veces\n    return resultado  # Se debe retornar el resultado\ntexto = input(\"Ingrese un texto: \")\nrepeticiones = int(input(\"¿Cuántas veces desea repetir el texto? \"))  # Convertir a entero\nprint(f\"El texto repetido es: {repetir_cadena(texto, repeticiones)}\")  # Llamar a la función con argumentos",
        "detail": "eamen8",
        "documentation": {}
    },
    {
        "label": "texto",
        "kind": 5,
        "importPath": "eamen8",
        "description": "eamen8",
        "peekOfCode": "texto = input(\"Ingrese un texto: \")\nrepeticiones = int(input(\"¿Cuántas veces desea repetir el texto? \"))  # Convertir a entero\nprint(f\"El texto repetido es: {repetir_cadena(texto, repeticiones)}\")  # Llamar a la función con argumentos",
        "detail": "eamen8",
        "documentation": {}
    },
    {
        "label": "repeticiones",
        "kind": 5,
        "importPath": "eamen8",
        "description": "eamen8",
        "peekOfCode": "repeticiones = int(input(\"¿Cuántas veces desea repetir el texto? \"))  # Convertir a entero\nprint(f\"El texto repetido es: {repetir_cadena(texto, repeticiones)}\")  # Llamar a la función con argumentos",
        "detail": "eamen8",
        "documentation": {}
    },
    {
        "label": "sumar",
        "kind": 2,
        "importPath": "ejemplo_de_uso",
        "description": "ejemplo_de_uso",
        "peekOfCode": "def sumar(a, b):\n    return a + b\nresultado = sumar(5,3)\nprint(resultado)",
        "detail": "ejemplo_de_uso",
        "documentation": {}
    },
    {
        "label": "resultado",
        "kind": 5,
        "importPath": "ejemplo_de_uso",
        "description": "ejemplo_de_uso",
        "peekOfCode": "resultado = sumar(5,3)\nprint(resultado)",
        "detail": "ejemplo_de_uso",
        "documentation": {}
    },
    {
        "label": "num1",
        "kind": 5,
        "importPath": "ejercicio2",
        "description": "ejercicio2",
        "peekOfCode": "num1 = int(input(\"Ingrese el primer número: \"))\nnum2 = int(input(\"Ingrese el segundo número: \"))\nnum3 = int(input(\"Ingrese el tercer número: \"))\nnum4 = int(input(\"Ingrese el cuarto número: \"))\n# Calcular el promedio\npromedio = (num1 + num2 + num3 + num4) / 4\n# Imprimir el resultado\nprint(f\"El promedio es: {promedio}\")",
        "detail": "ejercicio2",
        "documentation": {}
    },
    {
        "label": "num2",
        "kind": 5,
        "importPath": "ejercicio2",
        "description": "ejercicio2",
        "peekOfCode": "num2 = int(input(\"Ingrese el segundo número: \"))\nnum3 = int(input(\"Ingrese el tercer número: \"))\nnum4 = int(input(\"Ingrese el cuarto número: \"))\n# Calcular el promedio\npromedio = (num1 + num2 + num3 + num4) / 4\n# Imprimir el resultado\nprint(f\"El promedio es: {promedio}\")",
        "detail": "ejercicio2",
        "documentation": {}
    },
    {
        "label": "num3",
        "kind": 5,
        "importPath": "ejercicio2",
        "description": "ejercicio2",
        "peekOfCode": "num3 = int(input(\"Ingrese el tercer número: \"))\nnum4 = int(input(\"Ingrese el cuarto número: \"))\n# Calcular el promedio\npromedio = (num1 + num2 + num3 + num4) / 4\n# Imprimir el resultado\nprint(f\"El promedio es: {promedio}\")",
        "detail": "ejercicio2",
        "documentation": {}
    },
    {
        "label": "num4",
        "kind": 5,
        "importPath": "ejercicio2",
        "description": "ejercicio2",
        "peekOfCode": "num4 = int(input(\"Ingrese el cuarto número: \"))\n# Calcular el promedio\npromedio = (num1 + num2 + num3 + num4) / 4\n# Imprimir el resultado\nprint(f\"El promedio es: {promedio}\")",
        "detail": "ejercicio2",
        "documentation": {}
    },
    {
        "label": "promedio",
        "kind": 5,
        "importPath": "ejercicio2",
        "description": "ejercicio2",
        "peekOfCode": "promedio = (num1 + num2 + num3 + num4) / 4\n# Imprimir el resultado\nprint(f\"El promedio es: {promedio}\")",
        "detail": "ejercicio2",
        "documentation": {}
    },
    {
        "label": "Circulo",
        "kind": 6,
        "importPath": "ejercicio5",
        "description": "ejercicio5",
        "peekOfCode": "class Circulo:\n    def __init__(self, radio):\n        self.radio = radio\n    def calcular_area(self):\n        return math.pi * self.radio ** 2  # Usamos math.pi para obtener el valor de Pi\n# Crear una instancia de la clase Círculo\nmi_circulo = Circulo(5)\n# Imprimir el área del círculo\nprint(\"El área del círculo es:\", mi_circulo.calcular_area())",
        "detail": "ejercicio5",
        "documentation": {}
    },
    {
        "label": "mi_circulo",
        "kind": 5,
        "importPath": "ejercicio5",
        "description": "ejercicio5",
        "peekOfCode": "mi_circulo = Circulo(5)\n# Imprimir el área del círculo\nprint(\"El área del círculo es:\", mi_circulo.calcular_area())",
        "detail": "ejercicio5",
        "documentation": {}
    },
    {
        "label": "di_hola",
        "kind": 2,
        "importPath": "ejercicios1_funciones",
        "description": "ejercicios1_funciones",
        "peekOfCode": "def di_hola(nombre):\n    print(\"Hola\", nombre)\ndi_hola(\"Monica\")\n# Hola Monica",
        "detail": "ejercicios1_funciones",
        "documentation": {}
    },
    {
        "label": "area_cuadrado",
        "kind": 2,
        "importPath": "ejercicios2_funciones",
        "description": "ejercicios2_funciones",
        "peekOfCode": "def area_cuadrado(lado):\n    return lado * 2\nprint(f\"área del cuadrado es {lado *2}.\")",
        "detail": "ejercicios2_funciones",
        "documentation": {}
    },
    {
        "label": "ordenar_palabras",
        "kind": 2,
        "importPath": "ejercicios3_funciones",
        "description": "ejercicios3_funciones",
        "peekOfCode": "def ordenar_palabras(lista_palabras):\n    return sorted(lista_palabras)\npalabras = [\"manzana\", \"naranja\", \"banana\", \"kiwi\", \"fresa\"]\npalabras_ordenadas = ordenar_palabras(palabras)\nprint(\"Palabras ordenadas:\", palabras_ordenadas)",
        "detail": "ejercicios3_funciones",
        "documentation": {}
    },
    {
        "label": "palabras",
        "kind": 5,
        "importPath": "ejercicios3_funciones",
        "description": "ejercicios3_funciones",
        "peekOfCode": "palabras = [\"manzana\", \"naranja\", \"banana\", \"kiwi\", \"fresa\"]\npalabras_ordenadas = ordenar_palabras(palabras)\nprint(\"Palabras ordenadas:\", palabras_ordenadas)",
        "detail": "ejercicios3_funciones",
        "documentation": {}
    },
    {
        "label": "palabras_ordenadas",
        "kind": 5,
        "importPath": "ejercicios3_funciones",
        "description": "ejercicios3_funciones",
        "peekOfCode": "palabras_ordenadas = ordenar_palabras(palabras)\nprint(\"Palabras ordenadas:\", palabras_ordenadas)",
        "detail": "ejercicios3_funciones",
        "documentation": {}
    },
    {
        "label": "es_par_o_impar",
        "kind": 2,
        "importPath": "ejercicios4_funciones",
        "description": "ejercicios4_funciones",
        "peekOfCode": "def es_par_o_impar(numero):\n    if numero % 2 == 0:\n        return \"par\"\n    else:\n        return \"impar\"\nnumero = 7\nresultado = es_par_o_impar(numero)\nprint(f\"El número {numero} es {resultado}.\")",
        "detail": "ejercicios4_funciones",
        "documentation": {}
    },
    {
        "label": "numero",
        "kind": 5,
        "importPath": "ejercicios4_funciones",
        "description": "ejercicios4_funciones",
        "peekOfCode": "numero = 7\nresultado = es_par_o_impar(numero)\nprint(f\"El número {numero} es {resultado}.\")",
        "detail": "ejercicios4_funciones",
        "documentation": {}
    },
    {
        "label": "resultado",
        "kind": 5,
        "importPath": "ejercicios4_funciones",
        "description": "ejercicios4_funciones",
        "peekOfCode": "resultado = es_par_o_impar(numero)\nprint(f\"El número {numero} es {resultado}.\")",
        "detail": "ejercicios4_funciones",
        "documentation": {}
    },
    {
        "label": "convertir_temperatura",
        "kind": 2,
        "importPath": "ejercicios5_funciones",
        "description": "ejercicios5_funciones",
        "peekOfCode": "def convertir_temperatura(valor, de_unidad, a_unidad):\n    # Convertir todas las unidades a minúsculas para facilitar la comparación\n    de_unidad = de_unidad.lower()\n    a_unidad = a_unidad.lower()\n    if de_unidad == \"celsius\":\n        if a_unidad == \"fahrenheit\":\n            return (valor * 9/5) + 32\n        elif a_unidad == \"kelvin\":\n            return valor + 273.15\n        elif a_unidad == \"celsius\":",
        "detail": "ejercicios5_funciones",
        "documentation": {}
    },
    {
        "label": "valor",
        "kind": 5,
        "importPath": "ejercicios5_funciones",
        "description": "ejercicios5_funciones",
        "peekOfCode": "valor = 100\nprint(f\"{valor}°C a Fahrenheit: {convertir_temperatura(valor, 'Celsius', 'Fahrenheit')}°F\")\nprint(f\"{valor}°F a Celsius: {convertir_temperatura(valor, 'Fahrenheit', 'Celsius')}°C\")\nprint(f\"{valor}°C a Kelvin: {convertir_temperatura(valor, 'Celsius', 'Kelvin')}K\")\nprint(f\"{valor}K a Celsius: {convertir_temperatura(valor, 'Kelvin', 'Celsius')}°C\")",
        "detail": "ejercicios5_funciones",
        "documentation": {}
    },
    {
        "label": "calcular_factorial",
        "kind": 2,
        "importPath": "ejercicios6_funciones",
        "description": "ejercicios6_funciones",
        "peekOfCode": "def calcular_factorial(n):\n    \"\"\"Calcula el factorial de un número entero no negativo.\"\"\"\n    if n < 0:\n        raise ValueError(\"El factorial no está definido para números negativos.\")\n    elif n == 0 or n == 1:\n        return 1\n    else:\n        factorial = 1\n        for i in range(2, n + 1):\n            factorial *= i",
        "detail": "ejercicios6_funciones",
        "documentation": {}
    },
    {
        "label": "numero",
        "kind": 5,
        "importPath": "ejercicios6_funciones",
        "description": "ejercicios6_funciones",
        "peekOfCode": "numero = 4\nresultado = calcular_factorial(numero)\nprint(f\"El factorial de {numero} es {resultado}.\")",
        "detail": "ejercicios6_funciones",
        "documentation": {}
    },
    {
        "label": "resultado",
        "kind": 5,
        "importPath": "ejercicios6_funciones",
        "description": "ejercicios6_funciones",
        "peekOfCode": "resultado = calcular_factorial(numero)\nprint(f\"El factorial de {numero} es {resultado}.\")",
        "detail": "ejercicios6_funciones",
        "documentation": {}
    },
    {
        "label": "fibonacci_iterativo",
        "kind": 2,
        "importPath": "ejercicios7_funciones",
        "description": "ejercicios7_funciones",
        "peekOfCode": "def fibonacci_iterativo(n):\n#Devuelve la secuencia de Fibonacci hasta el enésimo término.\n    if n < 0:\n        raise ValueError(\"El número debe ser no negativo.\")\n    secuencia = []\n    a, b = 0, 1\n    for _ in range(n):\n        secuencia.append(a)\n        a, b = b, a + b\n    return secuencia",
        "detail": "ejercicios7_funciones",
        "documentation": {}
    },
    {
        "label": "n",
        "kind": 5,
        "importPath": "ejercicios7_funciones",
        "description": "ejercicios7_funciones",
        "peekOfCode": "n = 10\nresultado = fibonacci_iterativo(n)\nprint(f\"Los primeros {n} términos de la secuencia de Fibonacci son: {resultado}.\")",
        "detail": "ejercicios7_funciones",
        "documentation": {}
    },
    {
        "label": "resultado",
        "kind": 5,
        "importPath": "ejercicios7_funciones",
        "description": "ejercicios7_funciones",
        "peekOfCode": "resultado = fibonacci_iterativo(n)\nprint(f\"Los primeros {n} términos de la secuencia de Fibonacci son: {resultado}.\")",
        "detail": "ejercicios7_funciones",
        "documentation": {}
    },
    {
        "label": "generar_numeros_aleatorios",
        "kind": 2,
        "importPath": "ejercicios9_funciones",
        "description": "ejercicios9_funciones",
        "peekOfCode": "def generar_numeros_aleatorios(cantidad):\n    numeros_aleatorios = [random.randint(0, 100) for _ in range(cantidad)]\n    print(f\"Se han generado {cantidad} números aleatorios:\")\n    for numero in numeros_aleatorios:\n        print(numero)\n# Ejemplo de uso\ncantidad = int(input(\"Ingrese la cantidad de números aleatorios a generar: \"))\ngenerar_numeros_aleatorios(cantidad)",
        "detail": "ejercicios9_funciones",
        "documentation": {}
    },
    {
        "label": "cantidad",
        "kind": 5,
        "importPath": "ejercicios9_funciones",
        "description": "ejercicios9_funciones",
        "peekOfCode": "cantidad = int(input(\"Ingrese la cantidad de números aleatorios a generar: \"))\ngenerar_numeros_aleatorios(cantidad)",
        "detail": "ejercicios9_funciones",
        "documentation": {}
    },
    {
        "label": "nombre",
        "kind": 5,
        "importPath": "ejercicios_practica",
        "description": "ejercicios_practica",
        "peekOfCode": "nombre = \"monica\"\nedad = 44\nciudad = \"General Levalle\"\nprint (f\" mi nombre {nombre}, mi edad {edad}, mi ciudad {ciudad}\")",
        "detail": "ejercicios_practica",
        "documentation": {}
    },
    {
        "label": "edad",
        "kind": 5,
        "importPath": "ejercicios_practica",
        "description": "ejercicios_practica",
        "peekOfCode": "edad = 44\nciudad = \"General Levalle\"\nprint (f\" mi nombre {nombre}, mi edad {edad}, mi ciudad {ciudad}\")",
        "detail": "ejercicios_practica",
        "documentation": {}
    },
    {
        "label": "ciudad",
        "kind": 5,
        "importPath": "ejercicios_practica",
        "description": "ejercicios_practica",
        "peekOfCode": "ciudad = \"General Levalle\"\nprint (f\" mi nombre {nombre}, mi edad {edad}, mi ciudad {ciudad}\")",
        "detail": "ejercicios_practica",
        "documentation": {}
    },
    {
        "label": "edad",
        "kind": 5,
        "importPath": "ejercicio_carga_persona",
        "description": "ejercicio_carga_persona",
        "peekOfCode": "edad = input(\"Ingrese una edad:\")\nedad_mayor = 0\nedad_menor = 0\nnombre =  input(\"Ingrese el nombre completo:\")\ndireccion = input(\"Ingrese la dirección:\")\nposicion = 1\nnombre_mayor = nombre #aca me guardo el nombre de la persona de mayor edad\ndireccion_mayor = direccion #aca me guardo la direccion de la persona de mayor edad\nnombre_menor = nombre\ndireccion_menor = direccion",
        "detail": "ejercicio_carga_persona",
        "documentation": {}
    },
    {
        "label": "edad_mayor",
        "kind": 5,
        "importPath": "ejercicio_carga_persona",
        "description": "ejercicio_carga_persona",
        "peekOfCode": "edad_mayor = 0\nedad_menor = 0\nnombre =  input(\"Ingrese el nombre completo:\")\ndireccion = input(\"Ingrese la dirección:\")\nposicion = 1\nnombre_mayor = nombre #aca me guardo el nombre de la persona de mayor edad\ndireccion_mayor = direccion #aca me guardo la direccion de la persona de mayor edad\nnombre_menor = nombre\ndireccion_menor = direccion\nposcion_menor = 1",
        "detail": "ejercicio_carga_persona",
        "documentation": {}
    },
    {
        "label": "edad_menor",
        "kind": 5,
        "importPath": "ejercicio_carga_persona",
        "description": "ejercicio_carga_persona",
        "peekOfCode": "edad_menor = 0\nnombre =  input(\"Ingrese el nombre completo:\")\ndireccion = input(\"Ingrese la dirección:\")\nposicion = 1\nnombre_mayor = nombre #aca me guardo el nombre de la persona de mayor edad\ndireccion_mayor = direccion #aca me guardo la direccion de la persona de mayor edad\nnombre_menor = nombre\ndireccion_menor = direccion\nposcion_menor = 1\nif edad.isdigit(): #verifico que sea un numero",
        "detail": "ejercicio_carga_persona",
        "documentation": {}
    },
    {
        "label": "nombre",
        "kind": 5,
        "importPath": "ejercicio_carga_persona",
        "description": "ejercicio_carga_persona",
        "peekOfCode": "nombre =  input(\"Ingrese el nombre completo:\")\ndireccion = input(\"Ingrese la dirección:\")\nposicion = 1\nnombre_mayor = nombre #aca me guardo el nombre de la persona de mayor edad\ndireccion_mayor = direccion #aca me guardo la direccion de la persona de mayor edad\nnombre_menor = nombre\ndireccion_menor = direccion\nposcion_menor = 1\nif edad.isdigit(): #verifico que sea un numero\n    edad = int(edad)",
        "detail": "ejercicio_carga_persona",
        "documentation": {}
    },
    {
        "label": "direccion",
        "kind": 5,
        "importPath": "ejercicio_carga_persona",
        "description": "ejercicio_carga_persona",
        "peekOfCode": "direccion = input(\"Ingrese la dirección:\")\nposicion = 1\nnombre_mayor = nombre #aca me guardo el nombre de la persona de mayor edad\ndireccion_mayor = direccion #aca me guardo la direccion de la persona de mayor edad\nnombre_menor = nombre\ndireccion_menor = direccion\nposcion_menor = 1\nif edad.isdigit(): #verifico que sea un numero\n    edad = int(edad)\n    edad_mayor = edad",
        "detail": "ejercicio_carga_persona",
        "documentation": {}
    },
    {
        "label": "posicion",
        "kind": 5,
        "importPath": "ejercicio_carga_persona",
        "description": "ejercicio_carga_persona",
        "peekOfCode": "posicion = 1\nnombre_mayor = nombre #aca me guardo el nombre de la persona de mayor edad\ndireccion_mayor = direccion #aca me guardo la direccion de la persona de mayor edad\nnombre_menor = nombre\ndireccion_menor = direccion\nposcion_menor = 1\nif edad.isdigit(): #verifico que sea un numero\n    edad = int(edad)\n    edad_mayor = edad\n    edad_menor = edad",
        "detail": "ejercicio_carga_persona",
        "documentation": {}
    },
    {
        "label": "nombre_mayor",
        "kind": 5,
        "importPath": "ejercicio_carga_persona",
        "description": "ejercicio_carga_persona",
        "peekOfCode": "nombre_mayor = nombre #aca me guardo el nombre de la persona de mayor edad\ndireccion_mayor = direccion #aca me guardo la direccion de la persona de mayor edad\nnombre_menor = nombre\ndireccion_menor = direccion\nposcion_menor = 1\nif edad.isdigit(): #verifico que sea un numero\n    edad = int(edad)\n    edad_mayor = edad\n    edad_menor = edad\n    suma_edades = edad # aca sumo las edades",
        "detail": "ejercicio_carga_persona",
        "documentation": {}
    },
    {
        "label": "direccion_mayor",
        "kind": 5,
        "importPath": "ejercicio_carga_persona",
        "description": "ejercicio_carga_persona",
        "peekOfCode": "direccion_mayor = direccion #aca me guardo la direccion de la persona de mayor edad\nnombre_menor = nombre\ndireccion_menor = direccion\nposcion_menor = 1\nif edad.isdigit(): #verifico que sea un numero\n    edad = int(edad)\n    edad_mayor = edad\n    edad_menor = edad\n    suma_edades = edad # aca sumo las edades\nelse:",
        "detail": "ejercicio_carga_persona",
        "documentation": {}
    },
    {
        "label": "nombre_menor",
        "kind": 5,
        "importPath": "ejercicio_carga_persona",
        "description": "ejercicio_carga_persona",
        "peekOfCode": "nombre_menor = nombre\ndireccion_menor = direccion\nposcion_menor = 1\nif edad.isdigit(): #verifico que sea un numero\n    edad = int(edad)\n    edad_mayor = edad\n    edad_menor = edad\n    suma_edades = edad # aca sumo las edades\nelse:\n    print(\"No ingresaste un numero, ultimo intento!\")",
        "detail": "ejercicio_carga_persona",
        "documentation": {}
    },
    {
        "label": "direccion_menor",
        "kind": 5,
        "importPath": "ejercicio_carga_persona",
        "description": "ejercicio_carga_persona",
        "peekOfCode": "direccion_menor = direccion\nposcion_menor = 1\nif edad.isdigit(): #verifico que sea un numero\n    edad = int(edad)\n    edad_mayor = edad\n    edad_menor = edad\n    suma_edades = edad # aca sumo las edades\nelse:\n    print(\"No ingresaste un numero, ultimo intento!\")\n    edad = input(\"Ingrese una edad:\")",
        "detail": "ejercicio_carga_persona",
        "documentation": {}
    },
    {
        "label": "poscion_menor",
        "kind": 5,
        "importPath": "ejercicio_carga_persona",
        "description": "ejercicio_carga_persona",
        "peekOfCode": "poscion_menor = 1\nif edad.isdigit(): #verifico que sea un numero\n    edad = int(edad)\n    edad_mayor = edad\n    edad_menor = edad\n    suma_edades = edad # aca sumo las edades\nelse:\n    print(\"No ingresaste un numero, ultimo intento!\")\n    edad = input(\"Ingrese una edad:\")\n    if edad.isdigit():",
        "detail": "ejercicio_carga_persona",
        "documentation": {}
    },
    {
        "label": "edad",
        "kind": 5,
        "importPath": "ejercicio_carga_persona",
        "description": "ejercicio_carga_persona",
        "peekOfCode": "edad = input(\"Ingrese una edad:\")\nnombre =  input(\"Ingrese el nombre completo:\")\ndireccion = input(\"Ingrese la dirección:\")\nif edad.isdigit():\n    edad = int(edad)\nelse:\n    print(\"Como no ingresaste un numero la edad se pone en 0\")\n    exit()\nsuma_edades  +=  edad # aca sumo las edades\nif edad >= edad_mayor:",
        "detail": "ejercicio_carga_persona",
        "documentation": {}
    },
    {
        "label": "nombre",
        "kind": 5,
        "importPath": "ejercicio_carga_persona",
        "description": "ejercicio_carga_persona",
        "peekOfCode": "nombre =  input(\"Ingrese el nombre completo:\")\ndireccion = input(\"Ingrese la dirección:\")\nif edad.isdigit():\n    edad = int(edad)\nelse:\n    print(\"Como no ingresaste un numero la edad se pone en 0\")\n    exit()\nsuma_edades  +=  edad # aca sumo las edades\nif edad >= edad_mayor:\n    edad_mayor = edad",
        "detail": "ejercicio_carga_persona",
        "documentation": {}
    },
    {
        "label": "direccion",
        "kind": 5,
        "importPath": "ejercicio_carga_persona",
        "description": "ejercicio_carga_persona",
        "peekOfCode": "direccion = input(\"Ingrese la dirección:\")\nif edad.isdigit():\n    edad = int(edad)\nelse:\n    print(\"Como no ingresaste un numero la edad se pone en 0\")\n    exit()\nsuma_edades  +=  edad # aca sumo las edades\nif edad >= edad_mayor:\n    edad_mayor = edad\n    posicion = 2",
        "detail": "ejercicio_carga_persona",
        "documentation": {}
    },
    {
        "label": "edad",
        "kind": 5,
        "importPath": "ejercicio_carga_persona",
        "description": "ejercicio_carga_persona",
        "peekOfCode": "edad = input(\"Ingrese una edad:\")\nnombre =  input(\"Ingrese el nombre completo:\")\ndireccion = input(\"Ingrese la dirección:\")\nif edad.isdigit():\n    edad = int(edad)\nelse:\n    print(\"Como no ingresaste un numero la edad se pone en 0\")\n    exit()\nsuma_edades  +=  edad # aca sumo las edades\nif edad >= edad_mayor:",
        "detail": "ejercicio_carga_persona",
        "documentation": {}
    },
    {
        "label": "nombre",
        "kind": 5,
        "importPath": "ejercicio_carga_persona",
        "description": "ejercicio_carga_persona",
        "peekOfCode": "nombre =  input(\"Ingrese el nombre completo:\")\ndireccion = input(\"Ingrese la dirección:\")\nif edad.isdigit():\n    edad = int(edad)\nelse:\n    print(\"Como no ingresaste un numero la edad se pone en 0\")\n    exit()\nsuma_edades  +=  edad # aca sumo las edades\nif edad >= edad_mayor:\n    edad_mayor = edad",
        "detail": "ejercicio_carga_persona",
        "documentation": {}
    },
    {
        "label": "direccion",
        "kind": 5,
        "importPath": "ejercicio_carga_persona",
        "description": "ejercicio_carga_persona",
        "peekOfCode": "direccion = input(\"Ingrese la dirección:\")\nif edad.isdigit():\n    edad = int(edad)\nelse:\n    print(\"Como no ingresaste un numero la edad se pone en 0\")\n    exit()\nsuma_edades  +=  edad # aca sumo las edades\nif edad >= edad_mayor:\n    edad_mayor = edad\n    posicion = 3",
        "detail": "ejercicio_carga_persona",
        "documentation": {}
    },
    {
        "label": "edad",
        "kind": 5,
        "importPath": "ejercicio_carga_persona",
        "description": "ejercicio_carga_persona",
        "peekOfCode": "edad = input(\"Ingrese una edad:\")\nnombre =  input(\"Ingrese el nombre completo:\")\ndireccion = input(\"Ingrese la dirección:\")\nif edad.isdigit():\n    edad = int(edad)\nelse:\n    print(\"Como no ingresaste un numero la edad se pone en 0\")\n    exit()\nsuma_edades  +=  edad # aca sumo las edades\nif edad >= edad_mayor:",
        "detail": "ejercicio_carga_persona",
        "documentation": {}
    },
    {
        "label": "nombre",
        "kind": 5,
        "importPath": "ejercicio_carga_persona",
        "description": "ejercicio_carga_persona",
        "peekOfCode": "nombre =  input(\"Ingrese el nombre completo:\")\ndireccion = input(\"Ingrese la dirección:\")\nif edad.isdigit():\n    edad = int(edad)\nelse:\n    print(\"Como no ingresaste un numero la edad se pone en 0\")\n    exit()\nsuma_edades  +=  edad # aca sumo las edades\nif edad >= edad_mayor:\n    edad_mayor = edad",
        "detail": "ejercicio_carga_persona",
        "documentation": {}
    },
    {
        "label": "direccion",
        "kind": 5,
        "importPath": "ejercicio_carga_persona",
        "description": "ejercicio_carga_persona",
        "peekOfCode": "direccion = input(\"Ingrese la dirección:\")\nif edad.isdigit():\n    edad = int(edad)\nelse:\n    print(\"Como no ingresaste un numero la edad se pone en 0\")\n    exit()\nsuma_edades  +=  edad # aca sumo las edades\nif edad >= edad_mayor:\n    edad_mayor = edad\n    nombre_mayor = nombre",
        "detail": "ejercicio_carga_persona",
        "documentation": {}
    },
    {
        "label": "promedio",
        "kind": 5,
        "importPath": "ejercicio_carga_persona",
        "description": "ejercicio_carga_persona",
        "peekOfCode": "promedio = suma_edades / 4 # aca calculo el promedio\n# aca calculo el mayor\nprint (f\"La person de mayor edad es {nombre_mayor} con {edad_mayor} años y vive en {direccion_mayor} en la posición {posicion}\")\n# aca calculo menor!!!!\nprint (f\"La person de menor edad es {nombre_menor} con {edad_menor} años y vive en {direccion_menor} y fue cargado en la posición {posicion_menor}\")\nprint(f\"El promedio de las edades es: {promedio}\")",
        "detail": "ejercicio_carga_persona",
        "documentation": {}
    },
    {
        "label": "nombre",
        "kind": 5,
        "importPath": "ejercicio_carga_persona_2",
        "description": "ejercicio_carga_persona_2",
        "peekOfCode": "nombre = input(\"ingrese el nombre de la persona: \")\nedad = input(\"ingrese la edad de la persona: \")\ndireccion = input(\"ingrese direccion de la persona: \")\npromedio = 0 #aca voy a calcular el promedio de las edades\nposicion_mayor = 0 #aca voy a guardar la posicion de la persona mayor\nedad_mayor =  0 #aca voy a guardar la edad mayor\nnombre_mayor = \"\" #aca voy a guardar el nombre de la persona mayor\ndireccion_mayor = \"\" #aca voy a guardar la direccion de la persona mayor\n#ahora voy a calcular el menor\nposicion_menor = 0 #aca voy a guardar la posicion de la persona menor",
        "detail": "ejercicio_carga_persona_2",
        "documentation": {}
    },
    {
        "label": "edad",
        "kind": 5,
        "importPath": "ejercicio_carga_persona_2",
        "description": "ejercicio_carga_persona_2",
        "peekOfCode": "edad = input(\"ingrese la edad de la persona: \")\ndireccion = input(\"ingrese direccion de la persona: \")\npromedio = 0 #aca voy a calcular el promedio de las edades\nposicion_mayor = 0 #aca voy a guardar la posicion de la persona mayor\nedad_mayor =  0 #aca voy a guardar la edad mayor\nnombre_mayor = \"\" #aca voy a guardar el nombre de la persona mayor\ndireccion_mayor = \"\" #aca voy a guardar la direccion de la persona mayor\n#ahora voy a calcular el menor\nposicion_menor = 0 #aca voy a guardar la posicion de la persona menor\nedad_menor =  0 #aca voy a guardar la edad menor",
        "detail": "ejercicio_carga_persona_2",
        "documentation": {}
    },
    {
        "label": "direccion",
        "kind": 5,
        "importPath": "ejercicio_carga_persona_2",
        "description": "ejercicio_carga_persona_2",
        "peekOfCode": "direccion = input(\"ingrese direccion de la persona: \")\npromedio = 0 #aca voy a calcular el promedio de las edades\nposicion_mayor = 0 #aca voy a guardar la posicion de la persona mayor\nedad_mayor =  0 #aca voy a guardar la edad mayor\nnombre_mayor = \"\" #aca voy a guardar el nombre de la persona mayor\ndireccion_mayor = \"\" #aca voy a guardar la direccion de la persona mayor\n#ahora voy a calcular el menor\nposicion_menor = 0 #aca voy a guardar la posicion de la persona menor\nedad_menor =  0 #aca voy a guardar la edad menor\nnombre_menor = \"\" #aca voy a guardar el nombre de la persona menor",
        "detail": "ejercicio_carga_persona_2",
        "documentation": {}
    },
    {
        "label": "promedio",
        "kind": 5,
        "importPath": "ejercicio_carga_persona_2",
        "description": "ejercicio_carga_persona_2",
        "peekOfCode": "promedio = 0 #aca voy a calcular el promedio de las edades\nposicion_mayor = 0 #aca voy a guardar la posicion de la persona mayor\nedad_mayor =  0 #aca voy a guardar la edad mayor\nnombre_mayor = \"\" #aca voy a guardar el nombre de la persona mayor\ndireccion_mayor = \"\" #aca voy a guardar la direccion de la persona mayor\n#ahora voy a calcular el menor\nposicion_menor = 0 #aca voy a guardar la posicion de la persona menor\nedad_menor =  0 #aca voy a guardar la edad menor\nnombre_menor = \"\" #aca voy a guardar el nombre de la persona menor\ndireccion_menor = \"\" #aca voy a guardar la direccion de la persona menor",
        "detail": "ejercicio_carga_persona_2",
        "documentation": {}
    },
    {
        "label": "posicion_mayor",
        "kind": 5,
        "importPath": "ejercicio_carga_persona_2",
        "description": "ejercicio_carga_persona_2",
        "peekOfCode": "posicion_mayor = 0 #aca voy a guardar la posicion de la persona mayor\nedad_mayor =  0 #aca voy a guardar la edad mayor\nnombre_mayor = \"\" #aca voy a guardar el nombre de la persona mayor\ndireccion_mayor = \"\" #aca voy a guardar la direccion de la persona mayor\n#ahora voy a calcular el menor\nposicion_menor = 0 #aca voy a guardar la posicion de la persona menor\nedad_menor =  0 #aca voy a guardar la edad menor\nnombre_menor = \"\" #aca voy a guardar el nombre de la persona menor\ndireccion_menor = \"\" #aca voy a guardar la direccion de la persona menor\nsuma_de_edades = 0 #aca voy a guardar la suma de las edades",
        "detail": "ejercicio_carga_persona_2",
        "documentation": {}
    },
    {
        "label": "edad_mayor",
        "kind": 5,
        "importPath": "ejercicio_carga_persona_2",
        "description": "ejercicio_carga_persona_2",
        "peekOfCode": "edad_mayor =  0 #aca voy a guardar la edad mayor\nnombre_mayor = \"\" #aca voy a guardar el nombre de la persona mayor\ndireccion_mayor = \"\" #aca voy a guardar la direccion de la persona mayor\n#ahora voy a calcular el menor\nposicion_menor = 0 #aca voy a guardar la posicion de la persona menor\nedad_menor =  0 #aca voy a guardar la edad menor\nnombre_menor = \"\" #aca voy a guardar el nombre de la persona menor\ndireccion_menor = \"\" #aca voy a guardar la direccion de la persona menor\nsuma_de_edades = 0 #aca voy a guardar la suma de las edades\n#promedio = edad1 + edad2 + edad3 + edad4 / 4",
        "detail": "ejercicio_carga_persona_2",
        "documentation": {}
    },
    {
        "label": "nombre_mayor",
        "kind": 5,
        "importPath": "ejercicio_carga_persona_2",
        "description": "ejercicio_carga_persona_2",
        "peekOfCode": "nombre_mayor = \"\" #aca voy a guardar el nombre de la persona mayor\ndireccion_mayor = \"\" #aca voy a guardar la direccion de la persona mayor\n#ahora voy a calcular el menor\nposicion_menor = 0 #aca voy a guardar la posicion de la persona menor\nedad_menor =  0 #aca voy a guardar la edad menor\nnombre_menor = \"\" #aca voy a guardar el nombre de la persona menor\ndireccion_menor = \"\" #aca voy a guardar la direccion de la persona menor\nsuma_de_edades = 0 #aca voy a guardar la suma de las edades\n#promedio = edad1 + edad2 + edad3 + edad4 / 4\n# if edad_1.isdigit(): #si esto es un numero entero lo cambia",
        "detail": "ejercicio_carga_persona_2",
        "documentation": {}
    },
    {
        "label": "direccion_mayor",
        "kind": 5,
        "importPath": "ejercicio_carga_persona_2",
        "description": "ejercicio_carga_persona_2",
        "peekOfCode": "direccion_mayor = \"\" #aca voy a guardar la direccion de la persona mayor\n#ahora voy a calcular el menor\nposicion_menor = 0 #aca voy a guardar la posicion de la persona menor\nedad_menor =  0 #aca voy a guardar la edad menor\nnombre_menor = \"\" #aca voy a guardar el nombre de la persona menor\ndireccion_menor = \"\" #aca voy a guardar la direccion de la persona menor\nsuma_de_edades = 0 #aca voy a guardar la suma de las edades\n#promedio = edad1 + edad2 + edad3 + edad4 / 4\n# if edad_1.isdigit(): #si esto es un numero entero lo cambia\n#     edad_1 = int(edad_1) # cambia el numero que estaba en string a integer (numero )",
        "detail": "ejercicio_carga_persona_2",
        "documentation": {}
    },
    {
        "label": "posicion_menor",
        "kind": 5,
        "importPath": "ejercicio_carga_persona_2",
        "description": "ejercicio_carga_persona_2",
        "peekOfCode": "posicion_menor = 0 #aca voy a guardar la posicion de la persona menor\nedad_menor =  0 #aca voy a guardar la edad menor\nnombre_menor = \"\" #aca voy a guardar el nombre de la persona menor\ndireccion_menor = \"\" #aca voy a guardar la direccion de la persona menor\nsuma_de_edades = 0 #aca voy a guardar la suma de las edades\n#promedio = edad1 + edad2 + edad3 + edad4 / 4\n# if edad_1.isdigit(): #si esto es un numero entero lo cambia\n#     edad_1 = int(edad_1) # cambia el numero que estaba en string a integer (numero )\n# else:\n#     print(\"pusiste cualquier cosa\")",
        "detail": "ejercicio_carga_persona_2",
        "documentation": {}
    },
    {
        "label": "edad_menor",
        "kind": 5,
        "importPath": "ejercicio_carga_persona_2",
        "description": "ejercicio_carga_persona_2",
        "peekOfCode": "edad_menor =  0 #aca voy a guardar la edad menor\nnombre_menor = \"\" #aca voy a guardar el nombre de la persona menor\ndireccion_menor = \"\" #aca voy a guardar la direccion de la persona menor\nsuma_de_edades = 0 #aca voy a guardar la suma de las edades\n#promedio = edad1 + edad2 + edad3 + edad4 / 4\n# if edad_1.isdigit(): #si esto es un numero entero lo cambia\n#     edad_1 = int(edad_1) # cambia el numero que estaba en string a integer (numero )\n# else:\n#     print(\"pusiste cualquier cosa\")\n#     exit()#temina el programa",
        "detail": "ejercicio_carga_persona_2",
        "documentation": {}
    },
    {
        "label": "nombre_menor",
        "kind": 5,
        "importPath": "ejercicio_carga_persona_2",
        "description": "ejercicio_carga_persona_2",
        "peekOfCode": "nombre_menor = \"\" #aca voy a guardar el nombre de la persona menor\ndireccion_menor = \"\" #aca voy a guardar la direccion de la persona menor\nsuma_de_edades = 0 #aca voy a guardar la suma de las edades\n#promedio = edad1 + edad2 + edad3 + edad4 / 4\n# if edad_1.isdigit(): #si esto es un numero entero lo cambia\n#     edad_1 = int(edad_1) # cambia el numero que estaba en string a integer (numero )\n# else:\n#     print(\"pusiste cualquier cosa\")\n#     exit()#temina el programa\nif not edad.isdigit(): #si esto es un numero entero lo cambia",
        "detail": "ejercicio_carga_persona_2",
        "documentation": {}
    },
    {
        "label": "direccion_menor",
        "kind": 5,
        "importPath": "ejercicio_carga_persona_2",
        "description": "ejercicio_carga_persona_2",
        "peekOfCode": "direccion_menor = \"\" #aca voy a guardar la direccion de la persona menor\nsuma_de_edades = 0 #aca voy a guardar la suma de las edades\n#promedio = edad1 + edad2 + edad3 + edad4 / 4\n# if edad_1.isdigit(): #si esto es un numero entero lo cambia\n#     edad_1 = int(edad_1) # cambia el numero que estaba en string a integer (numero )\n# else:\n#     print(\"pusiste cualquier cosa\")\n#     exit()#temina el programa\nif not edad.isdigit(): #si esto es un numero entero lo cambia\n    print(\"pusiste cualquier cosa ahora vas a tener que empezar de 0\")",
        "detail": "ejercicio_carga_persona_2",
        "documentation": {}
    },
    {
        "label": "suma_de_edades",
        "kind": 5,
        "importPath": "ejercicio_carga_persona_2",
        "description": "ejercicio_carga_persona_2",
        "peekOfCode": "suma_de_edades = 0 #aca voy a guardar la suma de las edades\n#promedio = edad1 + edad2 + edad3 + edad4 / 4\n# if edad_1.isdigit(): #si esto es un numero entero lo cambia\n#     edad_1 = int(edad_1) # cambia el numero que estaba en string a integer (numero )\n# else:\n#     print(\"pusiste cualquier cosa\")\n#     exit()#temina el programa\nif not edad.isdigit(): #si esto es un numero entero lo cambia\n    print(\"pusiste cualquier cosa ahora vas a tener que empezar de 0\")\n    exit()#temina el programa",
        "detail": "ejercicio_carga_persona_2",
        "documentation": {}
    },
    {
        "label": "#promedio",
        "kind": 5,
        "importPath": "ejercicio_carga_persona_2",
        "description": "ejercicio_carga_persona_2",
        "peekOfCode": "#promedio = edad1 + edad2 + edad3 + edad4 / 4\n# if edad_1.isdigit(): #si esto es un numero entero lo cambia\n#     edad_1 = int(edad_1) # cambia el numero que estaba en string a integer (numero )\n# else:\n#     print(\"pusiste cualquier cosa\")\n#     exit()#temina el programa\nif not edad.isdigit(): #si esto es un numero entero lo cambia\n    print(\"pusiste cualquier cosa ahora vas a tener que empezar de 0\")\n    exit()#temina el programa\nedad = int(edad) # cambia el numero que estaba en string a integer (numero )",
        "detail": "ejercicio_carga_persona_2",
        "documentation": {}
    },
    {
        "label": "edad",
        "kind": 5,
        "importPath": "ejercicio_carga_persona_2",
        "description": "ejercicio_carga_persona_2",
        "peekOfCode": "edad = int(edad) # cambia el numero que estaba en string a integer (numero )\nnombre_mayor  =  nombre #guardo variable nombre_mayor con el dato que tengo guardado en nombre\nnombre_menor = nombre # se guarda el valor pq puede llegar a ser el menor\ndireccion_mayor = direccion # lo mismo aca\ndireccion_menor = direccion # lo mismo aca\nedad_mayor = edad # aca guardo la edad\nedad_menor = edad # aca guardo la edad\nposicion_menor = 1\nposicion_mayor = 1\nsuma_de_edades +=  edad #aca guardo la suma de las edades",
        "detail": "ejercicio_carga_persona_2",
        "documentation": {}
    },
    {
        "label": "nombre_menor",
        "kind": 5,
        "importPath": "ejercicio_carga_persona_2",
        "description": "ejercicio_carga_persona_2",
        "peekOfCode": "nombre_menor = nombre # se guarda el valor pq puede llegar a ser el menor\ndireccion_mayor = direccion # lo mismo aca\ndireccion_menor = direccion # lo mismo aca\nedad_mayor = edad # aca guardo la edad\nedad_menor = edad # aca guardo la edad\nposicion_menor = 1\nposicion_mayor = 1\nsuma_de_edades +=  edad #aca guardo la suma de las edades\n#voy a ingresar los datos de la persona 2\nnombre = input(\"ingrese el nombre de la segunda persona: \")",
        "detail": "ejercicio_carga_persona_2",
        "documentation": {}
    },
    {
        "label": "direccion_mayor",
        "kind": 5,
        "importPath": "ejercicio_carga_persona_2",
        "description": "ejercicio_carga_persona_2",
        "peekOfCode": "direccion_mayor = direccion # lo mismo aca\ndireccion_menor = direccion # lo mismo aca\nedad_mayor = edad # aca guardo la edad\nedad_menor = edad # aca guardo la edad\nposicion_menor = 1\nposicion_mayor = 1\nsuma_de_edades +=  edad #aca guardo la suma de las edades\n#voy a ingresar los datos de la persona 2\nnombre = input(\"ingrese el nombre de la segunda persona: \")\nedad = input(\"ingrese la edad de la segunda persona: \")",
        "detail": "ejercicio_carga_persona_2",
        "documentation": {}
    },
    {
        "label": "direccion_menor",
        "kind": 5,
        "importPath": "ejercicio_carga_persona_2",
        "description": "ejercicio_carga_persona_2",
        "peekOfCode": "direccion_menor = direccion # lo mismo aca\nedad_mayor = edad # aca guardo la edad\nedad_menor = edad # aca guardo la edad\nposicion_menor = 1\nposicion_mayor = 1\nsuma_de_edades +=  edad #aca guardo la suma de las edades\n#voy a ingresar los datos de la persona 2\nnombre = input(\"ingrese el nombre de la segunda persona: \")\nedad = input(\"ingrese la edad de la segunda persona: \")\ndireccion = input(\"ingrese direccion de la segunda persona: \")",
        "detail": "ejercicio_carga_persona_2",
        "documentation": {}
    },
    {
        "label": "edad_mayor",
        "kind": 5,
        "importPath": "ejercicio_carga_persona_2",
        "description": "ejercicio_carga_persona_2",
        "peekOfCode": "edad_mayor = edad # aca guardo la edad\nedad_menor = edad # aca guardo la edad\nposicion_menor = 1\nposicion_mayor = 1\nsuma_de_edades +=  edad #aca guardo la suma de las edades\n#voy a ingresar los datos de la persona 2\nnombre = input(\"ingrese el nombre de la segunda persona: \")\nedad = input(\"ingrese la edad de la segunda persona: \")\ndireccion = input(\"ingrese direccion de la segunda persona: \")\nif not edad.isdigit(): #si esto es un numero entero lo cambia",
        "detail": "ejercicio_carga_persona_2",
        "documentation": {}
    },
    {
        "label": "edad_menor",
        "kind": 5,
        "importPath": "ejercicio_carga_persona_2",
        "description": "ejercicio_carga_persona_2",
        "peekOfCode": "edad_menor = edad # aca guardo la edad\nposicion_menor = 1\nposicion_mayor = 1\nsuma_de_edades +=  edad #aca guardo la suma de las edades\n#voy a ingresar los datos de la persona 2\nnombre = input(\"ingrese el nombre de la segunda persona: \")\nedad = input(\"ingrese la edad de la segunda persona: \")\ndireccion = input(\"ingrese direccion de la segunda persona: \")\nif not edad.isdigit(): #si esto es un numero entero lo cambia\n    print(\"pusiste cualquier cosa\")",
        "detail": "ejercicio_carga_persona_2",
        "documentation": {}
    },
    {
        "label": "posicion_menor",
        "kind": 5,
        "importPath": "ejercicio_carga_persona_2",
        "description": "ejercicio_carga_persona_2",
        "peekOfCode": "posicion_menor = 1\nposicion_mayor = 1\nsuma_de_edades +=  edad #aca guardo la suma de las edades\n#voy a ingresar los datos de la persona 2\nnombre = input(\"ingrese el nombre de la segunda persona: \")\nedad = input(\"ingrese la edad de la segunda persona: \")\ndireccion = input(\"ingrese direccion de la segunda persona: \")\nif not edad.isdigit(): #si esto es un numero entero lo cambia\n    print(\"pusiste cualquier cosa\")\n    exit()#temina el programa",
        "detail": "ejercicio_carga_persona_2",
        "documentation": {}
    },
    {
        "label": "posicion_mayor",
        "kind": 5,
        "importPath": "ejercicio_carga_persona_2",
        "description": "ejercicio_carga_persona_2",
        "peekOfCode": "posicion_mayor = 1\nsuma_de_edades +=  edad #aca guardo la suma de las edades\n#voy a ingresar los datos de la persona 2\nnombre = input(\"ingrese el nombre de la segunda persona: \")\nedad = input(\"ingrese la edad de la segunda persona: \")\ndireccion = input(\"ingrese direccion de la segunda persona: \")\nif not edad.isdigit(): #si esto es un numero entero lo cambia\n    print(\"pusiste cualquier cosa\")\n    exit()#temina el programa\nedad = int(edad) # cambia el numero que estaba en string a integer (numero )",
        "detail": "ejercicio_carga_persona_2",
        "documentation": {}
    },
    {
        "label": "nombre",
        "kind": 5,
        "importPath": "ejercicio_carga_persona_2",
        "description": "ejercicio_carga_persona_2",
        "peekOfCode": "nombre = input(\"ingrese el nombre de la segunda persona: \")\nedad = input(\"ingrese la edad de la segunda persona: \")\ndireccion = input(\"ingrese direccion de la segunda persona: \")\nif not edad.isdigit(): #si esto es un numero entero lo cambia\n    print(\"pusiste cualquier cosa\")\n    exit()#temina el programa\nedad = int(edad) # cambia el numero que estaba en string a integer (numero )\nif edad > edad_mayor:\n    edad_mayor = edad\n    nombre_mayor = nombre",
        "detail": "ejercicio_carga_persona_2",
        "documentation": {}
    },
    {
        "label": "edad",
        "kind": 5,
        "importPath": "ejercicio_carga_persona_2",
        "description": "ejercicio_carga_persona_2",
        "peekOfCode": "edad = input(\"ingrese la edad de la segunda persona: \")\ndireccion = input(\"ingrese direccion de la segunda persona: \")\nif not edad.isdigit(): #si esto es un numero entero lo cambia\n    print(\"pusiste cualquier cosa\")\n    exit()#temina el programa\nedad = int(edad) # cambia el numero que estaba en string a integer (numero )\nif edad > edad_mayor:\n    edad_mayor = edad\n    nombre_mayor = nombre\n    direccion_mayor = direccion",
        "detail": "ejercicio_carga_persona_2",
        "documentation": {}
    },
    {
        "label": "direccion",
        "kind": 5,
        "importPath": "ejercicio_carga_persona_2",
        "description": "ejercicio_carga_persona_2",
        "peekOfCode": "direccion = input(\"ingrese direccion de la segunda persona: \")\nif not edad.isdigit(): #si esto es un numero entero lo cambia\n    print(\"pusiste cualquier cosa\")\n    exit()#temina el programa\nedad = int(edad) # cambia el numero que estaba en string a integer (numero )\nif edad > edad_mayor:\n    edad_mayor = edad\n    nombre_mayor = nombre\n    direccion_mayor = direccion\n    posicion_mayor = 2",
        "detail": "ejercicio_carga_persona_2",
        "documentation": {}
    },
    {
        "label": "edad",
        "kind": 5,
        "importPath": "ejercicio_carga_persona_2",
        "description": "ejercicio_carga_persona_2",
        "peekOfCode": "edad = int(edad) # cambia el numero que estaba en string a integer (numero )\nif edad > edad_mayor:\n    edad_mayor = edad\n    nombre_mayor = nombre\n    direccion_mayor = direccion\n    posicion_mayor = 2\nif edad < edad_menor:\n    edad_menor = edad\n    nombre_menor = nombre\n    direccion_menor = direccion",
        "detail": "ejercicio_carga_persona_2",
        "documentation": {}
    },
    {
        "label": "nombre",
        "kind": 5,
        "importPath": "ejercicio_carga_persona_2",
        "description": "ejercicio_carga_persona_2",
        "peekOfCode": "nombre = input(\"ingrese el nombre de la tercera persona: \")\nedad = input(\"ingrese la edad de la tercera persona: \")\ndireccion = input(\"ingrese direccion de la tercera persona: \")\nif not edad.isdigit(): #si esto es un numero entero lo cambia\n    print(\"pusiste cualquier cosa\")\n    exit()#temina el programa\nedad = int(edad) # cambia el numero que estaba en string a integer (numero )\nif edad > edad_mayor:\n    edad_mayor = edad\n    nombre_mayor = nombre",
        "detail": "ejercicio_carga_persona_2",
        "documentation": {}
    },
    {
        "label": "edad",
        "kind": 5,
        "importPath": "ejercicio_carga_persona_2",
        "description": "ejercicio_carga_persona_2",
        "peekOfCode": "edad = input(\"ingrese la edad de la tercera persona: \")\ndireccion = input(\"ingrese direccion de la tercera persona: \")\nif not edad.isdigit(): #si esto es un numero entero lo cambia\n    print(\"pusiste cualquier cosa\")\n    exit()#temina el programa\nedad = int(edad) # cambia el numero que estaba en string a integer (numero )\nif edad > edad_mayor:\n    edad_mayor = edad\n    nombre_mayor = nombre\n    direccion_mayor = direccion",
        "detail": "ejercicio_carga_persona_2",
        "documentation": {}
    },
    {
        "label": "direccion",
        "kind": 5,
        "importPath": "ejercicio_carga_persona_2",
        "description": "ejercicio_carga_persona_2",
        "peekOfCode": "direccion = input(\"ingrese direccion de la tercera persona: \")\nif not edad.isdigit(): #si esto es un numero entero lo cambia\n    print(\"pusiste cualquier cosa\")\n    exit()#temina el programa\nedad = int(edad) # cambia el numero que estaba en string a integer (numero )\nif edad > edad_mayor:\n    edad_mayor = edad\n    nombre_mayor = nombre\n    direccion_mayor = direccion\n    posicion_mayor = 3",
        "detail": "ejercicio_carga_persona_2",
        "documentation": {}
    },
    {
        "label": "edad",
        "kind": 5,
        "importPath": "ejercicio_carga_persona_2",
        "description": "ejercicio_carga_persona_2",
        "peekOfCode": "edad = int(edad) # cambia el numero que estaba en string a integer (numero )\nif edad > edad_mayor:\n    edad_mayor = edad\n    nombre_mayor = nombre\n    direccion_mayor = direccion\n    posicion_mayor = 3\nif edad < edad_menor:\n    edad_menor = edad\n    nombre_menor = nombre\n    direccion_menor = direccion",
        "detail": "ejercicio_carga_persona_2",
        "documentation": {}
    },
    {
        "label": "nombre",
        "kind": 5,
        "importPath": "ejercicio_carga_persona_2",
        "description": "ejercicio_carga_persona_2",
        "peekOfCode": "nombre = input(\"ingrese el nombre de la cuarta persona: \")\nedad = input(\"ingrese la edad de la cuarta persona: \")\ndireccion = input(\"ingrese direccion de la cuarta persona: \")\nif not edad.isdigit(): #si esto es un numero entero lo cambia\n    print(\"pusiste cualquier cosa\")\n    exit()#temina el programa\nedad = int(edad) # cambia el numero que estaba en string a integer (numero )\nif edad > edad_mayor:\n    edad_mayor = edad\n    nombre_mayor = nombre",
        "detail": "ejercicio_carga_persona_2",
        "documentation": {}
    },
    {
        "label": "edad",
        "kind": 5,
        "importPath": "ejercicio_carga_persona_2",
        "description": "ejercicio_carga_persona_2",
        "peekOfCode": "edad = input(\"ingrese la edad de la cuarta persona: \")\ndireccion = input(\"ingrese direccion de la cuarta persona: \")\nif not edad.isdigit(): #si esto es un numero entero lo cambia\n    print(\"pusiste cualquier cosa\")\n    exit()#temina el programa\nedad = int(edad) # cambia el numero que estaba en string a integer (numero )\nif edad > edad_mayor:\n    edad_mayor = edad\n    nombre_mayor = nombre\n    direccion_mayor = direccion",
        "detail": "ejercicio_carga_persona_2",
        "documentation": {}
    },
    {
        "label": "direccion",
        "kind": 5,
        "importPath": "ejercicio_carga_persona_2",
        "description": "ejercicio_carga_persona_2",
        "peekOfCode": "direccion = input(\"ingrese direccion de la cuarta persona: \")\nif not edad.isdigit(): #si esto es un numero entero lo cambia\n    print(\"pusiste cualquier cosa\")\n    exit()#temina el programa\nedad = int(edad) # cambia el numero que estaba en string a integer (numero )\nif edad > edad_mayor:\n    edad_mayor = edad\n    nombre_mayor = nombre\n    direccion_mayor = direccion\n    posicion_mayor = 4",
        "detail": "ejercicio_carga_persona_2",
        "documentation": {}
    },
    {
        "label": "edad",
        "kind": 5,
        "importPath": "ejercicio_carga_persona_2",
        "description": "ejercicio_carga_persona_2",
        "peekOfCode": "edad = int(edad) # cambia el numero que estaba en string a integer (numero )\nif edad > edad_mayor:\n    edad_mayor = edad\n    nombre_mayor = nombre\n    direccion_mayor = direccion\n    posicion_mayor = 4\nif edad < edad_menor:\n    edad_menor = edad\n    nombre_menor = nombre\n    direccion_menor = direccion",
        "detail": "ejercicio_carga_persona_2",
        "documentation": {}
    },
    {
        "label": "promedio",
        "kind": 5,
        "importPath": "ejercicio_carga_persona_2",
        "description": "ejercicio_carga_persona_2",
        "peekOfCode": "promedio = suma_de_edades /4\nprint(f\"el promedio de las edad ingresas es: {promedio}\")\nprint(f\"la persona de mayor edad es:{nombre_mayor} y tiene {edad_mayor} años y vive en {direccion_mayor} y la posicion es {posicion_mayor}\")\nprint(f\"la persona de menor edad es:{nombre_menor} y tiene {edad_menor} años y vive en {direccion_menor} y la posicion es {posicion_menor}\")",
        "detail": "ejercicio_carga_persona_2",
        "documentation": {}
    },
    {
        "label": "Circulo",
        "kind": 6,
        "importPath": "ejercicio_practico_final_resuelto",
        "description": "ejercicio_practico_final_resuelto",
        "peekOfCode": "class Circulo:\n    def __init__(self, radio): #1-Falta agregar el self #5- Corregir el init a __init__\n        self.radio = radio\n    def calcular_area(self):\n        return 3.14159 * self.radio ** 2 #La formula matematica es Pi por Radio al cuadrado el \"** 2\" es cuadrado.\n            #2- no va radio, va self.radio\nmi_circulo = Circulo(5) #3-Esta mal declarado el nombre de la clase\nprint(\"El área del círculo es: \" ,mi_circulo.calcular_area()) #4-Falta formatear el print\n#Ejercicio 6: Generar un numero Aleatorio.\n#Cantidad de errores: 3",
        "detail": "ejercicio_practico_final_resuelto",
        "documentation": {}
    },
    {
        "label": "Persona",
        "kind": 6,
        "importPath": "ejercicio_practico_final_resuelto",
        "description": "ejercicio_practico_final_resuelto",
        "peekOfCode": "class Persona:\n    def __init__(self, nombre, edad, profesion):\n        self.nombre = nombre\n        self.edad = edad\n        self.profesion = profesion\n    def imprimir(self):\n        print(f\"Nombre: {self.nombre}, Edad: {self.edad}, Profesion: {self.profesion}\")\n    def es_mayor_de_edad(self):\n        if self.edad >= 18:\n            return \"Es mayor de edad\"",
        "detail": "ejercicio_practico_final_resuelto",
        "documentation": {}
    },
    {
        "label": "repetir_cadena",
        "kind": 2,
        "importPath": "ejercicio_practico_final_resuelto",
        "description": "ejercicio_practico_final_resuelto",
        "peekOfCode": "def repetir_cadena(cadena, veces):\n    resultado = cadena * veces\n    return resultado #1-No devuelve nada\ntexto = input(\"Ingrese un texto: \")\nrepeticiones = int(input(\"¿Cuántas veces desea repetir el texto? \")) #2- Hay que convertirlo a entero\nprint(f\"El texto repetido es: {repetir_cadena(texto, repeticiones)}\") #3-Faltan los (texto, repeticiones)\n#Ejercicio 9: Crear una clase llamada Persona.\n#Crea tres instancias de la clase persona:\n# Gaspar, 23, Profesor.\n# Diego, 45, Desarrollador de Software.",
        "detail": "ejercicio_practico_final_resuelto",
        "documentation": {}
    },
    {
        "label": "nombre_usuario",
        "kind": 5,
        "importPath": "ejercicio_practico_final_resuelto",
        "description": "ejercicio_practico_final_resuelto",
        "peekOfCode": "nombre_usuario = input(\"Ingrese su nombre: \") #1-Falta cerrar comillas 3- el nombre de la variable no esta en snake_case\nprint(f\"Hola, {nombre_usuario}! Bienvenido!\") #2- Falta darle el formato al print con f \n#Ejercicio 2: Promedio de 4 numeros. \n#Cantidad errores: 5\n#1- los input devuelven str asi que hay que agregar la funcion int()\nnum1 = int(input(\"Ingrese el primer número: \"))\nnum2 = int(input(\"Ingrese el segundo número: \"))\nnum3 = int(input(\"Ingrese el tercer número: \"))\nnum4 = int(input(\"Ingrese el cuarto número: \")) #2-Faltaba un numero completo\npromedio = (num1 + num2 + num3 + num4) / 4 #3-Falta un numero completo 4-El nombre no esta en snake_case, no es una constante #5- Falta encerrar todas las sumas en ()",
        "detail": "ejercicio_practico_final_resuelto",
        "documentation": {}
    },
    {
        "label": "num1",
        "kind": 5,
        "importPath": "ejercicio_practico_final_resuelto",
        "description": "ejercicio_practico_final_resuelto",
        "peekOfCode": "num1 = int(input(\"Ingrese el primer número: \"))\nnum2 = int(input(\"Ingrese el segundo número: \"))\nnum3 = int(input(\"Ingrese el tercer número: \"))\nnum4 = int(input(\"Ingrese el cuarto número: \")) #2-Faltaba un numero completo\npromedio = (num1 + num2 + num3 + num4) / 4 #3-Falta un numero completo 4-El nombre no esta en snake_case, no es una constante #5- Falta encerrar todas las sumas en ()\nprint(f\"El promedio es: {promedio}\")\n#Ejercicio 3: Verificar si el estudiante aprobo:\n#Cantidad de errores: 2\ncalificacion = int(input(\"Ingrese la calificación del estudiante: \")) #1-Falta agregar un int() ya que el input devuelve str\nif calificacion >= 6: #2-Hay que corregir el simbolo de \"<=\" a \">=\"",
        "detail": "ejercicio_practico_final_resuelto",
        "documentation": {}
    },
    {
        "label": "num2",
        "kind": 5,
        "importPath": "ejercicio_practico_final_resuelto",
        "description": "ejercicio_practico_final_resuelto",
        "peekOfCode": "num2 = int(input(\"Ingrese el segundo número: \"))\nnum3 = int(input(\"Ingrese el tercer número: \"))\nnum4 = int(input(\"Ingrese el cuarto número: \")) #2-Faltaba un numero completo\npromedio = (num1 + num2 + num3 + num4) / 4 #3-Falta un numero completo 4-El nombre no esta en snake_case, no es una constante #5- Falta encerrar todas las sumas en ()\nprint(f\"El promedio es: {promedio}\")\n#Ejercicio 3: Verificar si el estudiante aprobo:\n#Cantidad de errores: 2\ncalificacion = int(input(\"Ingrese la calificación del estudiante: \")) #1-Falta agregar un int() ya que el input devuelve str\nif calificacion >= 6: #2-Hay que corregir el simbolo de \"<=\" a \">=\"\n    texto = \"El estudiante ha aprobado\" #3- Hay que cambiar el print por la declaracion del texto",
        "detail": "ejercicio_practico_final_resuelto",
        "documentation": {}
    },
    {
        "label": "num3",
        "kind": 5,
        "importPath": "ejercicio_practico_final_resuelto",
        "description": "ejercicio_practico_final_resuelto",
        "peekOfCode": "num3 = int(input(\"Ingrese el tercer número: \"))\nnum4 = int(input(\"Ingrese el cuarto número: \")) #2-Faltaba un numero completo\npromedio = (num1 + num2 + num3 + num4) / 4 #3-Falta un numero completo 4-El nombre no esta en snake_case, no es una constante #5- Falta encerrar todas las sumas en ()\nprint(f\"El promedio es: {promedio}\")\n#Ejercicio 3: Verificar si el estudiante aprobo:\n#Cantidad de errores: 2\ncalificacion = int(input(\"Ingrese la calificación del estudiante: \")) #1-Falta agregar un int() ya que el input devuelve str\nif calificacion >= 6: #2-Hay que corregir el simbolo de \"<=\" a \">=\"\n    texto = \"El estudiante ha aprobado\" #3- Hay que cambiar el print por la declaracion del texto\nelse:",
        "detail": "ejercicio_practico_final_resuelto",
        "documentation": {}
    },
    {
        "label": "num4",
        "kind": 5,
        "importPath": "ejercicio_practico_final_resuelto",
        "description": "ejercicio_practico_final_resuelto",
        "peekOfCode": "num4 = int(input(\"Ingrese el cuarto número: \")) #2-Faltaba un numero completo\npromedio = (num1 + num2 + num3 + num4) / 4 #3-Falta un numero completo 4-El nombre no esta en snake_case, no es una constante #5- Falta encerrar todas las sumas en ()\nprint(f\"El promedio es: {promedio}\")\n#Ejercicio 3: Verificar si el estudiante aprobo:\n#Cantidad de errores: 2\ncalificacion = int(input(\"Ingrese la calificación del estudiante: \")) #1-Falta agregar un int() ya que el input devuelve str\nif calificacion >= 6: #2-Hay que corregir el simbolo de \"<=\" a \">=\"\n    texto = \"El estudiante ha aprobado\" #3- Hay que cambiar el print por la declaracion del texto\nelse:\n    texto= \"El estudiante ha reprobado\"",
        "detail": "ejercicio_practico_final_resuelto",
        "documentation": {}
    },
    {
        "label": "promedio",
        "kind": 5,
        "importPath": "ejercicio_practico_final_resuelto",
        "description": "ejercicio_practico_final_resuelto",
        "peekOfCode": "promedio = (num1 + num2 + num3 + num4) / 4 #3-Falta un numero completo 4-El nombre no esta en snake_case, no es una constante #5- Falta encerrar todas las sumas en ()\nprint(f\"El promedio es: {promedio}\")\n#Ejercicio 3: Verificar si el estudiante aprobo:\n#Cantidad de errores: 2\ncalificacion = int(input(\"Ingrese la calificación del estudiante: \")) #1-Falta agregar un int() ya que el input devuelve str\nif calificacion >= 6: #2-Hay que corregir el simbolo de \"<=\" a \">=\"\n    texto = \"El estudiante ha aprobado\" #3- Hay que cambiar el print por la declaracion del texto\nelse:\n    texto= \"El estudiante ha reprobado\"\nprint(texto)",
        "detail": "ejercicio_practico_final_resuelto",
        "documentation": {}
    },
    {
        "label": "calificacion",
        "kind": 5,
        "importPath": "ejercicio_practico_final_resuelto",
        "description": "ejercicio_practico_final_resuelto",
        "peekOfCode": "calificacion = int(input(\"Ingrese la calificación del estudiante: \")) #1-Falta agregar un int() ya que el input devuelve str\nif calificacion >= 6: #2-Hay que corregir el simbolo de \"<=\" a \">=\"\n    texto = \"El estudiante ha aprobado\" #3- Hay que cambiar el print por la declaracion del texto\nelse:\n    texto= \"El estudiante ha reprobado\"\nprint(texto)\n#Ejercicio 4: Lista de Compras.\n#Cantidad de errores: 1\nlista_compras = []\nwhile True:",
        "detail": "ejercicio_practico_final_resuelto",
        "documentation": {}
    },
    {
        "label": "lista_compras",
        "kind": 5,
        "importPath": "ejercicio_practico_final_resuelto",
        "description": "ejercicio_practico_final_resuelto",
        "peekOfCode": "lista_compras = []\nwhile True:\n    item = input(\"Ingrese un artículo para agregar a la lista (o 'salir' para terminar): \")\n    if item == 'salir':\n        break\n    lista_compras.append(item)\nprint(\"Lista de compras:\")\nfor i in range(len(lista_compras)): #1-Falta agregar el len() para saber cuantos elementos tiene la lista\n    print(\"- \" + lista_compras[i])\n#Ejercicio 5: Clase Circulo.",
        "detail": "ejercicio_practico_final_resuelto",
        "documentation": {}
    },
    {
        "label": "mi_circulo",
        "kind": 5,
        "importPath": "ejercicio_practico_final_resuelto",
        "description": "ejercicio_practico_final_resuelto",
        "peekOfCode": "mi_circulo = Circulo(5) #3-Esta mal declarado el nombre de la clase\nprint(\"El área del círculo es: \" ,mi_circulo.calcular_area()) #4-Falta formatear el print\n#Ejercicio 6: Generar un numero Aleatorio.\n#Cantidad de errores: 3\nimport random #1- Falta el import random\nnumero = random.randint(1, 10) #2- Esta mal el nombre del metodo es randint\nprint(\"El número aleatorio generado es: \" , numero) #3- Esta mal declarado el print\n#Ejercicio 7: Contar Vocales en una Cadena:\n#Cantidad errores: 4\ncadena = \"Hola Mundo\"",
        "detail": "ejercicio_practico_final_resuelto",
        "documentation": {}
    },
    {
        "label": "numero",
        "kind": 5,
        "importPath": "ejercicio_practico_final_resuelto",
        "description": "ejercicio_practico_final_resuelto",
        "peekOfCode": "numero = random.randint(1, 10) #2- Esta mal el nombre del metodo es randint\nprint(\"El número aleatorio generado es: \" , numero) #3- Esta mal declarado el print\n#Ejercicio 7: Contar Vocales en una Cadena:\n#Cantidad errores: 4\ncadena = \"Hola Mundo\"\nvocales = \"aeiou\"\ncontador = 0\nfor letra in cadena: #1-Faltan los 2 puntos\n    if letra.lower() in vocales: #2-Faltan los () en el .lower\n        contador += 1 #3-Falta el +=",
        "detail": "ejercicio_practico_final_resuelto",
        "documentation": {}
    },
    {
        "label": "cadena",
        "kind": 5,
        "importPath": "ejercicio_practico_final_resuelto",
        "description": "ejercicio_practico_final_resuelto",
        "peekOfCode": "cadena = \"Hola Mundo\"\nvocales = \"aeiou\"\ncontador = 0\nfor letra in cadena: #1-Faltan los 2 puntos\n    if letra.lower() in vocales: #2-Faltan los () en el .lower\n        contador += 1 #3-Falta el +=\nprint(\"Número de vocales en la cadena: \" ,contador) #4-Falta la , en el print\n#Ejercicio 8: Funcion para repetir cadenas.\n#Cantidad de errores: 3\ndef repetir_cadena(cadena, veces):",
        "detail": "ejercicio_practico_final_resuelto",
        "documentation": {}
    },
    {
        "label": "vocales",
        "kind": 5,
        "importPath": "ejercicio_practico_final_resuelto",
        "description": "ejercicio_practico_final_resuelto",
        "peekOfCode": "vocales = \"aeiou\"\ncontador = 0\nfor letra in cadena: #1-Faltan los 2 puntos\n    if letra.lower() in vocales: #2-Faltan los () en el .lower\n        contador += 1 #3-Falta el +=\nprint(\"Número de vocales en la cadena: \" ,contador) #4-Falta la , en el print\n#Ejercicio 8: Funcion para repetir cadenas.\n#Cantidad de errores: 3\ndef repetir_cadena(cadena, veces):\n    resultado = cadena * veces",
        "detail": "ejercicio_practico_final_resuelto",
        "documentation": {}
    },
    {
        "label": "contador",
        "kind": 5,
        "importPath": "ejercicio_practico_final_resuelto",
        "description": "ejercicio_practico_final_resuelto",
        "peekOfCode": "contador = 0\nfor letra in cadena: #1-Faltan los 2 puntos\n    if letra.lower() in vocales: #2-Faltan los () en el .lower\n        contador += 1 #3-Falta el +=\nprint(\"Número de vocales en la cadena: \" ,contador) #4-Falta la , en el print\n#Ejercicio 8: Funcion para repetir cadenas.\n#Cantidad de errores: 3\ndef repetir_cadena(cadena, veces):\n    resultado = cadena * veces\n    return resultado #1-No devuelve nada",
        "detail": "ejercicio_practico_final_resuelto",
        "documentation": {}
    },
    {
        "label": "texto",
        "kind": 5,
        "importPath": "ejercicio_practico_final_resuelto",
        "description": "ejercicio_practico_final_resuelto",
        "peekOfCode": "texto = input(\"Ingrese un texto: \")\nrepeticiones = int(input(\"¿Cuántas veces desea repetir el texto? \")) #2- Hay que convertirlo a entero\nprint(f\"El texto repetido es: {repetir_cadena(texto, repeticiones)}\") #3-Faltan los (texto, repeticiones)\n#Ejercicio 9: Crear una clase llamada Persona.\n#Crea tres instancias de la clase persona:\n# Gaspar, 23, Profesor.\n# Diego, 45, Desarrollador de Software.\n# Tu nombre, tu edad, tu profesion.\n# Crea metodos para imprimir el nombre, la edad y la profesion de cada persona.\n# Crea un metodo para saber si la persona es mayor o menor de edad.",
        "detail": "ejercicio_practico_final_resuelto",
        "documentation": {}
    },
    {
        "label": "repeticiones",
        "kind": 5,
        "importPath": "ejercicio_practico_final_resuelto",
        "description": "ejercicio_practico_final_resuelto",
        "peekOfCode": "repeticiones = int(input(\"¿Cuántas veces desea repetir el texto? \")) #2- Hay que convertirlo a entero\nprint(f\"El texto repetido es: {repetir_cadena(texto, repeticiones)}\") #3-Faltan los (texto, repeticiones)\n#Ejercicio 9: Crear una clase llamada Persona.\n#Crea tres instancias de la clase persona:\n# Gaspar, 23, Profesor.\n# Diego, 45, Desarrollador de Software.\n# Tu nombre, tu edad, tu profesion.\n# Crea metodos para imprimir el nombre, la edad y la profesion de cada persona.\n# Crea un metodo para saber si la persona es mayor o menor de edad.\nclass Persona:",
        "detail": "ejercicio_practico_final_resuelto",
        "documentation": {}
    },
    {
        "label": "persona_1",
        "kind": 5,
        "importPath": "ejercicio_practico_final_resuelto",
        "description": "ejercicio_practico_final_resuelto",
        "peekOfCode": "persona_1 = Persona(\"Gaspar\", 23, \"Profesor\")\npersona_2 = Persona(\"Diego\", 45, \"Desarrollador de Software\")\npersona_3 = Persona(\"Fermin\", 16, \"Estudiante\")\npersona_1.imprimir()\npersona_2.imprimir()\npersona_3.imprimir()\nprint(persona_1.es_mayor_de_edad())\nprint(persona_2.es_mayor_de_edad())\nprint(persona_3.es_mayor_de_edad())",
        "detail": "ejercicio_practico_final_resuelto",
        "documentation": {}
    },
    {
        "label": "persona_2",
        "kind": 5,
        "importPath": "ejercicio_practico_final_resuelto",
        "description": "ejercicio_practico_final_resuelto",
        "peekOfCode": "persona_2 = Persona(\"Diego\", 45, \"Desarrollador de Software\")\npersona_3 = Persona(\"Fermin\", 16, \"Estudiante\")\npersona_1.imprimir()\npersona_2.imprimir()\npersona_3.imprimir()\nprint(persona_1.es_mayor_de_edad())\nprint(persona_2.es_mayor_de_edad())\nprint(persona_3.es_mayor_de_edad())",
        "detail": "ejercicio_practico_final_resuelto",
        "documentation": {}
    },
    {
        "label": "persona_3",
        "kind": 5,
        "importPath": "ejercicio_practico_final_resuelto",
        "description": "ejercicio_practico_final_resuelto",
        "peekOfCode": "persona_3 = Persona(\"Fermin\", 16, \"Estudiante\")\npersona_1.imprimir()\npersona_2.imprimir()\npersona_3.imprimir()\nprint(persona_1.es_mayor_de_edad())\nprint(persona_2.es_mayor_de_edad())\nprint(persona_3.es_mayor_de_edad())",
        "detail": "ejercicio_practico_final_resuelto",
        "documentation": {}
    },
    {
        "label": "Circulo",
        "kind": 6,
        "importPath": "examen",
        "description": "examen",
        "peekOfCode": "class Circulo:\n    def_init_(radio):\n        self.radio = radio\n    def calcular_area(self):\n        return 3.14159 * radio ** 2 #La formula matematica es Pi por Radio al cuadrado el \"** 2\" es cuadrado.\nMi_circulo = Circulo(5)\nprint(\"El área del círculo es: \" mi_circulo.calcular_area())\n#Ejercicio 6: Generar un numero Aleatorio.\n#Cantidad de errores: 3\nnumero = random.randit(1, 10)",
        "detail": "examen",
        "documentation": {}
    },
    {
        "label": "repetir_cadena",
        "kind": 2,
        "importPath": "examen",
        "description": "examen",
        "peekOfCode": "def repetir_cadena(cadena, veces):\n    resultado = cadena * veces\n    return \ntexto = input(\"Ingrese un texto: \")\nrepeticiones = input(\"¿Cuántas veces desea repetir el texto? \")\nprint(f\"El texto repetido es: {repetir_cadena}\")\n#Ejercicio 9: Crear una clase llamada Persona.\n#Crea tres instancias de la clase persona:\n# Gaspar, 23, Profesor.\n# Diego, 45, Desarrollador de Software.",
        "detail": "examen",
        "documentation": {}
    },
    {
        "label": "num1",
        "kind": 5,
        "importPath": "examen",
        "description": "examen",
        "peekOfCode": "num1 = input(\"Ingrese el primer numero: \")\nnum2 = input(\"Ingrese el segundo numero: \")\nnum3 = input(\"Ingrese el tercer numero: \")\nPROMEDIO = num1 + num2 + num3 / 3\nprint(f\"El promedio es: {promedio}\")\n#Ejercicio 3: Verificar si el estudiante aprobo:\n#Cantidad de errores: 3\ncalificacion = input(\"Ingrese la calificación del estudiante: \")\ntexto = \"El estudiante ha aprobado\"\nif calificacion >= 6:",
        "detail": "examen",
        "documentation": {}
    },
    {
        "label": "num2",
        "kind": 5,
        "importPath": "examen",
        "description": "examen",
        "peekOfCode": "num2 = input(\"Ingrese el segundo numero: \")\nnum3 = input(\"Ingrese el tercer numero: \")\nPROMEDIO = num1 + num2 + num3 / 3\nprint(f\"El promedio es: {promedio}\")\n#Ejercicio 3: Verificar si el estudiante aprobo:\n#Cantidad de errores: 3\ncalificacion = input(\"Ingrese la calificación del estudiante: \")\ntexto = \"El estudiante ha aprobado\"\nif calificacion >= 6:\n    print(texto)",
        "detail": "examen",
        "documentation": {}
    },
    {
        "label": "num3",
        "kind": 5,
        "importPath": "examen",
        "description": "examen",
        "peekOfCode": "num3 = input(\"Ingrese el tercer numero: \")\nPROMEDIO = num1 + num2 + num3 / 3\nprint(f\"El promedio es: {promedio}\")\n#Ejercicio 3: Verificar si el estudiante aprobo:\n#Cantidad de errores: 3\ncalificacion = input(\"Ingrese la calificación del estudiante: \")\ntexto = \"El estudiante ha aprobado\"\nif calificacion >= 6:\n    print(texto)\nelse:",
        "detail": "examen",
        "documentation": {}
    },
    {
        "label": "PROMEDIO",
        "kind": 5,
        "importPath": "examen",
        "description": "examen",
        "peekOfCode": "PROMEDIO = num1 + num2 + num3 / 3\nprint(f\"El promedio es: {promedio}\")\n#Ejercicio 3: Verificar si el estudiante aprobo:\n#Cantidad de errores: 3\ncalificacion = input(\"Ingrese la calificación del estudiante: \")\ntexto = \"El estudiante ha aprobado\"\nif calificacion >= 6:\n    print(texto)\nelse:\n    texto= \"El estudiante ha reprobado\"",
        "detail": "examen",
        "documentation": {}
    },
    {
        "label": "calificacion",
        "kind": 5,
        "importPath": "examen",
        "description": "examen",
        "peekOfCode": "calificacion = input(\"Ingrese la calificación del estudiante: \")\ntexto = \"El estudiante ha aprobado\"\nif calificacion >= 6:\n    print(texto)\nelse:\n    texto= \"El estudiante ha reprobado\"\nprint(texto)\n#Ejercicio 4: Lista de Compras.\n#Cantidad de errores: 1\nlista_compras = []",
        "detail": "examen",
        "documentation": {}
    },
    {
        "label": "texto",
        "kind": 5,
        "importPath": "examen",
        "description": "examen",
        "peekOfCode": "texto = \"El estudiante ha aprobado\"\nif calificacion >= 6:\n    print(texto)\nelse:\n    texto= \"El estudiante ha reprobado\"\nprint(texto)\n#Ejercicio 4: Lista de Compras.\n#Cantidad de errores: 1\nlista_compras = []\nwhile True:",
        "detail": "examen",
        "documentation": {}
    },
    {
        "label": "lista_compras",
        "kind": 5,
        "importPath": "examen",
        "description": "examen",
        "peekOfCode": "lista_compras = []\nwhile True:\n    item = input(\"Ingrese un artículo para agregar a la lista (o 'salir' para terminar): \")\n    if item == 'salir':\n        break\n    lista_compras.append(item)\nprint(\"Lista de compras:\")\nfor i in range(lista_compras):\n    print(\"- \" + lista_compras[i])\nEjercicio 5: Clase Circulo.",
        "detail": "examen",
        "documentation": {}
    },
    {
        "label": "Mi_circulo",
        "kind": 5,
        "importPath": "examen",
        "description": "examen",
        "peekOfCode": "Mi_circulo = Circulo(5)\nprint(\"El área del círculo es: \" mi_circulo.calcular_area())\n#Ejercicio 6: Generar un numero Aleatorio.\n#Cantidad de errores: 3\nnumero = random.randit(1, 10)\n#Ejercicio 7: Contar Vocales en una Cadena:\n#Cantidad errores: 4\ncadena = \"Hola Mundo\"\nvocales = \"aeiou\"\ncontador = 0",
        "detail": "examen",
        "documentation": {}
    },
    {
        "label": "numero",
        "kind": 5,
        "importPath": "examen",
        "description": "examen",
        "peekOfCode": "numero = random.randit(1, 10)\n#Ejercicio 7: Contar Vocales en una Cadena:\n#Cantidad errores: 4\ncadena = \"Hola Mundo\"\nvocales = \"aeiou\"\ncontador = 0\nfor letra in cadena\n    if letra.lower in vocales:\n        contador + 1\nprint(\"Número de vocales en la cadena: \" contador)",
        "detail": "examen",
        "documentation": {}
    },
    {
        "label": "cadena",
        "kind": 5,
        "importPath": "examen",
        "description": "examen",
        "peekOfCode": "cadena = \"Hola Mundo\"\nvocales = \"aeiou\"\ncontador = 0\nfor letra in cadena\n    if letra.lower in vocales:\n        contador + 1\nprint(\"Número de vocales en la cadena: \" contador)\n#Ejercicio 8: Funcion para repetir cadenas.\n#Cantidad de errores: 3\ndef repetir_cadena(cadena, veces):",
        "detail": "examen",
        "documentation": {}
    },
    {
        "label": "vocales",
        "kind": 5,
        "importPath": "examen",
        "description": "examen",
        "peekOfCode": "vocales = \"aeiou\"\ncontador = 0\nfor letra in cadena\n    if letra.lower in vocales:\n        contador + 1\nprint(\"Número de vocales en la cadena: \" contador)\n#Ejercicio 8: Funcion para repetir cadenas.\n#Cantidad de errores: 3\ndef repetir_cadena(cadena, veces):\n    resultado = cadena * veces",
        "detail": "examen",
        "documentation": {}
    },
    {
        "label": "contador",
        "kind": 5,
        "importPath": "examen",
        "description": "examen",
        "peekOfCode": "contador = 0\nfor letra in cadena\n    if letra.lower in vocales:\n        contador + 1\nprint(\"Número de vocales en la cadena: \" contador)\n#Ejercicio 8: Funcion para repetir cadenas.\n#Cantidad de errores: 3\ndef repetir_cadena(cadena, veces):\n    resultado = cadena * veces\n    return ",
        "detail": "examen",
        "documentation": {}
    },
    {
        "label": "texto",
        "kind": 5,
        "importPath": "examen",
        "description": "examen",
        "peekOfCode": "texto = input(\"Ingrese un texto: \")\nrepeticiones = input(\"¿Cuántas veces desea repetir el texto? \")\nprint(f\"El texto repetido es: {repetir_cadena}\")\n#Ejercicio 9: Crear una clase llamada Persona.\n#Crea tres instancias de la clase persona:\n# Gaspar, 23, Profesor.\n# Diego, 45, Desarrollador de Software.\n# Tu nombre, tu edad, tu profesion.\n# Crea metodos para imprimir el nombre, la edad y la profesion de cada persona.\n# Crea un metodo para saber si la persona es mayor o menor de edad.",
        "detail": "examen",
        "documentation": {}
    },
    {
        "label": "repeticiones",
        "kind": 5,
        "importPath": "examen",
        "description": "examen",
        "peekOfCode": "repeticiones = input(\"¿Cuántas veces desea repetir el texto? \")\nprint(f\"El texto repetido es: {repetir_cadena}\")\n#Ejercicio 9: Crear una clase llamada Persona.\n#Crea tres instancias de la clase persona:\n# Gaspar, 23, Profesor.\n# Diego, 45, Desarrollador de Software.\n# Tu nombre, tu edad, tu profesion.\n# Crea metodos para imprimir el nombre, la edad y la profesion de cada persona.\n# Crea un metodo para saber si la persona es mayor o menor de edad.",
        "detail": "examen",
        "documentation": {}
    },
    {
        "label": "nombre",
        "kind": 5,
        "importPath": "examen1",
        "description": "examen1",
        "peekOfCode": "nombre = input(\"Ingrese su nombre:\")\nprint =(f\"Hola, {nombre}¡Bienvenido!\")",
        "detail": "examen1",
        "documentation": {}
    },
    {
        "label": "num1",
        "kind": 5,
        "importPath": "examen2",
        "description": "examen2",
        "peekOfCode": "num1 = input(\"Ingrese el primer numero: \")\nnum2 = input(\"Ingrese el segundo numero: \")\nnum3 = input(\"Ingrese el tercer numero: \")\nPROMEDIO = num1 + num2 + num3 / 3\nprint(f\"El promedio es: {promedio}\")",
        "detail": "examen2",
        "documentation": {}
    },
    {
        "label": "num2",
        "kind": 5,
        "importPath": "examen2",
        "description": "examen2",
        "peekOfCode": "num2 = input(\"Ingrese el segundo numero: \")\nnum3 = input(\"Ingrese el tercer numero: \")\nPROMEDIO = num1 + num2 + num3 / 3\nprint(f\"El promedio es: {promedio}\")",
        "detail": "examen2",
        "documentation": {}
    },
    {
        "label": "num3",
        "kind": 5,
        "importPath": "examen2",
        "description": "examen2",
        "peekOfCode": "num3 = input(\"Ingrese el tercer numero: \")\nPROMEDIO = num1 + num2 + num3 / 3\nprint(f\"El promedio es: {promedio}\")",
        "detail": "examen2",
        "documentation": {}
    },
    {
        "label": "PROMEDIO",
        "kind": 5,
        "importPath": "examen2",
        "description": "examen2",
        "peekOfCode": "PROMEDIO = num1 + num2 + num3 / 3\nprint(f\"El promedio es: {promedio}\")",
        "detail": "examen2",
        "documentation": {}
    },
    {
        "label": "calificacion",
        "kind": 5,
        "importPath": "examen3",
        "description": "examen3",
        "peekOfCode": "calificacion = float(input(\"Ingrese la calificacion del estudiante:\"))\nif calificacion >= 6:\n    texto = \"El estudiante ha aprobado\"\nelse:\n    texto = \"El estudiante ha reprobado\"\nprint(texto)",
        "detail": "examen3",
        "documentation": {}
    },
    {
        "label": "lista_compras",
        "kind": 5,
        "importPath": "examen4",
        "description": "examen4",
        "peekOfCode": "lista_compras = []\nwhile True:\n    item = input(\"Ingrese un artículo para agregar a la lista (o 'salir' para terminar): \")\n    if item.lower() == 'salir':  # Convierte a minúsculas para evitar problemas con mayúsculas\n        break\n    lista_compras.append(item)\nprint(\"Lista de compras:\")\nfor item in lista_compras:  # Iterar directamente sobre la lista\n    print(f\"- {item}\")",
        "detail": "examen4",
        "documentation": {}
    },
    {
        "label": "circulo",
        "kind": 6,
        "importPath": "examen5",
        "description": "examen5",
        "peekOfCode": "class circulo:\n    def __init__(self,radio):\n        self.radio = radio \n    def calcular_area(self):\n        return 31416 * self.radio ** 2\nmi_circulo = circulo(5)\nprint(f\"El area del circulo es: {mi_circulo.calcular_area()}\")\n# este ejercicio esta perfecto",
        "detail": "examen5",
        "documentation": {}
    },
    {
        "label": "mi_circulo",
        "kind": 5,
        "importPath": "examen5",
        "description": "examen5",
        "peekOfCode": "mi_circulo = circulo(5)\nprint(f\"El area del circulo es: {mi_circulo.calcular_area()}\")\n# este ejercicio esta perfecto",
        "detail": "examen5",
        "documentation": {}
    },
    {
        "label": "Persona",
        "kind": 6,
        "importPath": "examen9",
        "description": "examen9",
        "peekOfCode": "class Persona:\n    def __init__(self, nombre, edad, profesion):\n        self.nombre = nombre\n        self.edad = edad\n        self.profesion = profesion\n        def imprimir(self):\n            print(f\"Nombre: {self.nombre}, Edad: {self.edad}, Profesión: {self.profesion}\")\n    def es_mayor_de_edad(self):\n        if self.edad >= 18:\n            return \"Es mayor de edad\"",
        "detail": "examen9",
        "documentation": {}
    },
    {
        "label": "escuchar",
        "kind": 2,
        "importPath": "funciones (2)",
        "description": "funciones (2)",
        "peekOfCode": "def escuchar():\n    r = sr.Recognizer()\n    with sr.Microphone() as source:\n        print(\"Hable (tiene 10 segundos): \")\n        r.adjust_for_ambient_noise(source)\n        audio = r.listen(source, timeout=10, phrase_time_limit=10)\n        try:\n            prompt = r.recognize_google(audio, language='es-ES')\n            print(f\"Dijiste: {prompt}\")\n            return prompt",
        "detail": "funciones (2)",
        "documentation": {}
    },
    {
        "label": "hablar",
        "kind": 2,
        "importPath": "funciones (2)",
        "description": "funciones (2)",
        "peekOfCode": "def hablar(texto):\n    engine = pyttsx3.init()\n    engine.say(texto)\n    engine.runAndWait()\ndef interactuar_con_ia(prompt):\n    if prompt is None:\n        return \"No se pudo obtener un prompt válido.\"\n    client = Groq(\n        api_key=\"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\",\n    )",
        "detail": "funciones (2)",
        "documentation": {}
    },
    {
        "label": "interactuar_con_ia",
        "kind": 2,
        "importPath": "funciones (2)",
        "description": "funciones (2)",
        "peekOfCode": "def interactuar_con_ia(prompt):\n    if prompt is None:\n        return \"No se pudo obtener un prompt válido.\"\n    client = Groq(\n        api_key=\"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\",\n    )\n    chat_completion = client.chat.completions.create(\n        messages=[\n            {\n                \"role\": \"user\",",
        "detail": "funciones (2)",
        "documentation": {}
    },
    {
        "label": "numer",
        "kind": 2,
        "importPath": "funciones (2)",
        "description": "funciones (2)",
        "peekOfCode": "def numero (texto_input:str|None= \"Ingrese un numero:\")-> int:\n    \"\"\"\n    Funcion para ingresar y validar un numero, \\n\n    texto_input muestra el mensaje por consola\n    \"\"\"\n    while True:\n        numero_1 = input (texto_input)\n        if numero_1.isdigit():\n            numero_1 = int(numero_1)\n            return numero_1",
        "detail": "funciones (2)",
        "documentation": {}
    },
    {
        "label": "saludo",
        "kind": 2,
        "importPath": "funciones (2)",
        "description": "funciones (2)",
        "peekOfCode": "def saludo(nombre:str, apellido:str | None = \" \")->str:\n    print(f\"Hola {nombre}{apellido}\")\n    return \n#Ejemplo 2: Calcular el área de un cuadrado:\ndef area (lado:int | None = 0)->int:\n    return  lado**2\ndef suma(n_1:int ,n_2:int , n_3:int | None = 0,n_4:int | None = 0)->int:\n    \"\"\"\n    Funcion para sumar hasta 4 numeros, en caso de que no se especifique alguno de los 4 se colocará un 0 \\n si o si, deberas especificar al menos dos parametros.\n    \"\"\"",
        "detail": "funciones (2)",
        "documentation": {}
    },
    {
        "label": "are",
        "kind": 2,
        "importPath": "funciones (2)",
        "description": "funciones (2)",
        "peekOfCode": "def area (lado:int | None = 0)->int:\n    return  lado**2\ndef suma(n_1:int ,n_2:int , n_3:int | None = 0,n_4:int | None = 0)->int:\n    \"\"\"\n    Funcion para sumar hasta 4 numeros, en caso de que no se especifique alguno de los 4 se colocará un 0 \\n si o si, deberas especificar al menos dos parametros.\n    \"\"\"\n    return n_1+n_2+n_3+n_4\ndef resta(n_1:int | None = 0,n_2:int | None = 0,n_3:int | None = 0,n_4:int | None = 0)->int:\n    \"\"\"\n    Funcion para restar hasta 4 numeros, en caso de que no se especifique alguno de los 4 se colocará un 0",
        "detail": "funciones (2)",
        "documentation": {}
    },
    {
        "label": "suma",
        "kind": 2,
        "importPath": "funciones (2)",
        "description": "funciones (2)",
        "peekOfCode": "def suma(n_1:int ,n_2:int , n_3:int | None = 0,n_4:int | None = 0)->int:\n    \"\"\"\n    Funcion para sumar hasta 4 numeros, en caso de que no se especifique alguno de los 4 se colocará un 0 \\n si o si, deberas especificar al menos dos parametros.\n    \"\"\"\n    return n_1+n_2+n_3+n_4\ndef resta(n_1:int | None = 0,n_2:int | None = 0,n_3:int | None = 0,n_4:int | None = 0)->int:\n    \"\"\"\n    Funcion para restar hasta 4 numeros, en caso de que no se especifique alguno de los 4 se colocará un 0\n    \"\"\"\n    return n_1-n_2-n_3-n_4",
        "detail": "funciones (2)",
        "documentation": {}
    },
    {
        "label": "resta",
        "kind": 2,
        "importPath": "funciones (2)",
        "description": "funciones (2)",
        "peekOfCode": "def resta(n_1:int | None = 0,n_2:int | None = 0,n_3:int | None = 0,n_4:int | None = 0)->int:\n    \"\"\"\n    Funcion para restar hasta 4 numeros, en caso de que no se especifique alguno de los 4 se colocará un 0\n    \"\"\"\n    return n_1-n_2-n_3-n_4\ndef division(n_1:int | None = 0,n_2:int | None = 0,n_3:int | None = 0)->int:\n    \"\"\"\n    Funcion para dividir, si se especifica con un 1 en el tercer parametro mostrará tambien el resto\n    \"\"\"\n    if n_3 == 1:",
        "detail": "funciones (2)",
        "documentation": {}
    },
    {
        "label": "division",
        "kind": 2,
        "importPath": "funciones (2)",
        "description": "funciones (2)",
        "peekOfCode": "def division(n_1:int | None = 0,n_2:int | None = 0,n_3:int | None = 0)->int:\n    \"\"\"\n    Funcion para dividir, si se especifica con un 1 en el tercer parametro mostrará tambien el resto\n    \"\"\"\n    if n_3 == 1:\n        return  n_1 % n_2\n    else:\n        return n_1 / n_2\n#Funcion para validar un numero\ndef validar_numero()->int:",
        "detail": "funciones (2)",
        "documentation": {}
    },
    {
        "label": "validar_numero",
        "kind": 2,
        "importPath": "funciones (2)",
        "description": "funciones (2)",
        "peekOfCode": "def validar_numero()->int:\n    \"\"\"\n    Esta funcion retorna un int validado. Hasta que no se ingrese un número\n    no va a permitir ingresar otra cosa.\n    \"\"\"\n    while True:\n        numero_a_validar = input(\"Ingrese un número:\")\n        if numero_a_validar.isdigit():\n            numero_a_validar = int(numero_a_validar)\n            break",
        "detail": "funciones (2)",
        "documentation": {}
    },
    {
        "label": "validar_texto",
        "kind": 2,
        "importPath": "funciones (2)",
        "description": "funciones (2)",
        "peekOfCode": "def validar_texto(texto_input:str | None=\"Ingrese un texto: \", validar_vacio : bool| None=False, dato_a_validar :str |None=\"dato\")->str:\n    \"\"\"\n    Valida si es un texto. Se puede validar que no quede el dato vacio y se puede pasar que dato valida para mostrar al usuario\n    \"\"\"\n    while True:\n        texto = input(texto_input)\n        if validar_vacio: \n            if texto ==\"\":\n                print (f\"El {dato_a_validar} no debe quedar vacio!\")       \n            elif texto.isalpha():",
        "detail": "funciones (2)",
        "documentation": {}
    },
    {
        "label": "imprimir_algo",
        "kind": 2,
        "importPath": "funciones",
        "description": "funciones",
        "peekOfCode": "def imprimir_algo(parametro:str):\n    print(parametro)\n    return #si no tiene return es un procedimiento\nimprimir_algo(\"hola mundo\")\nimprimir_algo(\"chau mundo\")\nfor contador in range(10):\n    imprimir_algo(\"hola (contador\")",
        "detail": "funciones",
        "documentation": {}
    },
    {
        "label": "cliente_nuevo",
        "kind": 2,
        "importPath": "funciones_curso2",
        "description": "funciones_curso2",
        "peekOfCode": "def cliente_nuevo():\n    nombre = f.validar_texto(\"Ingrese su nombre: \",True,\"nombre\")\n    apellido = f.validar_texto(\"Ingrese su apellido: \")\n    loclaidad = f.validar_texto(\"Ingrese su localidad: \")\n    provincia = f.validar_texto(\"Ingrese su provincia: \")\n    telefono = f.validar_texto (\"Ingrese su numero de telefono: \")\n    print(\"Los datos del cliente son : \\n\")\n    if not nombre ==\"\":\n        print(f\"nombre: {nombre} \\n\")\n    if not apellido ==\"\":",
        "detail": "funciones_curso2",
        "documentation": {}
    },
    {
        "label": "#numero_1",
        "kind": 5,
        "importPath": "funciones_curso2",
        "description": "funciones_curso2",
        "peekOfCode": "#numero_1 = f.validar_numero()\n#numero_2 = f.validar_numero()\ndef cliente_nuevo():\n    nombre = f.validar_texto(\"Ingrese su nombre: \",True,\"nombre\")\n    apellido = f.validar_texto(\"Ingrese su apellido: \")\n    loclaidad = f.validar_texto(\"Ingrese su localidad: \")\n    provincia = f.validar_texto(\"Ingrese su provincia: \")\n    telefono = f.validar_texto (\"Ingrese su numero de telefono: \")\n    print(\"Los datos del cliente son : \\n\")\n    if not nombre ==\"\":",
        "detail": "funciones_curso2",
        "documentation": {}
    },
    {
        "label": "#numero_2",
        "kind": 5,
        "importPath": "funciones_curso2",
        "description": "funciones_curso2",
        "peekOfCode": "#numero_2 = f.validar_numero()\ndef cliente_nuevo():\n    nombre = f.validar_texto(\"Ingrese su nombre: \",True,\"nombre\")\n    apellido = f.validar_texto(\"Ingrese su apellido: \")\n    loclaidad = f.validar_texto(\"Ingrese su localidad: \")\n    provincia = f.validar_texto(\"Ingrese su provincia: \")\n    telefono = f.validar_texto (\"Ingrese su numero de telefono: \")\n    print(\"Los datos del cliente son : \\n\")\n    if not nombre ==\"\":\n        print(f\"nombre: {nombre} \\n\")",
        "detail": "funciones_curso2",
        "documentation": {}
    },
    {
        "label": "Rectangulo",
        "kind": 6,
        "importPath": "funciones_poo",
        "description": "funciones_poo",
        "peekOfCode": "class Rectangulo: \n    def _init_ (self, alto, ancho):\n        self.alto = alto\n        self.ancho = ancho  \n    def mostrar_caracteristicas(self):\n        print(f\"el rectangulo tiene un ancho {self.ancho}  y un alto {self.alto}\")\n        return\n    def area(self):\n        area = self.alto * self.ancho\n        print(f\" el area es {area}\")",
        "detail": "funciones_poo",
        "documentation": {}
    },
    {
        "label": "mi_Rectangulo",
        "kind": 5,
        "importPath": "funciones_poo",
        "description": "funciones_poo",
        "peekOfCode": "mi_Rectangulo = area (10,25)\nmi_Rectangulo.mostrar_caracteristicas()\nrectangulo_1 = Rectangulo()\nrectangulo_1.mostrar_caracteristicas()\nrectangulo_1.area()\nrectangulo_1.perimetro()",
        "detail": "funciones_poo",
        "documentation": {}
    },
    {
        "label": "rectangulo_1",
        "kind": 5,
        "importPath": "funciones_poo",
        "description": "funciones_poo",
        "peekOfCode": "rectangulo_1 = Rectangulo()\nrectangulo_1.mostrar_caracteristicas()\nrectangulo_1.area()\nrectangulo_1.perimetro()",
        "detail": "funciones_poo",
        "documentation": {}
    },
    {
        "label": "rectangulo",
        "kind": 5,
        "importPath": "funciones_poo_mia",
        "description": "funciones_poo_mia",
        "peekOfCode": "rectangulo = Rectangulo(5, 10)\nprint(\"Área:\", rectangulo.area())           \nprint(\"Perímetro:\", rectangulo.perimetro())",
        "detail": "funciones_poo_mia",
        "documentation": {}
    },
    {
        "label": "ingreso_un_numero",
        "kind": 2,
        "importPath": "funciones_procedimientos1",
        "description": "funciones_procedimientos1",
        "peekOfCode": "def ingreso_un_numero():\n    while True:\n        numero = input (\"ingrese un numero:\")\n        if numero.isdigit():\n            numero = int(numero)\n            if numero > 0:\n                    break\n            else:\n                print(\"Ingrese un numero mayor a 0\")\n        else:",
        "detail": "funciones_procedimientos1",
        "documentation": {}
    },
    {
        "label": "mayor",
        "kind": 5,
        "importPath": "funciones_procedimientos1",
        "description": "funciones_procedimientos1",
        "peekOfCode": "mayor = 0 \nmenor = 0  \nsuma = 0      \nfor contador in range(3):\n    numero = ingreso_un_numero()\n    print(f\"El {contador+1}° N° ingresado es: {numero}\")\n    if numero > mayor:\n       mayor = numero \n    if numero <  menor or menor == 0:\n        menor = numero",
        "detail": "funciones_procedimientos1",
        "documentation": {}
    },
    {
        "label": "menor",
        "kind": 5,
        "importPath": "funciones_procedimientos1",
        "description": "funciones_procedimientos1",
        "peekOfCode": "menor = 0  \nsuma = 0      \nfor contador in range(3):\n    numero = ingreso_un_numero()\n    print(f\"El {contador+1}° N° ingresado es: {numero}\")\n    if numero > mayor:\n       mayor = numero \n    if numero <  menor or menor == 0:\n        menor = numero\n    suma = suma + numero    ",
        "detail": "funciones_procedimientos1",
        "documentation": {}
    },
    {
        "label": "suma",
        "kind": 5,
        "importPath": "funciones_procedimientos1",
        "description": "funciones_procedimientos1",
        "peekOfCode": "suma = 0      \nfor contador in range(3):\n    numero = ingreso_un_numero()\n    print(f\"El {contador+1}° N° ingresado es: {numero}\")\n    if numero > mayor:\n       mayor = numero \n    if numero <  menor or menor == 0:\n        menor = numero\n    suma = suma + numero    \nprint (f\"El numero mayor es {mayor}\")",
        "detail": "funciones_procedimientos1",
        "documentation": {}
    },
    {
        "label": "mayor",
        "kind": 5,
        "importPath": "funciones_procedimientos1",
        "description": "funciones_procedimientos1",
        "peekOfCode": "mayor = numero\nnumero_2 = ingreso_un_numero()\nif numero_2 > mayor:\n    mayor = numero_2\nnumero_3 = ingreso_un_numero()\nif numero_3 > mayor:\n    mayor = numero_3\nprint (f\" El Primer numero ingresado es {numero}\")\nprint (f\" El Segundo numero ingresado es {numero_2}\")\nprint (f\" El Tercer numero ingresado es {numero_3}\")",
        "detail": "funciones_procedimientos1",
        "documentation": {}
    },
    {
        "label": "numero_2",
        "kind": 5,
        "importPath": "funciones_procedimientos1",
        "description": "funciones_procedimientos1",
        "peekOfCode": "numero_2 = ingreso_un_numero()\nif numero_2 > mayor:\n    mayor = numero_2\nnumero_3 = ingreso_un_numero()\nif numero_3 > mayor:\n    mayor = numero_3\nprint (f\" El Primer numero ingresado es {numero}\")\nprint (f\" El Segundo numero ingresado es {numero_2}\")\nprint (f\" El Tercer numero ingresado es {numero_3}\")\nprint (f\"El numero mayor es\")",
        "detail": "funciones_procedimientos1",
        "documentation": {}
    },
    {
        "label": "numero_3",
        "kind": 5,
        "importPath": "funciones_procedimientos1",
        "description": "funciones_procedimientos1",
        "peekOfCode": "numero_3 = ingreso_un_numero()\nif numero_3 > mayor:\n    mayor = numero_3\nprint (f\" El Primer numero ingresado es {numero}\")\nprint (f\" El Segundo numero ingresado es {numero_2}\")\nprint (f\" El Tercer numero ingresado es {numero_3}\")\nprint (f\"El numero mayor es\")",
        "detail": "funciones_procedimientos1",
        "documentation": {}
    },
    {
        "label": "sumar",
        "kind": 2,
        "importPath": "funciones_sumar",
        "description": "funciones_sumar",
        "peekOfCode": "def sumar(numero_1: int, numero_2: int)->int:\n    return numero_1 + numero_2\nprint(sumar)\n#import funciones_sumar as fs\n#funcion para validar un texto\n(#texto_input:str|none)\ndef validar_texto()-> str:\n    while True:\n        texto= input(\"ingrese un texto\") #\n        if not texto.isdigit():",
        "detail": "funciones_sumar",
        "documentation": {}
    },
    {
        "label": "validar_texto",
        "kind": 2,
        "importPath": "funciones_sumar",
        "description": "funciones_sumar",
        "peekOfCode": "def validar_texto()-> str:\n    while True:\n        texto= input(\"ingrese un texto\") #\n        if not texto.isdigit():\n            break\n        else:\n            print(\"Ingrese un texto valido\")\n    return texto\ntextoimprimir = validar_texto() (# ingrese nombre y apellido)\nprint(f\"el texto ingresado es:{textoimprimir}\")",
        "detail": "funciones_sumar",
        "documentation": {}
    },
    {
        "label": "textoimprimir",
        "kind": 5,
        "importPath": "funciones_sumar",
        "description": "funciones_sumar",
        "peekOfCode": "textoimprimir = validar_texto() (# ingrese nombre y apellido)\nprint(f\"el texto ingresado es:{textoimprimir}\")",
        "detail": "funciones_sumar",
        "documentation": {}
    },
    {
        "label": "client",
        "kind": 5,
        "importPath": "import_mayordomo",
        "description": "import_mayordomo",
        "peekOfCode": "client = Groq(\n    api_key=\"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\",\n)\nmotor = pyttsx3.init()\nr = sr.Recognizer()\n# Ajustar el umbral de energía para ser más sensible al habla\nr.energy_threshold = 3000  # Valor por defecto es 3000, ajusta según sea necesario\n# Ajustar el umbral de pausa para responder más rápidamente\nr.pause_threshold = 0.5  # Valor por defecto es 0.5 segundos, ajusta según sea necesario\n# Ajustar el tiempo de espera para la operación de escucha (opcional)",
        "detail": "import_mayordomo",
        "documentation": {}
    },
    {
        "label": "motor",
        "kind": 5,
        "importPath": "import_mayordomo",
        "description": "import_mayordomo",
        "peekOfCode": "motor = pyttsx3.init()\nr = sr.Recognizer()\n# Ajustar el umbral de energía para ser más sensible al habla\nr.energy_threshold = 3000  # Valor por defecto es 3000, ajusta según sea necesario\n# Ajustar el umbral de pausa para responder más rápidamente\nr.pause_threshold = 0.5  # Valor por defecto es 0.5 segundos, ajusta según sea necesario\n# Ajustar el tiempo de espera para la operación de escucha (opcional)\nr.operation_timeout = 5  # 5 segundos de tiempo de espera, ajusta según sea necesario\n# Palabra clave para activar y comando para terminar\n# Lista de palabras o frases clave para despertar al asistente",
        "detail": "import_mayordomo",
        "documentation": {}
    },
    {
        "label": "r",
        "kind": 5,
        "importPath": "import_mayordomo",
        "description": "import_mayordomo",
        "peekOfCode": "r = sr.Recognizer()\n# Ajustar el umbral de energía para ser más sensible al habla\nr.energy_threshold = 3000  # Valor por defecto es 3000, ajusta según sea necesario\n# Ajustar el umbral de pausa para responder más rápidamente\nr.pause_threshold = 0.5  # Valor por defecto es 0.5 segundos, ajusta según sea necesario\n# Ajustar el tiempo de espera para la operación de escucha (opcional)\nr.operation_timeout = 5  # 5 segundos de tiempo de espera, ajusta según sea necesario\n# Palabra clave para activar y comando para terminar\n# Lista de palabras o frases clave para despertar al asistente\npalabras_clave = [\"mayordomo\", \"asistente\", \"despertate\", \"dame bola\", \"IA\", \"computadora\", \"esclavo\", \"amor\"]",
        "detail": "import_mayordomo",
        "documentation": {}
    },
    {
        "label": "r.energy_threshold",
        "kind": 5,
        "importPath": "import_mayordomo",
        "description": "import_mayordomo",
        "peekOfCode": "r.energy_threshold = 3000  # Valor por defecto es 3000, ajusta según sea necesario\n# Ajustar el umbral de pausa para responder más rápidamente\nr.pause_threshold = 0.5  # Valor por defecto es 0.5 segundos, ajusta según sea necesario\n# Ajustar el tiempo de espera para la operación de escucha (opcional)\nr.operation_timeout = 5  # 5 segundos de tiempo de espera, ajusta según sea necesario\n# Palabra clave para activar y comando para terminar\n# Lista de palabras o frases clave para despertar al asistente\npalabras_clave = [\"mayordomo\", \"asistente\", \"despertate\", \"dame bola\", \"IA\", \"computadora\", \"esclavo\", \"amor\"]\nprint(f\"amo.. Di alguna de estas palabras para despertarme: {', '.join(palabras_clave)}\")\nmotor.say(f\"amo.. Di alguna de estas palabras para activarme: {', '.join(palabras_clave)}\")",
        "detail": "import_mayordomo",
        "documentation": {}
    },
    {
        "label": "r.pause_threshold",
        "kind": 5,
        "importPath": "import_mayordomo",
        "description": "import_mayordomo",
        "peekOfCode": "r.pause_threshold = 0.5  # Valor por defecto es 0.5 segundos, ajusta según sea necesario\n# Ajustar el tiempo de espera para la operación de escucha (opcional)\nr.operation_timeout = 5  # 5 segundos de tiempo de espera, ajusta según sea necesario\n# Palabra clave para activar y comando para terminar\n# Lista de palabras o frases clave para despertar al asistente\npalabras_clave = [\"mayordomo\", \"asistente\", \"despertate\", \"dame bola\", \"IA\", \"computadora\", \"esclavo\", \"amor\"]\nprint(f\"amo.. Di alguna de estas palabras para despertarme: {', '.join(palabras_clave)}\")\nmotor.say(f\"amo.. Di alguna de estas palabras para activarme: {', '.join(palabras_clave)}\")\nmotor.runAndWait()\ncomandos_terminacion = [\"terminar\", \"salir\", \"finalizar\", \"cerrar\", \"exit\", \"end\", \"stop\", \"quit\", \"close\", \"finish\", \"leave\", \"bye\", \"adios\", \"adiós\", \"chao\",  \"chau\",\"hasta luego\", \"hasta la vista\", \"nos vemos\", \"hasta pronto\", \"hasta mañana\", \"hasta la próxima\", \"hasta la otra\", \"hasta la otra semana\", \"hasta la otra vez\", \"hasta la otra ocasión\", \"nos vemos\", \"listo\"]",
        "detail": "import_mayordomo",
        "documentation": {}
    },
    {
        "label": "r.operation_timeout",
        "kind": 5,
        "importPath": "import_mayordomo",
        "description": "import_mayordomo",
        "peekOfCode": "r.operation_timeout = 5  # 5 segundos de tiempo de espera, ajusta según sea necesario\n# Palabra clave para activar y comando para terminar\n# Lista de palabras o frases clave para despertar al asistente\npalabras_clave = [\"mayordomo\", \"asistente\", \"despertate\", \"dame bola\", \"IA\", \"computadora\", \"esclavo\", \"amor\"]\nprint(f\"amo.. Di alguna de estas palabras para despertarme: {', '.join(palabras_clave)}\")\nmotor.say(f\"amo.. Di alguna de estas palabras para activarme: {', '.join(palabras_clave)}\")\nmotor.runAndWait()\ncomandos_terminacion = [\"terminar\", \"salir\", \"finalizar\", \"cerrar\", \"exit\", \"end\", \"stop\", \"quit\", \"close\", \"finish\", \"leave\", \"bye\", \"adios\", \"adiós\", \"chao\",  \"chau\",\"hasta luego\", \"hasta la vista\", \"nos vemos\", \"hasta pronto\", \"hasta mañana\", \"hasta la próxima\", \"hasta la otra\", \"hasta la otra semana\", \"hasta la otra vez\", \"hasta la otra ocasión\", \"nos vemos\", \"listo\"]\n# Esperar palabra clave para activar\nwhile True:",
        "detail": "import_mayordomo",
        "documentation": {}
    },
    {
        "label": "palabras_clave",
        "kind": 5,
        "importPath": "import_mayordomo",
        "description": "import_mayordomo",
        "peekOfCode": "palabras_clave = [\"mayordomo\", \"asistente\", \"despertate\", \"dame bola\", \"IA\", \"computadora\", \"esclavo\", \"amor\"]\nprint(f\"amo.. Di alguna de estas palabras para despertarme: {', '.join(palabras_clave)}\")\nmotor.say(f\"amo.. Di alguna de estas palabras para activarme: {', '.join(palabras_clave)}\")\nmotor.runAndWait()\ncomandos_terminacion = [\"terminar\", \"salir\", \"finalizar\", \"cerrar\", \"exit\", \"end\", \"stop\", \"quit\", \"close\", \"finish\", \"leave\", \"bye\", \"adios\", \"adiós\", \"chao\",  \"chau\",\"hasta luego\", \"hasta la vista\", \"nos vemos\", \"hasta pronto\", \"hasta mañana\", \"hasta la próxima\", \"hasta la otra\", \"hasta la otra semana\", \"hasta la otra vez\", \"hasta la otra ocasión\", \"nos vemos\", \"listo\"]\n# Esperar palabra clave para activar\nwhile True:\n    for countdown in range(5, 0, -1):\n        print(f\"Abriendo micrófono en {countdown} segundos...\", end='\\r')\n        time.sleep(1)",
        "detail": "import_mayordomo",
        "documentation": {}
    },
    {
        "label": "comandos_terminacion",
        "kind": 5,
        "importPath": "import_mayordomo",
        "description": "import_mayordomo",
        "peekOfCode": "comandos_terminacion = [\"terminar\", \"salir\", \"finalizar\", \"cerrar\", \"exit\", \"end\", \"stop\", \"quit\", \"close\", \"finish\", \"leave\", \"bye\", \"adios\", \"adiós\", \"chao\",  \"chau\",\"hasta luego\", \"hasta la vista\", \"nos vemos\", \"hasta pronto\", \"hasta mañana\", \"hasta la próxima\", \"hasta la otra\", \"hasta la otra semana\", \"hasta la otra vez\", \"hasta la otra ocasión\", \"nos vemos\", \"listo\"]\n# Esperar palabra clave para activar\nwhile True:\n    for countdown in range(5, 0, -1):\n        print(f\"Abriendo micrófono en {countdown} segundos...\", end='\\r')\n        time.sleep(1)\n    print(\"Escuchando palabra clave...\")\n    with sr.Microphone() as source:\n        try:\n            audio = r.listen(source, timeout=5, phrase_time_limit=5)",
        "detail": "import_mayordomo",
        "documentation": {}
    },
    {
        "label": "contador",
        "kind": 5,
        "importPath": "import_mayordomo",
        "description": "import_mayordomo",
        "peekOfCode": "contador = 0\nwhile True:\n    if contador == 0:\n        print(\"Por favor ama, dígame qué desea saber: \")\n        motor.say(\"Por favor, dígame qué desea saber: \")\n        motor.runAndWait()\n        contador = 1\n    else:\n        print(\" Ama, ¿hay algo más en lo que pueda ayudarle?\")\n        motor.say(\"Ama, ¿hay algo más en lo que pueda ayudarle?\")",
        "detail": "import_mayordomo",
        "documentation": {}
    },
    {
        "label": "texto",
        "kind": 5,
        "importPath": "Ingresar Texto V1",
        "description": "Ingresar Texto V1",
        "peekOfCode": "texto = \"\"\ntexto = input(\"Ingrese el texto: \")\ncantidad_caracteres = int(len(texto))\nprint(\"\\n\"*50) #limpio la pantalla para la nueva presentacion\nif texto.isalpha and texto.islower() and cantidad_caracteres <20:\n    texto = texto.upper() #transformo la frase a Mayuscula\"\n    espacios = (\" \"*(51- cantidad_caracteres))\n    print(\"\")\n    print(\"#\"*80)\n    print(\"######                                                                    ######\")",
        "detail": "Ingresar Texto V1",
        "documentation": {}
    },
    {
        "label": "texto",
        "kind": 5,
        "importPath": "Ingresar Texto V1",
        "description": "Ingresar Texto V1",
        "peekOfCode": "texto = input(\"Ingrese el texto: \")\ncantidad_caracteres = int(len(texto))\nprint(\"\\n\"*50) #limpio la pantalla para la nueva presentacion\nif texto.isalpha and texto.islower() and cantidad_caracteres <20:\n    texto = texto.upper() #transformo la frase a Mayuscula\"\n    espacios = (\" \"*(51- cantidad_caracteres))\n    print(\"\")\n    print(\"#\"*80)\n    print(\"######                                                                    ######\")\n    print(\"######      Su texto a sido trascripto a mayuscula                        ###### \")",
        "detail": "Ingresar Texto V1",
        "documentation": {}
    },
    {
        "label": "cantidad_caracteres",
        "kind": 5,
        "importPath": "Ingresar Texto V1",
        "description": "Ingresar Texto V1",
        "peekOfCode": "cantidad_caracteres = int(len(texto))\nprint(\"\\n\"*50) #limpio la pantalla para la nueva presentacion\nif texto.isalpha and texto.islower() and cantidad_caracteres <20:\n    texto = texto.upper() #transformo la frase a Mayuscula\"\n    espacios = (\" \"*(51- cantidad_caracteres))\n    print(\"\")\n    print(\"#\"*80)\n    print(\"######                                                                    ######\")\n    print(\"######      Su texto a sido trascripto a mayuscula                        ###### \")\n    print(\"######                                                                    ######\")",
        "detail": "Ingresar Texto V1",
        "documentation": {}
    },
    {
        "label": "cuadrados",
        "kind": 5,
        "importPath": "join_map",
        "description": "join_map",
        "peekOfCode": "cuadrados = (x**2 for x in range(10))\nprint(\",\".join(map(str, cuadrados)))",
        "detail": "join_map",
        "documentation": {}
    },
    {
        "label": "sumar",
        "kind": 5,
        "importPath": "lambda",
        "description": "lambda",
        "peekOfCode": "sumar = lambda a,b : a + b\nprint(sumar(5,3))",
        "detail": "lambda",
        "documentation": {}
    },
    {
        "label": "productos",
        "kind": 5,
        "importPath": "listas4_6",
        "description": "listas4_6",
        "peekOfCode": "productos = [\"manzanas\",\"pan\",\"leche\",\"huevos\",\"zapallo\",\"lechuga\"]\nnuevo_producto = \"queso\"\nproductos.append(nuevo_producto)\nproducto_a_eliminar = \"pan\"\nif producto_a_eliminar in productos:\n    productos.remove(producto_a_eliminar)\nprint(\"lista de productos actualizada\",productos)",
        "detail": "listas4_6",
        "documentation": {}
    },
    {
        "label": "nuevo_producto",
        "kind": 5,
        "importPath": "listas4_6",
        "description": "listas4_6",
        "peekOfCode": "nuevo_producto = \"queso\"\nproductos.append(nuevo_producto)\nproducto_a_eliminar = \"pan\"\nif producto_a_eliminar in productos:\n    productos.remove(producto_a_eliminar)\nprint(\"lista de productos actualizada\",productos)",
        "detail": "listas4_6",
        "documentation": {}
    },
    {
        "label": "producto_a_eliminar",
        "kind": 5,
        "importPath": "listas4_6",
        "description": "listas4_6",
        "peekOfCode": "producto_a_eliminar = \"pan\"\nif producto_a_eliminar in productos:\n    productos.remove(producto_a_eliminar)\nprint(\"lista de productos actualizada\",productos)",
        "detail": "listas4_6",
        "documentation": {}
    },
    {
        "label": "lista_1",
        "kind": 5,
        "importPath": "lista_1 = [1.2.3]",
        "description": "lista_1 = [1.2.3]",
        "peekOfCode": "lista_1 = [1,2,3]\nlista_2 = lista_1.copy()\nlista_1.append(3)\nprint(len(lista_2))",
        "detail": "lista_1 = [1.2.3]",
        "documentation": {}
    },
    {
        "label": "lista_2",
        "kind": 5,
        "importPath": "lista_1 = [1.2.3]",
        "description": "lista_1 = [1.2.3]",
        "peekOfCode": "lista_2 = lista_1.copy()\nlista_1.append(3)\nprint(len(lista_2))",
        "detail": "lista_1 = [1.2.3]",
        "documentation": {}
    },
    {
        "label": "nombre_a_buscar",
        "kind": 5,
        "importPath": "lista_ejercicios1",
        "description": "lista_ejercicios1",
        "peekOfCode": "nombre_a_buscar = \"paula\"\nif nombre_a_buscar in lista_nombres:\n    print(f\" el nombre {nombre_a_buscar} está presente en la lista.\")\nelse:\n    print(f\" el nombre {nombre_a_buscar} no está presente en la lista.\")\nlista_nombres.sort()\nprint(\"lista ordenada alfabeticamente:\" ,lista_nombres)",
        "detail": "lista_ejercicios1",
        "documentation": {}
    },
    {
        "label": "palabras",
        "kind": 5,
        "importPath": "lista_ejercicios3",
        "description": "lista_ejercicios3",
        "peekOfCode": "palabras = [\"adivinanza\",\"palas\",\"camarero\",\"reloj\",\"tias\",\"celular\",\"reloj\"]\nprint(palabras.count('reloj'))\npalabras.reverse()\nprint(palabras)\npalabras = [\"adivinanza\",\"palas\",\"camarero\",\"reloj\",\"tias\",\"celular\",\"reloj\"]\nterminos = [\"teclado\",\"curso\",\"operadores\",\"listas\"]\nlista_concatenada = palabras + terminos\nprint(lista_concatenada)\npalabras = [\"adivinanza\",\"palas\",\"camarero\",\"reloj\",\"tias\",\"celular\",\"reloj\"]\nmitad =len(palabras) // 2",
        "detail": "lista_ejercicios3",
        "documentation": {}
    },
    {
        "label": "palabras",
        "kind": 5,
        "importPath": "lista_ejercicios3",
        "description": "lista_ejercicios3",
        "peekOfCode": "palabras = [\"adivinanza\",\"palas\",\"camarero\",\"reloj\",\"tias\",\"celular\",\"reloj\"]\nterminos = [\"teclado\",\"curso\",\"operadores\",\"listas\"]\nlista_concatenada = palabras + terminos\nprint(lista_concatenada)\npalabras = [\"adivinanza\",\"palas\",\"camarero\",\"reloj\",\"tias\",\"celular\",\"reloj\"]\nmitad =len(palabras) // 2\nsublista1 = palabras[:mitad]\nsublista2 = palabras[mitad]\nprint(f'sublista 1:{sublista1}')\nprint(f'Sublista 2:{sublista2}')",
        "detail": "lista_ejercicios3",
        "documentation": {}
    },
    {
        "label": "terminos",
        "kind": 5,
        "importPath": "lista_ejercicios3",
        "description": "lista_ejercicios3",
        "peekOfCode": "terminos = [\"teclado\",\"curso\",\"operadores\",\"listas\"]\nlista_concatenada = palabras + terminos\nprint(lista_concatenada)\npalabras = [\"adivinanza\",\"palas\",\"camarero\",\"reloj\",\"tias\",\"celular\",\"reloj\"]\nmitad =len(palabras) // 2\nsublista1 = palabras[:mitad]\nsublista2 = palabras[mitad]\nprint(f'sublista 1:{sublista1}')\nprint(f'Sublista 2:{sublista2}')",
        "detail": "lista_ejercicios3",
        "documentation": {}
    },
    {
        "label": "lista_concatenada",
        "kind": 5,
        "importPath": "lista_ejercicios3",
        "description": "lista_ejercicios3",
        "peekOfCode": "lista_concatenada = palabras + terminos\nprint(lista_concatenada)\npalabras = [\"adivinanza\",\"palas\",\"camarero\",\"reloj\",\"tias\",\"celular\",\"reloj\"]\nmitad =len(palabras) // 2\nsublista1 = palabras[:mitad]\nsublista2 = palabras[mitad]\nprint(f'sublista 1:{sublista1}')\nprint(f'Sublista 2:{sublista2}')",
        "detail": "lista_ejercicios3",
        "documentation": {}
    },
    {
        "label": "palabras",
        "kind": 5,
        "importPath": "lista_ejercicios3",
        "description": "lista_ejercicios3",
        "peekOfCode": "palabras = [\"adivinanza\",\"palas\",\"camarero\",\"reloj\",\"tias\",\"celular\",\"reloj\"]\nmitad =len(palabras) // 2\nsublista1 = palabras[:mitad]\nsublista2 = palabras[mitad]\nprint(f'sublista 1:{sublista1}')\nprint(f'Sublista 2:{sublista2}')",
        "detail": "lista_ejercicios3",
        "documentation": {}
    },
    {
        "label": "sublista1",
        "kind": 5,
        "importPath": "lista_ejercicios3",
        "description": "lista_ejercicios3",
        "peekOfCode": "sublista1 = palabras[:mitad]\nsublista2 = palabras[mitad]\nprint(f'sublista 1:{sublista1}')\nprint(f'Sublista 2:{sublista2}')",
        "detail": "lista_ejercicios3",
        "documentation": {}
    },
    {
        "label": "sublista2",
        "kind": 5,
        "importPath": "lista_ejercicios3",
        "description": "lista_ejercicios3",
        "peekOfCode": "sublista2 = palabras[mitad]\nprint(f'sublista 1:{sublista1}')\nprint(f'Sublista 2:{sublista2}')",
        "detail": "lista_ejercicios3",
        "documentation": {}
    },
    {
        "label": "regalos",
        "kind": 5,
        "importPath": "lista_numeros",
        "description": "lista_numeros",
        "peekOfCode": "regalos = ['sartén', 'jamón', 'mp4', 'muñeca', 'tv', 'patín', 'balón', 'reloj', 'bicicleta', 'anillo']\nfor sorteo in range(5):\n    regalo = regalos[random.randint(0, 9)]\n    print('Sorteo', sorteo + 1, ':', regalo)",
        "detail": "lista_numeros",
        "documentation": {}
    },
    {
        "label": "mi_lista",
        "kind": 5,
        "importPath": "lista_vacia",
        "description": "lista_vacia",
        "peekOfCode": "mi_lista = []\n# Agregar 5 elementos usando append\nmi_lista.append(10)\nmi_lista.append(20)\nmi_lista.append(30)\nmi_lista.append(40)\nmi_lista.append(50)\n# Imprimir la longitud de la lista\nprint(\"Longitud de la lista:\", len(mi_lista))\n# Eliminar el último elemento usando pop",
        "detail": "lista_vacia",
        "documentation": {}
    },
    {
        "label": "USUARIO",
        "kind": 5,
        "importPath": "login",
        "description": "login",
        "peekOfCode": "USUARIO = \"Diego\" \nPASSWORD = \"Diego*123\"\ncontador = 0\nwhile True:\n    ingrese_usuario = input(\"Ingrese el usuario a continuacion:\")\n    ingrese_pass = input(\"Ingrese el contraseña a continuacion:\")\n    if USUARIO == ingrese_usuario and PASSWORD == ingrese_pass:\n        print(\"Bienvenido Usuario\")\n        break \n    else:",
        "detail": "login",
        "documentation": {}
    },
    {
        "label": "PASSWORD",
        "kind": 5,
        "importPath": "login",
        "description": "login",
        "peekOfCode": "PASSWORD = \"Diego*123\"\ncontador = 0\nwhile True:\n    ingrese_usuario = input(\"Ingrese el usuario a continuacion:\")\n    ingrese_pass = input(\"Ingrese el contraseña a continuacion:\")\n    if USUARIO == ingrese_usuario and PASSWORD == ingrese_pass:\n        print(\"Bienvenido Usuario\")\n        break \n    else:\n        print(\"Alguno de los Datos ingresados es incorrecto.\")",
        "detail": "login",
        "documentation": {}
    },
    {
        "label": "contador",
        "kind": 5,
        "importPath": "login",
        "description": "login",
        "peekOfCode": "contador = 0\nwhile True:\n    ingrese_usuario = input(\"Ingrese el usuario a continuacion:\")\n    ingrese_pass = input(\"Ingrese el contraseña a continuacion:\")\n    if USUARIO == ingrese_usuario and PASSWORD == ingrese_pass:\n        print(\"Bienvenido Usuario\")\n        break \n    else:\n        print(\"Alguno de los Datos ingresados es incorrecto.\")\n        contador += 1",
        "detail": "login",
        "documentation": {}
    },
    {
        "label": "client",
        "kind": 5,
        "importPath": "mayordomo (2)",
        "description": "mayordomo (2)",
        "peekOfCode": "client = Groq(\n)\nmotor = pyttsx3.init()\nr = sr.Recognizer()\n# Ajustar el umbral de energía para ser más sensible al habla\nr.energy_threshold = 3000  # Valor por defecto es 3000, ajusta según sea necesario\n# Ajustar el umbral de pausa para responder más rápidamente\nr.pause_threshold = 0.5  # Valor por defecto es 0.5 segundos, ajusta según sea necesario\n# Ajustar el tiempo de espera para la operación de escucha (opcional)\nr.operation_timeout = 5  # 5 segundos de tiempo de espera, ajusta según sea necesario",
        "detail": "mayordomo (2)",
        "documentation": {}
    },
    {
        "label": "motor",
        "kind": 5,
        "importPath": "mayordomo (2)",
        "description": "mayordomo (2)",
        "peekOfCode": "motor = pyttsx3.init()\nr = sr.Recognizer()\n# Ajustar el umbral de energía para ser más sensible al habla\nr.energy_threshold = 3000  # Valor por defecto es 3000, ajusta según sea necesario\n# Ajustar el umbral de pausa para responder más rápidamente\nr.pause_threshold = 0.5  # Valor por defecto es 0.5 segundos, ajusta según sea necesario\n# Ajustar el tiempo de espera para la operación de escucha (opcional)\nr.operation_timeout = 5  # 5 segundos de tiempo de espera, ajusta según sea necesario\n# Palabra clave para activar y comando para terminar\n# Lista de palabras o frases clave para despertar al asistente",
        "detail": "mayordomo (2)",
        "documentation": {}
    },
    {
        "label": "r",
        "kind": 5,
        "importPath": "mayordomo (2)",
        "description": "mayordomo (2)",
        "peekOfCode": "r = sr.Recognizer()\n# Ajustar el umbral de energía para ser más sensible al habla\nr.energy_threshold = 3000  # Valor por defecto es 3000, ajusta según sea necesario\n# Ajustar el umbral de pausa para responder más rápidamente\nr.pause_threshold = 0.5  # Valor por defecto es 0.5 segundos, ajusta según sea necesario\n# Ajustar el tiempo de espera para la operación de escucha (opcional)\nr.operation_timeout = 5  # 5 segundos de tiempo de espera, ajusta según sea necesario\n# Palabra clave para activar y comando para terminar\n# Lista de palabras o frases clave para despertar al asistente\npalabras_clave = [\"mayordomo\", \"asistente\", \"despertate\", \"dame bola\", \"IA\", \"computadora\", \"esclavo\"]",
        "detail": "mayordomo (2)",
        "documentation": {}
    },
    {
        "label": "r.energy_threshold",
        "kind": 5,
        "importPath": "mayordomo (2)",
        "description": "mayordomo (2)",
        "peekOfCode": "r.energy_threshold = 3000  # Valor por defecto es 3000, ajusta según sea necesario\n# Ajustar el umbral de pausa para responder más rápidamente\nr.pause_threshold = 0.5  # Valor por defecto es 0.5 segundos, ajusta según sea necesario\n# Ajustar el tiempo de espera para la operación de escucha (opcional)\nr.operation_timeout = 5  # 5 segundos de tiempo de espera, ajusta según sea necesario\n# Palabra clave para activar y comando para terminar\n# Lista de palabras o frases clave para despertar al asistente\npalabras_clave = [\"mayordomo\", \"asistente\", \"despertate\", \"dame bola\", \"IA\", \"computadora\", \"esclavo\"]\nprint(f\"amo.. Di alguna de estas palabras para despertarme: {', '.join(palabras_clave)}\")\nmotor.say(f\"amo.. Di alguna de estas palabras para activarme: {', '.join(palabras_clave)}\")",
        "detail": "mayordomo (2)",
        "documentation": {}
    },
    {
        "label": "r.pause_threshold",
        "kind": 5,
        "importPath": "mayordomo (2)",
        "description": "mayordomo (2)",
        "peekOfCode": "r.pause_threshold = 0.5  # Valor por defecto es 0.5 segundos, ajusta según sea necesario\n# Ajustar el tiempo de espera para la operación de escucha (opcional)\nr.operation_timeout = 5  # 5 segundos de tiempo de espera, ajusta según sea necesario\n# Palabra clave para activar y comando para terminar\n# Lista de palabras o frases clave para despertar al asistente\npalabras_clave = [\"mayordomo\", \"asistente\", \"despertate\", \"dame bola\", \"IA\", \"computadora\", \"esclavo\"]\nprint(f\"amo.. Di alguna de estas palabras para despertarme: {', '.join(palabras_clave)}\")\nmotor.say(f\"amo.. Di alguna de estas palabras para activarme: {', '.join(palabras_clave)}\")\nmotor.runAndWait()\ncomandos_terminacion = [\"terminar\", \"salir\", \"finalizar\", \"cerrar\", \"exit\", \"end\", \"stop\", \"quit\", \"close\", \"finish\", \"leave\", \"bye\", \"adios\", \"adiós\", \"chao\",  \"chau\",\"hasta luego\", \"hasta la vista\", \"nos vemos\", \"hasta pronto\", \"hasta mañana\", \"hasta la próxima\", \"hasta la otra\", \"hasta la otra semana\", \"hasta la otra vez\", \"hasta la otra ocasión\", \"nos vemos\", \"listo\"]",
        "detail": "mayordomo (2)",
        "documentation": {}
    },
    {
        "label": "r.operation_timeout",
        "kind": 5,
        "importPath": "mayordomo (2)",
        "description": "mayordomo (2)",
        "peekOfCode": "r.operation_timeout = 5  # 5 segundos de tiempo de espera, ajusta según sea necesario\n# Palabra clave para activar y comando para terminar\n# Lista de palabras o frases clave para despertar al asistente\npalabras_clave = [\"mayordomo\", \"asistente\", \"despertate\", \"dame bola\", \"IA\", \"computadora\", \"esclavo\"]\nprint(f\"amo.. Di alguna de estas palabras para despertarme: {', '.join(palabras_clave)}\")\nmotor.say(f\"amo.. Di alguna de estas palabras para activarme: {', '.join(palabras_clave)}\")\nmotor.runAndWait()\ncomandos_terminacion = [\"terminar\", \"salir\", \"finalizar\", \"cerrar\", \"exit\", \"end\", \"stop\", \"quit\", \"close\", \"finish\", \"leave\", \"bye\", \"adios\", \"adiós\", \"chao\",  \"chau\",\"hasta luego\", \"hasta la vista\", \"nos vemos\", \"hasta pronto\", \"hasta mañana\", \"hasta la próxima\", \"hasta la otra\", \"hasta la otra semana\", \"hasta la otra vez\", \"hasta la otra ocasión\", \"nos vemos\", \"listo\"]\n# Esperar palabra clave para activar\nwhile True:",
        "detail": "mayordomo (2)",
        "documentation": {}
    },
    {
        "label": "palabras_clave",
        "kind": 5,
        "importPath": "mayordomo (2)",
        "description": "mayordomo (2)",
        "peekOfCode": "palabras_clave = [\"mayordomo\", \"asistente\", \"despertate\", \"dame bola\", \"IA\", \"computadora\", \"esclavo\"]\nprint(f\"amo.. Di alguna de estas palabras para despertarme: {', '.join(palabras_clave)}\")\nmotor.say(f\"amo.. Di alguna de estas palabras para activarme: {', '.join(palabras_clave)}\")\nmotor.runAndWait()\ncomandos_terminacion = [\"terminar\", \"salir\", \"finalizar\", \"cerrar\", \"exit\", \"end\", \"stop\", \"quit\", \"close\", \"finish\", \"leave\", \"bye\", \"adios\", \"adiós\", \"chao\",  \"chau\",\"hasta luego\", \"hasta la vista\", \"nos vemos\", \"hasta pronto\", \"hasta mañana\", \"hasta la próxima\", \"hasta la otra\", \"hasta la otra semana\", \"hasta la otra vez\", \"hasta la otra ocasión\", \"nos vemos\", \"listo\"]\n# Esperar palabra clave para activar\nwhile True:\n    for countdown in range(5, 0, -1):\n        print(f\"Abriendo micrófono en {countdown} segundos...\", end='\\r')\n        time.sleep(1)",
        "detail": "mayordomo (2)",
        "documentation": {}
    },
    {
        "label": "comandos_terminacion",
        "kind": 5,
        "importPath": "mayordomo (2)",
        "description": "mayordomo (2)",
        "peekOfCode": "comandos_terminacion = [\"terminar\", \"salir\", \"finalizar\", \"cerrar\", \"exit\", \"end\", \"stop\", \"quit\", \"close\", \"finish\", \"leave\", \"bye\", \"adios\", \"adiós\", \"chao\",  \"chau\",\"hasta luego\", \"hasta la vista\", \"nos vemos\", \"hasta pronto\", \"hasta mañana\", \"hasta la próxima\", \"hasta la otra\", \"hasta la otra semana\", \"hasta la otra vez\", \"hasta la otra ocasión\", \"nos vemos\", \"listo\"]\n# Esperar palabra clave para activar\nwhile True:\n    for countdown in range(5, 0, -1):\n        print(f\"Abriendo micrófono en {countdown} segundos...\", end='\\r')\n        time.sleep(1)\n    print(\"Escuchando palabra clave...\")\n    with sr.Microphone() as source:\n        try:\n            audio = r.listen(source, timeout=5, phrase_time_limit=5)",
        "detail": "mayordomo (2)",
        "documentation": {}
    },
    {
        "label": "contador",
        "kind": 5,
        "importPath": "mayordomo (2)",
        "description": "mayordomo (2)",
        "peekOfCode": "contador = 0\nwhile True:\n    if contador == 0:\n        print(\"Por favor amo, dígame qué desea saber: \")\n        motor.say(\"Por favor, dígame qué desea saber: \")\n        motor.runAndWait()\n        contador = 1\n    else:\n        print(\"¿Amo, hay algo más en lo que pueda ayudarle?\")\n        motor.say(\"¿Amo, hay algo más en lo que pueda ayudarle?\")",
        "detail": "mayordomo (2)",
        "documentation": {}
    },
    {
        "label": "calculadora_de_operaciones",
        "kind": 2,
        "importPath": "mod2_clase1_g1 (1)",
        "description": "mod2_clase1_g1 (1)",
        "peekOfCode": "def calculadora_de_operaciones(numero_1:int ,numero_2:int, operacion:str ):\n    if operacion == \"+\" or operacion == \"suma\":\n        resultado = numero_1 + numero_2\n    elif operacion == \"-\" or operacion == \"resta\":\n        resultado = numero_1 - numero_2\n    elif operacion == \"*\" or operacion == \"multiplicacion\":\n        resultado = numero_1 * numero_2\n    elif operacion == \"/\" or operacion == \"division\":\n        resultado = numero_1 / numero_2\n    elif operacion == \"%\" or operacion == \"modulo\":",
        "detail": "mod2_clase1_g1 (1)",
        "documentation": {}
    },
    {
        "label": "imprimir_algo",
        "kind": 2,
        "importPath": "mod2_clase1_g1 (1)",
        "description": "mod2_clase1_g1 (1)",
        "peekOfCode": "def imprimir_algo(parametro:str):\n    print(parametro)\n    return #Si no tiene return es un procedimiento\n#imprimir_algo(\"hola mundo\")\n#imprimir_algo(\"Chau mundo\")\n#for contador in range(10):\n #   imprimir_algo(f\"Hola {contador}\")",
        "detail": "mod2_clase1_g1 (1)",
        "documentation": {}
    },
    {
        "label": "input_1",
        "kind": 5,
        "importPath": "mod2_clase1_g1 (1)",
        "description": "mod2_clase1_g1 (1)",
        "peekOfCode": "input_1 = int(input(\"Ingrese un numero para sumar:\"))\ninput_2 = int(input(\"Ingrese un numero para sumar:\"))\ninput_operacion = input(\"Ingrese la operacion a realizar(+,-,*,/,\\%\\ o suma ,resta ,multiplicacion , division, modulo):\")\nresultado = calculadora_de_operaciones(input_1,input_2, input_operacion)\n#resultado_2 = calculadora_de_operaciones(15,20,\"-\")\n#ACTIVIDAD: HACER UNA FUNCION QUE RECIBA UN STRING Y LO IMPRIMA POR CONSOLA\ndef imprimir_algo(parametro:str):\n    print(parametro)\n    return #Si no tiene return es un procedimiento\n#imprimir_algo(\"hola mundo\")",
        "detail": "mod2_clase1_g1 (1)",
        "documentation": {}
    },
    {
        "label": "input_2",
        "kind": 5,
        "importPath": "mod2_clase1_g1 (1)",
        "description": "mod2_clase1_g1 (1)",
        "peekOfCode": "input_2 = int(input(\"Ingrese un numero para sumar:\"))\ninput_operacion = input(\"Ingrese la operacion a realizar(+,-,*,/,\\%\\ o suma ,resta ,multiplicacion , division, modulo):\")\nresultado = calculadora_de_operaciones(input_1,input_2, input_operacion)\n#resultado_2 = calculadora_de_operaciones(15,20,\"-\")\n#ACTIVIDAD: HACER UNA FUNCION QUE RECIBA UN STRING Y LO IMPRIMA POR CONSOLA\ndef imprimir_algo(parametro:str):\n    print(parametro)\n    return #Si no tiene return es un procedimiento\n#imprimir_algo(\"hola mundo\")\n#imprimir_algo(\"Chau mundo\")",
        "detail": "mod2_clase1_g1 (1)",
        "documentation": {}
    },
    {
        "label": "input_operacion",
        "kind": 5,
        "importPath": "mod2_clase1_g1 (1)",
        "description": "mod2_clase1_g1 (1)",
        "peekOfCode": "input_operacion = input(\"Ingrese la operacion a realizar(+,-,*,/,\\%\\ o suma ,resta ,multiplicacion , division, modulo):\")\nresultado = calculadora_de_operaciones(input_1,input_2, input_operacion)\n#resultado_2 = calculadora_de_operaciones(15,20,\"-\")\n#ACTIVIDAD: HACER UNA FUNCION QUE RECIBA UN STRING Y LO IMPRIMA POR CONSOLA\ndef imprimir_algo(parametro:str):\n    print(parametro)\n    return #Si no tiene return es un procedimiento\n#imprimir_algo(\"hola mundo\")\n#imprimir_algo(\"Chau mundo\")\n#for contador in range(10):",
        "detail": "mod2_clase1_g1 (1)",
        "documentation": {}
    },
    {
        "label": "resultado",
        "kind": 5,
        "importPath": "mod2_clase1_g1 (1)",
        "description": "mod2_clase1_g1 (1)",
        "peekOfCode": "resultado = calculadora_de_operaciones(input_1,input_2, input_operacion)\n#resultado_2 = calculadora_de_operaciones(15,20,\"-\")\n#ACTIVIDAD: HACER UNA FUNCION QUE RECIBA UN STRING Y LO IMPRIMA POR CONSOLA\ndef imprimir_algo(parametro:str):\n    print(parametro)\n    return #Si no tiene return es un procedimiento\n#imprimir_algo(\"hola mundo\")\n#imprimir_algo(\"Chau mundo\")\n#for contador in range(10):\n #   imprimir_algo(f\"Hola {contador}\")",
        "detail": "mod2_clase1_g1 (1)",
        "documentation": {}
    },
    {
        "label": "#resultado_2",
        "kind": 5,
        "importPath": "mod2_clase1_g1 (1)",
        "description": "mod2_clase1_g1 (1)",
        "peekOfCode": "#resultado_2 = calculadora_de_operaciones(15,20,\"-\")\n#ACTIVIDAD: HACER UNA FUNCION QUE RECIBA UN STRING Y LO IMPRIMA POR CONSOLA\ndef imprimir_algo(parametro:str):\n    print(parametro)\n    return #Si no tiene return es un procedimiento\n#imprimir_algo(\"hola mundo\")\n#imprimir_algo(\"Chau mundo\")\n#for contador in range(10):\n #   imprimir_algo(f\"Hola {contador}\")",
        "detail": "mod2_clase1_g1 (1)",
        "documentation": {}
    },
    {
        "label": "calculadora_de_operaciones",
        "kind": 2,
        "importPath": "mod2_clase1_g1",
        "description": "mod2_clase1_g1",
        "peekOfCode": "def calculadora_de_operaciones(numero_1:int ,numero_2:int, operacion:str ):\n    if operacion == \"+\" or operacion == \"suma\":\n        resultado = numero_1 + numero_2\n    elif operacion == \"-\" or operacion == \"resta\":\n        resultado = numero_1 - numero_2\n    elif operacion == \"*\" or operacion == \"multiplicacion\":\n        resultado = numero_1 * numero_2\n    elif operacion == \"/\" or operacion == \"division\":\n        resultado = numero_1 / numero_2\n    elif operacion == \"%\" or operacion == \"modulo\":",
        "detail": "mod2_clase1_g1",
        "documentation": {}
    },
    {
        "label": "imprimir_algo",
        "kind": 2,
        "importPath": "mod2_clase1_g1",
        "description": "mod2_clase1_g1",
        "peekOfCode": "def imprimir_algo(parametro:str):\n    print(parametro)\n    return #Si no tiene return es un procedimiento\n#imprimir_algo(\"hola mundo\")\n#imprimir_algo(\"Chau mundo\")\n#for contador in range(10):\n #   imprimir_algo(f\"Hola {contador}\")",
        "detail": "mod2_clase1_g1",
        "documentation": {}
    },
    {
        "label": "input_1",
        "kind": 5,
        "importPath": "mod2_clase1_g1",
        "description": "mod2_clase1_g1",
        "peekOfCode": "input_1 = int(input(\"Ingrese un numero para sumar:\"))\ninput_2 = int(input(\"Ingrese un numero para sumar:\"))\ninput_operacion = input(\"Ingrese la operacion a realizar(+,-,*,/,\\%\\ o suma ,resta ,multiplicacion , division, modulo):\")\nresultado = calculadora_de_operaciones(input_1,input_2, input_operacion)\n#resultado_2 = calculadora_de_operaciones(15,20,\"-\")\n#ACTIVIDAD: HACER UNA FUNCION QUE RECIBA UN STRING Y LO IMPRIMA POR CONSOLA\ndef imprimir_algo(parametro:str):\n    print(parametro)\n    return #Si no tiene return es un procedimiento\n#imprimir_algo(\"hola mundo\")",
        "detail": "mod2_clase1_g1",
        "documentation": {}
    },
    {
        "label": "input_2",
        "kind": 5,
        "importPath": "mod2_clase1_g1",
        "description": "mod2_clase1_g1",
        "peekOfCode": "input_2 = int(input(\"Ingrese un numero para sumar:\"))\ninput_operacion = input(\"Ingrese la operacion a realizar(+,-,*,/,\\%\\ o suma ,resta ,multiplicacion , division, modulo):\")\nresultado = calculadora_de_operaciones(input_1,input_2, input_operacion)\n#resultado_2 = calculadora_de_operaciones(15,20,\"-\")\n#ACTIVIDAD: HACER UNA FUNCION QUE RECIBA UN STRING Y LO IMPRIMA POR CONSOLA\ndef imprimir_algo(parametro:str):\n    print(parametro)\n    return #Si no tiene return es un procedimiento\n#imprimir_algo(\"hola mundo\")\n#imprimir_algo(\"Chau mundo\")",
        "detail": "mod2_clase1_g1",
        "documentation": {}
    },
    {
        "label": "input_operacion",
        "kind": 5,
        "importPath": "mod2_clase1_g1",
        "description": "mod2_clase1_g1",
        "peekOfCode": "input_operacion = input(\"Ingrese la operacion a realizar(+,-,*,/,\\%\\ o suma ,resta ,multiplicacion , division, modulo):\")\nresultado = calculadora_de_operaciones(input_1,input_2, input_operacion)\n#resultado_2 = calculadora_de_operaciones(15,20,\"-\")\n#ACTIVIDAD: HACER UNA FUNCION QUE RECIBA UN STRING Y LO IMPRIMA POR CONSOLA\ndef imprimir_algo(parametro:str):\n    print(parametro)\n    return #Si no tiene return es un procedimiento\n#imprimir_algo(\"hola mundo\")\n#imprimir_algo(\"Chau mundo\")\n#for contador in range(10):",
        "detail": "mod2_clase1_g1",
        "documentation": {}
    },
    {
        "label": "resultado",
        "kind": 5,
        "importPath": "mod2_clase1_g1",
        "description": "mod2_clase1_g1",
        "peekOfCode": "resultado = calculadora_de_operaciones(input_1,input_2, input_operacion)\n#resultado_2 = calculadora_de_operaciones(15,20,\"-\")\n#ACTIVIDAD: HACER UNA FUNCION QUE RECIBA UN STRING Y LO IMPRIMA POR CONSOLA\ndef imprimir_algo(parametro:str):\n    print(parametro)\n    return #Si no tiene return es un procedimiento\n#imprimir_algo(\"hola mundo\")\n#imprimir_algo(\"Chau mundo\")\n#for contador in range(10):\n #   imprimir_algo(f\"Hola {contador}\")",
        "detail": "mod2_clase1_g1",
        "documentation": {}
    },
    {
        "label": "#resultado_2",
        "kind": 5,
        "importPath": "mod2_clase1_g1",
        "description": "mod2_clase1_g1",
        "peekOfCode": "#resultado_2 = calculadora_de_operaciones(15,20,\"-\")\n#ACTIVIDAD: HACER UNA FUNCION QUE RECIBA UN STRING Y LO IMPRIMA POR CONSOLA\ndef imprimir_algo(parametro:str):\n    print(parametro)\n    return #Si no tiene return es un procedimiento\n#imprimir_algo(\"hola mundo\")\n#imprimir_algo(\"Chau mundo\")\n#for contador in range(10):\n #   imprimir_algo(f\"Hola {contador}\")",
        "detail": "mod2_clase1_g1",
        "documentation": {}
    },
    {
        "label": "lista_abecedario",
        "kind": 5,
        "importPath": "palabra_a_encriptar",
        "description": "palabra_a_encriptar",
        "peekOfCode": "lista_abecedario = [ \"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\", \"j\",\"k\",\"l\",\"m\",\"n\",\"ñ\",\"o\",\"p\",\"q\",\"r\",\"s\",\"t\",\"u\",\"v\",\"w\",\"x\",\"y\",\"z\"]\nlista_palabra = list (palabra_a_encriptar)\nlista_indice = []\nindice =0\npalabra_encriptada = []\nprint (lista_palabra)\nfor palabra in lista_palabra:\n    indice= lista_abecedario.index(palabra)\n    lista_indice.append(indice+desplazamiento)\n    for numero in lista_indice:",
        "detail": "palabra_a_encriptar",
        "documentation": {}
    },
    {
        "label": "lista_palabra",
        "kind": 5,
        "importPath": "palabra_a_encriptar",
        "description": "palabra_a_encriptar",
        "peekOfCode": "lista_palabra = list (palabra_a_encriptar)\nlista_indice = []\nindice =0\npalabra_encriptada = []\nprint (lista_palabra)\nfor palabra in lista_palabra:\n    indice= lista_abecedario.index(palabra)\n    lista_indice.append(indice+desplazamiento)\n    for numero in lista_indice:\n        palabra_encriptada.append(lista_abecedario[numero])",
        "detail": "palabra_a_encriptar",
        "documentation": {}
    },
    {
        "label": "lista_indice",
        "kind": 5,
        "importPath": "palabra_a_encriptar",
        "description": "palabra_a_encriptar",
        "peekOfCode": "lista_indice = []\nindice =0\npalabra_encriptada = []\nprint (lista_palabra)\nfor palabra in lista_palabra:\n    indice= lista_abecedario.index(palabra)\n    lista_indice.append(indice+desplazamiento)\n    for numero in lista_indice:\n        palabra_encriptada.append(lista_abecedario[numero])\nsalida =  \",\".join(palabra_encriptada)",
        "detail": "palabra_a_encriptar",
        "documentation": {}
    },
    {
        "label": "palabra_encriptada",
        "kind": 5,
        "importPath": "palabra_a_encriptar",
        "description": "palabra_a_encriptar",
        "peekOfCode": "palabra_encriptada = []\nprint (lista_palabra)\nfor palabra in lista_palabra:\n    indice= lista_abecedario.index(palabra)\n    lista_indice.append(indice+desplazamiento)\n    for numero in lista_indice:\n        palabra_encriptada.append(lista_abecedario[numero])\nsalida =  \",\".join(palabra_encriptada)\nprint(salida)",
        "detail": "palabra_a_encriptar",
        "documentation": {}
    },
    {
        "label": "salida",
        "kind": 5,
        "importPath": "palabra_a_encriptar",
        "description": "palabra_a_encriptar",
        "peekOfCode": "salida =  \",\".join(palabra_encriptada)\nprint(salida)",
        "detail": "palabra_a_encriptar",
        "documentation": {}
    },
    {
        "label": "numero_aleatorio",
        "kind": 5,
        "importPath": "Piedra_Papel_Tijera v1",
        "description": "Piedra_Papel_Tijera v1",
        "peekOfCode": "numero_aleatorio = 0\neligio = 0\nSalio = 0\nnumero_aleatorio = random.randint (1, 3)\nif numero_aleatorio == 1:\n    salio = \"PIEDRA\"\nif numero_aleatorio == 2:\n    salio = \"PAPEL \"\nif numero_aleatorio == 3:\n    salio = \"TIJERA\"",
        "detail": "Piedra_Papel_Tijera v1",
        "documentation": {}
    },
    {
        "label": "eligio",
        "kind": 5,
        "importPath": "Piedra_Papel_Tijera v1",
        "description": "Piedra_Papel_Tijera v1",
        "peekOfCode": "eligio = 0\nSalio = 0\nnumero_aleatorio = random.randint (1, 3)\nif numero_aleatorio == 1:\n    salio = \"PIEDRA\"\nif numero_aleatorio == 2:\n    salio = \"PAPEL \"\nif numero_aleatorio == 3:\n    salio = \"TIJERA\"\nprint(\"\")",
        "detail": "Piedra_Papel_Tijera v1",
        "documentation": {}
    },
    {
        "label": "Salio",
        "kind": 5,
        "importPath": "Piedra_Papel_Tijera v1",
        "description": "Piedra_Papel_Tijera v1",
        "peekOfCode": "Salio = 0\nnumero_aleatorio = random.randint (1, 3)\nif numero_aleatorio == 1:\n    salio = \"PIEDRA\"\nif numero_aleatorio == 2:\n    salio = \"PAPEL \"\nif numero_aleatorio == 3:\n    salio = \"TIJERA\"\nprint(\"\")\nprint(\"#\"*80)",
        "detail": "Piedra_Papel_Tijera v1",
        "documentation": {}
    },
    {
        "label": "numero_aleatorio",
        "kind": 5,
        "importPath": "Piedra_Papel_Tijera v1",
        "description": "Piedra_Papel_Tijera v1",
        "peekOfCode": "numero_aleatorio = random.randint (1, 3)\nif numero_aleatorio == 1:\n    salio = \"PIEDRA\"\nif numero_aleatorio == 2:\n    salio = \"PAPEL \"\nif numero_aleatorio == 3:\n    salio = \"TIJERA\"\nprint(\"\")\nprint(\"#\"*80)\nprint(\"######                                                                    ######\")",
        "detail": "Piedra_Papel_Tijera v1",
        "documentation": {}
    },
    {
        "label": "numero_ingresado",
        "kind": 5,
        "importPath": "Piedra_Papel_Tijera v1",
        "description": "Piedra_Papel_Tijera v1",
        "peekOfCode": "numero_ingresado = input (\"Ingrese un numero entre el 1 y el 3: \")\nif numero_ingresado.isdigit():\n   numero_ingresado = int(numero_ingresado)\nelse:   \n    print(\"#\"*60)\n    print(\"######                                                ######\")\n    print(\"######       NO INGRESO UN DATO CORRECTO  😛🚀        ###### \")\n    print(\"######            FIN DEL JUEGO                       ######\")\n    print(\"######                                                ######\")\n    print(\"#\"*60)",
        "detail": "Piedra_Papel_Tijera v1",
        "documentation": {}
    },
    {
        "label": "num1",
        "kind": 5,
        "importPath": "Promedio",
        "description": "Promedio",
        "peekOfCode": "num1 = float(input(\"Ingrese el primer número: \"))\nnum2 = float(input(\"Ingrese el segundo número: \"))\nnum3 = float(input(\"Ingrese el tercer número: \"))\nnum4 = float(input(\"Ingrese el cuarto número: \"))\n# Calcular el promedio\npromedio = (num1 + num2 + num3 + num4) / 4\n# Imprimir el resultado\nprint(f\"El promedio es: {promedio}\")",
        "detail": "Promedio",
        "documentation": {}
    },
    {
        "label": "num2",
        "kind": 5,
        "importPath": "Promedio",
        "description": "Promedio",
        "peekOfCode": "num2 = float(input(\"Ingrese el segundo número: \"))\nnum3 = float(input(\"Ingrese el tercer número: \"))\nnum4 = float(input(\"Ingrese el cuarto número: \"))\n# Calcular el promedio\npromedio = (num1 + num2 + num3 + num4) / 4\n# Imprimir el resultado\nprint(f\"El promedio es: {promedio}\")",
        "detail": "Promedio",
        "documentation": {}
    },
    {
        "label": "num3",
        "kind": 5,
        "importPath": "Promedio",
        "description": "Promedio",
        "peekOfCode": "num3 = float(input(\"Ingrese el tercer número: \"))\nnum4 = float(input(\"Ingrese el cuarto número: \"))\n# Calcular el promedio\npromedio = (num1 + num2 + num3 + num4) / 4\n# Imprimir el resultado\nprint(f\"El promedio es: {promedio}\")",
        "detail": "Promedio",
        "documentation": {}
    },
    {
        "label": "num4",
        "kind": 5,
        "importPath": "Promedio",
        "description": "Promedio",
        "peekOfCode": "num4 = float(input(\"Ingrese el cuarto número: \"))\n# Calcular el promedio\npromedio = (num1 + num2 + num3 + num4) / 4\n# Imprimir el resultado\nprint(f\"El promedio es: {promedio}\")",
        "detail": "Promedio",
        "documentation": {}
    },
    {
        "label": "promedio",
        "kind": 5,
        "importPath": "Promedio",
        "description": "Promedio",
        "peekOfCode": "promedio = (num1 + num2 + num3 + num4) / 4\n# Imprimir el resultado\nprint(f\"El promedio es: {promedio}\")",
        "detail": "Promedio",
        "documentation": {}
    },
    {
        "label": "variable",
        "kind": 5,
        "importPath": "repaso18_7_24",
        "description": "repaso18_7_24",
        "peekOfCode": "variable = \"hola como estas\"\nlista = [\"hola\",\"como\",\"estas\"]\nlista_apartir_variable = variable.split()#sirve para separar, dividir y analizar paso a paso\nprint (variable.split())\nlista_apartir_variable = list(variable)\nprint(list (variable))",
        "detail": "repaso18_7_24",
        "documentation": {}
    },
    {
        "label": "lista",
        "kind": 5,
        "importPath": "repaso18_7_24",
        "description": "repaso18_7_24",
        "peekOfCode": "lista = [\"hola\",\"como\",\"estas\"]\nlista_apartir_variable = variable.split()#sirve para separar, dividir y analizar paso a paso\nprint (variable.split())\nlista_apartir_variable = list(variable)\nprint(list (variable))",
        "detail": "repaso18_7_24",
        "documentation": {}
    },
    {
        "label": "lista_apartir_variable",
        "kind": 5,
        "importPath": "repaso18_7_24",
        "description": "repaso18_7_24",
        "peekOfCode": "lista_apartir_variable = variable.split()#sirve para separar, dividir y analizar paso a paso\nprint (variable.split())\nlista_apartir_variable = list(variable)\nprint(list (variable))",
        "detail": "repaso18_7_24",
        "documentation": {}
    },
    {
        "label": "lista_apartir_variable",
        "kind": 5,
        "importPath": "repaso18_7_24",
        "description": "repaso18_7_24",
        "peekOfCode": "lista_apartir_variable = list(variable)\nprint(list (variable))",
        "detail": "repaso18_7_24",
        "documentation": {}
    },
    {
        "label": "#variable",
        "kind": 5,
        "importPath": "repaso_grupo1_clase8",
        "description": "repaso_grupo1_clase8",
        "peekOfCode": "#variable = \"\"\n#variable = input(\"Ingrese solo texto: \")\n\"\"\" # Forma 1 de detectar si es solo texto #(QUITAR LAS COMILLAS TRIPLES PARA QUE ANDE)\nif variable.isdigit():\n    print(\"Era solo texto\")\n    exit()\nelse:\n    print(f\"El valor de la variable es {variable}\")\n\"\"\"#(QUITAR LAS COMILLAS TRIPLES PARA QUE ANDE) \n\"\"\" # Forma 2 de detectar si es solo texto (Negando el if)#(QUITAR LAS COMILLAS TRIPLES PARA QUE ANDE)",
        "detail": "repaso_grupo1_clase8",
        "documentation": {}
    },
    {
        "label": "#variable",
        "kind": 5,
        "importPath": "repaso_grupo1_clase8",
        "description": "repaso_grupo1_clase8",
        "peekOfCode": "#variable = input(\"Ingrese solo texto: \")\n\"\"\" # Forma 1 de detectar si es solo texto #(QUITAR LAS COMILLAS TRIPLES PARA QUE ANDE)\nif variable.isdigit():\n    print(\"Era solo texto\")\n    exit()\nelse:\n    print(f\"El valor de la variable es {variable}\")\n\"\"\"#(QUITAR LAS COMILLAS TRIPLES PARA QUE ANDE) \n\"\"\" # Forma 2 de detectar si es solo texto (Negando el if)#(QUITAR LAS COMILLAS TRIPLES PARA QUE ANDE)\nif not variable.isdigit():",
        "detail": "repaso_grupo1_clase8",
        "documentation": {}
    },
    {
        "label": "texto",
        "kind": 5,
        "importPath": "repaso_grupo1_clase8",
        "description": "repaso_grupo1_clase8",
        "peekOfCode": "texto = \"Hola, mundo. Hola, Tierra\"\n#print(texto)\ntexto_reemplazado = texto.replace(\"Hola\", \"Adiós\")\n#print(texto_reemplazado)\nnumero_de_holas = texto_reemplazado.count(\"Hola\")\n#print(numero_de_holas)\ntexto = \"Hola, mundo\"\ntexto = \"Hola, mundo, mundo, chau mundo Diego, Gonzalo, Javier, Monica, Shirley, Guillermo, Gaspar, Fermin\"\npalabra_a_buscar = input(\"Ingrese la palabra a buscar: \")\nposicion_texto = texto.find(palabra_a_buscar)",
        "detail": "repaso_grupo1_clase8",
        "documentation": {}
    },
    {
        "label": "texto_reemplazado",
        "kind": 5,
        "importPath": "repaso_grupo1_clase8",
        "description": "repaso_grupo1_clase8",
        "peekOfCode": "texto_reemplazado = texto.replace(\"Hola\", \"Adiós\")\n#print(texto_reemplazado)\nnumero_de_holas = texto_reemplazado.count(\"Hola\")\n#print(numero_de_holas)\ntexto = \"Hola, mundo\"\ntexto = \"Hola, mundo, mundo, chau mundo Diego, Gonzalo, Javier, Monica, Shirley, Guillermo, Gaspar, Fermin\"\npalabra_a_buscar = input(\"Ingrese la palabra a buscar: \")\nposicion_texto = texto.find(palabra_a_buscar)\nlongitud_de_palabra = len(palabra_a_buscar) \n#print(longitud_de_palabra)",
        "detail": "repaso_grupo1_clase8",
        "documentation": {}
    },
    {
        "label": "numero_de_holas",
        "kind": 5,
        "importPath": "repaso_grupo1_clase8",
        "description": "repaso_grupo1_clase8",
        "peekOfCode": "numero_de_holas = texto_reemplazado.count(\"Hola\")\n#print(numero_de_holas)\ntexto = \"Hola, mundo\"\ntexto = \"Hola, mundo, mundo, chau mundo Diego, Gonzalo, Javier, Monica, Shirley, Guillermo, Gaspar, Fermin\"\npalabra_a_buscar = input(\"Ingrese la palabra a buscar: \")\nposicion_texto = texto.find(palabra_a_buscar)\nlongitud_de_palabra = len(palabra_a_buscar) \n#print(longitud_de_palabra)\n#print(posicion_texto)\n#print(posicion_ultimo_mundo)",
        "detail": "repaso_grupo1_clase8",
        "documentation": {}
    },
    {
        "label": "texto",
        "kind": 5,
        "importPath": "repaso_grupo1_clase8",
        "description": "repaso_grupo1_clase8",
        "peekOfCode": "texto = \"Hola, mundo\"\ntexto = \"Hola, mundo, mundo, chau mundo Diego, Gonzalo, Javier, Monica, Shirley, Guillermo, Gaspar, Fermin\"\npalabra_a_buscar = input(\"Ingrese la palabra a buscar: \")\nposicion_texto = texto.find(palabra_a_buscar)\nlongitud_de_palabra = len(palabra_a_buscar) \n#print(longitud_de_palabra)\n#print(posicion_texto)\n#print(posicion_ultimo_mundo)\n#posicion_ultimo_mundo = texto.rfind(\"mundo\")\nif posicion_texto > 0:",
        "detail": "repaso_grupo1_clase8",
        "documentation": {}
    },
    {
        "label": "texto",
        "kind": 5,
        "importPath": "repaso_grupo1_clase8",
        "description": "repaso_grupo1_clase8",
        "peekOfCode": "texto = \"Hola, mundo, mundo, chau mundo Diego, Gonzalo, Javier, Monica, Shirley, Guillermo, Gaspar, Fermin\"\npalabra_a_buscar = input(\"Ingrese la palabra a buscar: \")\nposicion_texto = texto.find(palabra_a_buscar)\nlongitud_de_palabra = len(palabra_a_buscar) \n#print(longitud_de_palabra)\n#print(posicion_texto)\n#print(posicion_ultimo_mundo)\n#posicion_ultimo_mundo = texto.rfind(\"mundo\")\nif posicion_texto > 0:\n    print(f\"La variable a cortar es: {texto[posicion_texto : posicion_texto + longitud_de_palabra]} existe en la posicion {posicion_texto} y la longitud es {longitud_de_palabra}\")",
        "detail": "repaso_grupo1_clase8",
        "documentation": {}
    },
    {
        "label": "palabra_a_buscar",
        "kind": 5,
        "importPath": "repaso_grupo1_clase8",
        "description": "repaso_grupo1_clase8",
        "peekOfCode": "palabra_a_buscar = input(\"Ingrese la palabra a buscar: \")\nposicion_texto = texto.find(palabra_a_buscar)\nlongitud_de_palabra = len(palabra_a_buscar) \n#print(longitud_de_palabra)\n#print(posicion_texto)\n#print(posicion_ultimo_mundo)\n#posicion_ultimo_mundo = texto.rfind(\"mundo\")\nif posicion_texto > 0:\n    print(f\"La variable a cortar es: {texto[posicion_texto : posicion_texto + longitud_de_palabra]} existe en la posicion {posicion_texto} y la longitud es {longitud_de_palabra}\")\nelse:",
        "detail": "repaso_grupo1_clase8",
        "documentation": {}
    },
    {
        "label": "posicion_texto",
        "kind": 5,
        "importPath": "repaso_grupo1_clase8",
        "description": "repaso_grupo1_clase8",
        "peekOfCode": "posicion_texto = texto.find(palabra_a_buscar)\nlongitud_de_palabra = len(palabra_a_buscar) \n#print(longitud_de_palabra)\n#print(posicion_texto)\n#print(posicion_ultimo_mundo)\n#posicion_ultimo_mundo = texto.rfind(\"mundo\")\nif posicion_texto > 0:\n    print(f\"La variable a cortar es: {texto[posicion_texto : posicion_texto + longitud_de_palabra]} existe en la posicion {posicion_texto} y la longitud es {longitud_de_palabra}\")\nelse:\n    print(\"La palabra que buscas, no existe\")",
        "detail": "repaso_grupo1_clase8",
        "documentation": {}
    },
    {
        "label": "longitud_de_palabra",
        "kind": 5,
        "importPath": "repaso_grupo1_clase8",
        "description": "repaso_grupo1_clase8",
        "peekOfCode": "longitud_de_palabra = len(palabra_a_buscar) \n#print(longitud_de_palabra)\n#print(posicion_texto)\n#print(posicion_ultimo_mundo)\n#posicion_ultimo_mundo = texto.rfind(\"mundo\")\nif posicion_texto > 0:\n    print(f\"La variable a cortar es: {texto[posicion_texto : posicion_texto + longitud_de_palabra]} existe en la posicion {posicion_texto} y la longitud es {longitud_de_palabra}\")\nelse:\n    print(\"La palabra que buscas, no existe\")",
        "detail": "repaso_grupo1_clase8",
        "documentation": {}
    },
    {
        "label": "#posicion_ultimo_mundo",
        "kind": 5,
        "importPath": "repaso_grupo1_clase8",
        "description": "repaso_grupo1_clase8",
        "peekOfCode": "#posicion_ultimo_mundo = texto.rfind(\"mundo\")\nif posicion_texto > 0:\n    print(f\"La variable a cortar es: {texto[posicion_texto : posicion_texto + longitud_de_palabra]} existe en la posicion {posicion_texto} y la longitud es {longitud_de_palabra}\")\nelse:\n    print(\"La palabra que buscas, no existe\")",
        "detail": "repaso_grupo1_clase8",
        "documentation": {}
    },
    {
        "label": "var",
        "kind": 5,
        "importPath": "repaso_grupo2_clase8",
        "description": "repaso_grupo2_clase8",
        "peekOfCode": "var = input(\"Ingrese una palabra:\")\nif var.isdigit():\n    print(\"Error : ESTE ES TU PRIMER ERROR!!!!! Es un numero\")\n    continuar = True\n    print(f\"la variable continuar tiene el valor:{continuar}\")\nelse:\n    continuar = False\n    print(f\"la variable continuar tiene el valor:{continuar}\")\n    print(f\"la variable continuar tiene el valor:{continuar}\")\nif  continuar : #Recuerden que al usar un booleano en if no hace falta una condicion ya que se tomará el valor de él para la condición(en este caso si es True, ejecuta el codigo)",
        "detail": "repaso_grupo2_clase8",
        "documentation": {}
    },
    {
        "label": "texto",
        "kind": 5,
        "importPath": "repaso_grupo2_clase8",
        "description": "repaso_grupo2_clase8",
        "peekOfCode": "texto = \"Hola, mundo como te va, Diego, Gaspar, Marcelo, Salvador, Brisa, Franco, Pia, Camila, Silvia, Sofia\"\ntexto_a_buscar = input(\"Ingrese el texto a buscar: \")\nposicion_texto = texto.find(texto_a_buscar) #Buscamos la posicion donde comienza la palabra ingresada por el usuario\ncontar_letras = len(texto_a_buscar) #Contamos la cantidad de letras que tiene la palabra ingresada por el usuario\n#print(posicion_texto)\nif posicion_texto == -1:  #Si la palabra no existe find muestra -1\n    print(\"No se encontro la palabra\")\n    exit()\nelse: #Si la palabra existe\n    print(f\"Se encontro la palabra {texto[posicion_texto : posicion_texto + contar_letras]} en la posicion {posicion_texto} y tiene {contar_letras} caracteres\")",
        "detail": "repaso_grupo2_clase8",
        "documentation": {}
    },
    {
        "label": "texto_a_buscar",
        "kind": 5,
        "importPath": "repaso_grupo2_clase8",
        "description": "repaso_grupo2_clase8",
        "peekOfCode": "texto_a_buscar = input(\"Ingrese el texto a buscar: \")\nposicion_texto = texto.find(texto_a_buscar) #Buscamos la posicion donde comienza la palabra ingresada por el usuario\ncontar_letras = len(texto_a_buscar) #Contamos la cantidad de letras que tiene la palabra ingresada por el usuario\n#print(posicion_texto)\nif posicion_texto == -1:  #Si la palabra no existe find muestra -1\n    print(\"No se encontro la palabra\")\n    exit()\nelse: #Si la palabra existe\n    print(f\"Se encontro la palabra {texto[posicion_texto : posicion_texto + contar_letras]} en la posicion {posicion_texto} y tiene {contar_letras} caracteres\")",
        "detail": "repaso_grupo2_clase8",
        "documentation": {}
    },
    {
        "label": "posicion_texto",
        "kind": 5,
        "importPath": "repaso_grupo2_clase8",
        "description": "repaso_grupo2_clase8",
        "peekOfCode": "posicion_texto = texto.find(texto_a_buscar) #Buscamos la posicion donde comienza la palabra ingresada por el usuario\ncontar_letras = len(texto_a_buscar) #Contamos la cantidad de letras que tiene la palabra ingresada por el usuario\n#print(posicion_texto)\nif posicion_texto == -1:  #Si la palabra no existe find muestra -1\n    print(\"No se encontro la palabra\")\n    exit()\nelse: #Si la palabra existe\n    print(f\"Se encontro la palabra {texto[posicion_texto : posicion_texto + contar_letras]} en la posicion {posicion_texto} y tiene {contar_letras} caracteres\")",
        "detail": "repaso_grupo2_clase8",
        "documentation": {}
    },
    {
        "label": "contar_letras",
        "kind": 5,
        "importPath": "repaso_grupo2_clase8",
        "description": "repaso_grupo2_clase8",
        "peekOfCode": "contar_letras = len(texto_a_buscar) #Contamos la cantidad de letras que tiene la palabra ingresada por el usuario\n#print(posicion_texto)\nif posicion_texto == -1:  #Si la palabra no existe find muestra -1\n    print(\"No se encontro la palabra\")\n    exit()\nelse: #Si la palabra existe\n    print(f\"Se encontro la palabra {texto[posicion_texto : posicion_texto + contar_letras]} en la posicion {posicion_texto} y tiene {contar_letras} caracteres\")",
        "detail": "repaso_grupo2_clase8",
        "documentation": {}
    },
    {
        "label": "lista_alumnos",
        "kind": 5,
        "importPath": "select_random_grupo1",
        "description": "select_random_grupo1",
        "peekOfCode": "lista_alumnos = [\"Monica\", \"maricel\", \"carlos\", \"guillermo\",\"paula\", \"fermin\", \"gonzalo\", \"javier\", \"Jonathan\", \"florencia\", \"leticia\", \"shirley\", \"patricia\", \"marcelo\"]\nprint(lista_alumnos)\nalumnos_pasados = [\"Monica\", \"paula\", \"leticia\",\"gonzalo\", \"maricel\", \"shirley\"]\nlista_alumnos = [alumno.upper() for alumno in lista_alumnos]\nprint(lista_alumnos)\nalumnos_restantes = [alumno for alumno in lista_alumnos if alumno not in alumnos_pasados]\n#utilizamos una comprensión de lista para filtrar y crear una nueva lista llamada \n#alumnos_restantes a partir de la lista original lista_alumnos\nlista_alumnos_seleccion = random.choice(alumnos_restantes)\npprint.pprint(lista_alumnos_seleccion)",
        "detail": "select_random_grupo1",
        "documentation": {}
    },
    {
        "label": "alumnos_pasados",
        "kind": 5,
        "importPath": "select_random_grupo1",
        "description": "select_random_grupo1",
        "peekOfCode": "alumnos_pasados = [\"Monica\", \"paula\", \"leticia\",\"gonzalo\", \"maricel\", \"shirley\"]\nlista_alumnos = [alumno.upper() for alumno in lista_alumnos]\nprint(lista_alumnos)\nalumnos_restantes = [alumno for alumno in lista_alumnos if alumno not in alumnos_pasados]\n#utilizamos una comprensión de lista para filtrar y crear una nueva lista llamada \n#alumnos_restantes a partir de la lista original lista_alumnos\nlista_alumnos_seleccion = random.choice(alumnos_restantes)\npprint.pprint(lista_alumnos_seleccion)",
        "detail": "select_random_grupo1",
        "documentation": {}
    },
    {
        "label": "lista_alumnos",
        "kind": 5,
        "importPath": "select_random_grupo1",
        "description": "select_random_grupo1",
        "peekOfCode": "lista_alumnos = [alumno.upper() for alumno in lista_alumnos]\nprint(lista_alumnos)\nalumnos_restantes = [alumno for alumno in lista_alumnos if alumno not in alumnos_pasados]\n#utilizamos una comprensión de lista para filtrar y crear una nueva lista llamada \n#alumnos_restantes a partir de la lista original lista_alumnos\nlista_alumnos_seleccion = random.choice(alumnos_restantes)\npprint.pprint(lista_alumnos_seleccion)",
        "detail": "select_random_grupo1",
        "documentation": {}
    },
    {
        "label": "alumnos_restantes",
        "kind": 5,
        "importPath": "select_random_grupo1",
        "description": "select_random_grupo1",
        "peekOfCode": "alumnos_restantes = [alumno for alumno in lista_alumnos if alumno not in alumnos_pasados]\n#utilizamos una comprensión de lista para filtrar y crear una nueva lista llamada \n#alumnos_restantes a partir de la lista original lista_alumnos\nlista_alumnos_seleccion = random.choice(alumnos_restantes)\npprint.pprint(lista_alumnos_seleccion)",
        "detail": "select_random_grupo1",
        "documentation": {}
    },
    {
        "label": "lista_alumnos_seleccion",
        "kind": 5,
        "importPath": "select_random_grupo1",
        "description": "select_random_grupo1",
        "peekOfCode": "lista_alumnos_seleccion = random.choice(alumnos_restantes)\npprint.pprint(lista_alumnos_seleccion)",
        "detail": "select_random_grupo1",
        "documentation": {}
    },
    {
        "label": "suma_total",
        "kind": 5,
        "importPath": "sumadora7_6",
        "description": "sumadora7_6",
        "peekOfCode": "suma_total = 0\nprint(\"Introduce un numero para sumar. Ingresa 0 para finalizar.\")\nwhile True :\n    numero =int(input(\"Introduce un numero: \"))\n    if numero == 0:\n        break\n    suma_total += numero\nprint(f\"La suma total de los numeros ingresados es: {suma_total}\")",
        "detail": "sumadora7_6",
        "documentation": {}
    },
    {
        "label": "texto",
        "kind": 5,
        "importPath": "texto4",
        "description": "texto4",
        "peekOfCode": "texto = \"Los miles de millones de seres humanos que viven (conectados)\"\n\"palabras_clave = [\"conectados\"]\npalabra_destacada = next(palabra for palabra in palabras_clave if palabra in texto )\nprint(f\"Palabra_detectada:{palabra_detectada}\")",
        "detail": "texto4",
        "documentation": {}
    },
    {
        "label": "\"palabras_clave",
        "kind": 5,
        "importPath": "texto4",
        "description": "texto4",
        "peekOfCode": "\"palabras_clave = [\"conectados\"]\npalabra_destacada = next(palabra for palabra in palabras_clave if palabra in texto )\nprint(f\"Palabra_detectada:{palabra_detectada}\")",
        "detail": "texto4",
        "documentation": {}
    },
    {
        "label": "palabra_destacada",
        "kind": 5,
        "importPath": "texto4",
        "description": "texto4",
        "peekOfCode": "palabra_destacada = next(palabra for palabra in palabras_clave if palabra in texto )\nprint(f\"Palabra_detectada:{palabra_detectada}\")",
        "detail": "texto4",
        "documentation": {}
    },
    {
        "label": "resultado",
        "kind": 5,
        "importPath": "trivia",
        "description": "trivia",
        "peekOfCode": "resultado = 0\nfor i in range(1,5)\n     resultado + = i\nprint(\"pasada numero {i} el",
        "detail": "trivia",
        "documentation": {}
    },
    {
        "label": "Persona",
        "kind": 6,
        "importPath": "Untitled-1",
        "description": "Untitled-1",
        "peekOfCode": "class Persona:\n    def __init__(self, nombre, edad, profesion):\n        self.nombre = nombre\n        self.edad = edad\n        self.profesion = profesion\n    def imprimir(self):\n        print(f\"Nombre: {self.nombre}, Edad: {self.edad}, Profesion: {self.profesion}\")\n    def es_mayor_de_edad(self):\n        if self.edad >= 18:\n            return \"Es mayor de edad\"",
        "detail": "Untitled-1",
        "documentation": {}
    },
    {
        "label": "persona_1",
        "kind": 5,
        "importPath": "Untitled-1",
        "description": "Untitled-1",
        "peekOfCode": "persona_1 = Persona(\"Gaspar\", 23, \"Profesor\")\npersona_2 = Persona(\"Diego\", 45, \"Desarrollador de Software\")\npersona_3 = Persona(\"Fermin\", 16, \"Estudiante\")\npersona_1.imprimir()\npersona_2.imprimir()\npersona_3.imprimir()\nprint(persona_1.es_mayor_de_edad())\nprint(persona_2.es_mayor_de_edad())\nprint(persona_3.es_mayor_de_edad())",
        "detail": "Untitled-1",
        "documentation": {}
    },
    {
        "label": "persona_2",
        "kind": 5,
        "importPath": "Untitled-1",
        "description": "Untitled-1",
        "peekOfCode": "persona_2 = Persona(\"Diego\", 45, \"Desarrollador de Software\")\npersona_3 = Persona(\"Fermin\", 16, \"Estudiante\")\npersona_1.imprimir()\npersona_2.imprimir()\npersona_3.imprimir()\nprint(persona_1.es_mayor_de_edad())\nprint(persona_2.es_mayor_de_edad())\nprint(persona_3.es_mayor_de_edad())",
        "detail": "Untitled-1",
        "documentation": {}
    },
    {
        "label": "persona_3",
        "kind": 5,
        "importPath": "Untitled-1",
        "description": "Untitled-1",
        "peekOfCode": "persona_3 = Persona(\"Fermin\", 16, \"Estudiante\")\npersona_1.imprimir()\npersona_2.imprimir()\npersona_3.imprimir()\nprint(persona_1.es_mayor_de_edad())\nprint(persona_2.es_mayor_de_edad())\nprint(persona_3.es_mayor_de_edad())",
        "detail": "Untitled-1",
        "documentation": {}
    },
    {
        "label": "calificacion",
        "kind": 5,
        "importPath": "Untitled_2",
        "description": "Untitled_2",
        "peekOfCode": "calificacion = float(input(\"Ingrese la calificación del estudiante: \"))\nif calificacion >= 6:\n    print(\"El estudiante ha aprobado.\")\nelse:\n    print(\"El estudiante ha reprobado.\")",
        "detail": "Untitled_2",
        "documentation": {}
    },
    {
        "label": "USUARIO",
        "kind": 5,
        "importPath": "Usuario3",
        "description": "Usuario3",
        "peekOfCode": "USUARIO = \"Mónica\"\nPASSWORD = \"Notienecontraseña\"\ningrese_usuario = input(\"Ingrese el usuario a continuacion:\")\ningrese_pass = input(\"Ingrese el contraseña a continuacion:\")\nif USUARIO == ingrese_usuario and PASSWORD == ingrese_pass:\n    print(\"Bienvenido Usuario\")",
        "detail": "Usuario3",
        "documentation": {}
    },
    {
        "label": "PASSWORD",
        "kind": 5,
        "importPath": "Usuario3",
        "description": "Usuario3",
        "peekOfCode": "PASSWORD = \"Notienecontraseña\"\ningrese_usuario = input(\"Ingrese el usuario a continuacion:\")\ningrese_pass = input(\"Ingrese el contraseña a continuacion:\")\nif USUARIO == ingrese_usuario and PASSWORD == ingrese_pass:\n    print(\"Bienvenido Usuario\")",
        "detail": "Usuario3",
        "documentation": {}
    },
    {
        "label": "ingrese_usuario",
        "kind": 5,
        "importPath": "Usuario3",
        "description": "Usuario3",
        "peekOfCode": "ingrese_usuario = input(\"Ingrese el usuario a continuacion:\")\ningrese_pass = input(\"Ingrese el contraseña a continuacion:\")\nif USUARIO == ingrese_usuario and PASSWORD == ingrese_pass:\n    print(\"Bienvenido Usuario\")",
        "detail": "Usuario3",
        "documentation": {}
    },
    {
        "label": "ingrese_pass",
        "kind": 5,
        "importPath": "Usuario3",
        "description": "Usuario3",
        "peekOfCode": "ingrese_pass = input(\"Ingrese el contraseña a continuacion:\")\nif USUARIO == ingrese_usuario and PASSWORD == ingrese_pass:\n    print(\"Bienvenido Usuario\")",
        "detail": "Usuario3",
        "documentation": {}
    },
    {
        "label": "login",
        "kind": 2,
        "importPath": "usuarios",
        "description": "usuarios",
        "peekOfCode": "def login():\n    intentos = 3\n    while intentos > 0:\n        usuario = input(\"Ingresa tu nombre de usuario: \")\n        contraseña = input(\"Ingresa tu contraseña: \")\n        if usuario in usuarios and usuarios[usuario] == contraseña:\n            print(\"¡Login exitoso!\")\n            return True\n        else:\n            intentos -= 1",
        "detail": "usuarios",
        "documentation": {}
    },
    {
        "label": "usuarios",
        "kind": 5,
        "importPath": "usuarios",
        "description": "usuarios",
        "peekOfCode": "usuarios = {\n    \"usuario1\": \"contraseña1\",\n    \"usuario2\": \"contraseña2\",\n    \"usuario3\": \"contraseña3\"\n}\ndef login():\n    intentos = 3\n    while intentos > 0:\n        usuario = input(\"Ingresa tu nombre de usuario: \")\n        contraseña = input(\"Ingresa tu contraseña: \")",
        "detail": "usuarios",
        "documentation": {}
    },
    {
        "label": "ususarios",
        "kind": 5,
        "importPath": "usuarios_contraseñas",
        "description": "usuarios_contraseñas",
        "peekOfCode": "ususarios = {\n\"usuario1\":\"contraseña1\",\n\"usuario2\":\"contraseña2\",\n\"usuario3\":\"contraseña3\"\n}\nintentos = 3\nwhile intentos > 0:\n    usuario = input( \"Ingresa tu nombre de usuario: \")\n    contraseña = input( \"Ingresa tu contraseña: \")\n    if usuario in usuarios and usuarios[usuario] == contraseña:",
        "detail": "usuarios_contraseñas",
        "documentation": {}
    },
    {
        "label": "intentos",
        "kind": 5,
        "importPath": "usuarios_contraseñas",
        "description": "usuarios_contraseñas",
        "peekOfCode": "intentos = 3\nwhile intentos > 0:\n    usuario = input( \"Ingresa tu nombre de usuario: \")\n    contraseña = input( \"Ingresa tu contraseña: \")\n    if usuario in usuarios and usuarios[usuario] == contraseña:\n            print(\"¡Login exitoso!\")\n            intentos -= 1\n            print(f\"Usuario o contraseña incorrectos. Te quedan {intentos} intentos.\")\n    print(\"Número máximo de intentos alcanzado. Acceso denegado.\")",
        "detail": "usuarios_contraseñas",
        "documentation": {}
    },
    {
        "label": "cuit",
        "kind": 5,
        "importPath": "verificador_cuit",
        "description": "verificador_cuit",
        "peekOfCode": "cuit = input(\"Ingrese su CUIT para saber si es valido:\")\n# Validaciones mínimas\nif len(cuit) != 13 or cuit[2] != \"-\" or cuit[11] != \"-\":\n    print(\"CUIT inválido\")\nelse:\n    base = [5, 4, 3, 2, 7, 6, 5, 4, 3, 2]\n    cuit_sin_guiones = cuit.replace(\"-\", \"\")  # Remuevo los guiones\n    # Calculo el dígito verificador\n    aux = 0\n    for i in range(10):",
        "detail": "verificador_cuit",
        "documentation": {}
    },
    {
        "label": "hablar",
        "kind": 5,
        "importPath": "voz2",
        "description": "voz2",
        "peekOfCode": "hablar = input(\"escribe lo que quieras que diga\")\nengine.say(hablar) \nvoice= engine.getProperty('voices')\nfor i,voice in enumerate(voice):\n    print(f\"{i}. {voice.name} ({voice.languages})\") \nengine.setProperty('rate', 300)\nengine.setProperty(\"voice,voices[1].id\")",
        "detail": "voz2",
        "documentation": {}
    },
    {
        "label": "acumulador",
        "kind": 5,
        "importPath": "while_sumadora",
        "description": "while_sumadora",
        "peekOfCode": "acumulador = 0\n    numero = input(\"Ingrese un numero\")\n    while numero ==0\n    if numero.isdigit():\n        numero =int(numero)\n        acumulador += numero\n        print (f\" el numero ingresado es {numero} y el numero acumulado es {acumulador}\")\n    else:\n        print(\"Ingrese un numero valido\")",
        "detail": "while_sumadora",
        "documentation": {}
    }
]